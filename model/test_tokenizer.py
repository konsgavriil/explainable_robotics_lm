from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("meta-llama/Llama-2-7b-hf")

def print_tokens_with_ids(txt):
    tokens = tokenizer.tokenize(txt, add_special_tokens=False)
    token_ids = tokenizer.encode(txt, add_special_tokens=False)
    print(list(zip(tokens, token_ids)))
prompt = "### Instruction: Here's a representation that describes the current state of an autonomous maritime vehicle:\n{'objective': 'Loiter around in different areas which are selected randomly, while avoiding obstacles and collision with other vessels. Finally, once the command is provided by the operator, return to starting point.', 'deploy': 'True', 'return': 'False', 'station_keep': 'False', 'next_loiter_point': 'point7', 'obstacle_name': 'obstacle_0', 'obstacle_proximity': 'very far', 'contact_range': 'very far', 'contact_resolved': 'FALSE', 'collision_avoidance_mode': 'none', 'speed': 'fast', 'heading': 'northwest', 'loiter_point_direction': 'northwest', 'new_loiter_area': 'False', 'obstacle_direction': 'northeast', 'name': 'gilda', 'active_behaviour': 'loiter'}\nGiven the provided representation, please respond to the following user query in no more than three sentences:\nWhy has Gilda activated this specific behaviour? \n### Response: Gilda is currently in a fast loiter towards point 7 with a northwest heading. Since there are no obstacles or other vessels nearby, there is no need for collision avoidance or contact resolution."
prompt = "### Instruction: Here's a representation that describes the current state of an autonomous maritime vehicle:\n{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}\nRespond to the following what-if query in a maximum of three sentences. Additionally, include a state difference that illustrates the alterations in the user query.\nWhat if Alpha is deployed and return is true? \n### Response: If Alpha gets deployed and return is true, it would activate its return behaviour that configures the vehicle to return to its starting position after completing its surveying task.\ndeploy = 'True', return = 'True'"
prompt = "### Instruction: Below is a representation depicting the current state of an autonomous maritime vehicle:\n{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}\nRespond to the following why-not query in a maximum of three sentences. Additionally, include a behaviour difference that illustrates the alterations in the user query.Why is Alpha not surveying an area while avoiding obstacles instead of having no active behaviour? \n### Response: Alpha needs to be deployed, have a designated point to move towards, and encounter an obstacle in close proximity that has not been resolved. Currently, there are no obstacles present and the vessel is idle waiting for further instructions. \nOriginal: 'None', Modified: 'Waypt_survey,avoid_obstacle_avoid_obstacle_a'"

print_tokens_with_ids(prompt) 

response_template = "\n### Response:"
print_tokens_with_ids(response_template) 
