objective,deploy,return,obstacle_name,obstacle_proximity,obstacle_resolved,behaviour_stage,next_point,speed,heading,next_point_direction,obstacle_direction,name,ivphelm_bhv_active,representation,user_query,explanation,state_permutation
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}","What if deploy is true and return is false, but the obstacle proximity is very close?","If deploy is true and return is false, but the obstacle proximity is very close, then the vehicle would stop surveying the area and start avoiding the obstacle while remaining in the same location.","deploy = True, return = False, obstacle_proximity = 'very close'"
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",What if deploy is false and return is true?,"If deploy is false and return is true, then the vehicle would be idle and start returning to its starting position.","deploy = False, return = True"
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",What if the obstacle name is obstacle_b and it has been resolved?,"If the obstacle name is obstacle_b and it has been resolved, then the vehicle would continue with its current behaviour, whether it is surveying the area or returning to its starting position, without considering the obstacle.","obstacle_name = 'obstacle_b', obstacle_resolved = True"
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}","What if the vehicle is in the ""deploy"" stage but there is no next point defined?","If there is no next point defined while the vehicle is in the ""deploy"" stage, then the vehicle would not be able to conduct its surveying behavior and would remain idle.",next_point = 'none'
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}","What if the vehicle is in the ""return"" stage and there is an obstacle nearby that has not been resolved?","If there is an obstacle nearby that has not been resolved while the vehicle is in the ""return"" stage, then the vehicle would continue returning to its starting point while avoiding the obstacle.","obstacle_name = obstacle_a, obstacle_proximity = nearby, obstacle_resolved = 'False'"
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}","What if the vehicle is in the ""surveying an area"" behavior but there is no objective defined?","If there is no objective defined while the vehicle is in the ""surveying an area"" behavior, then it would not have a specific goal for its survey and its behavior may be undefined or random.",objective = 'none'
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",What if there’s obstacle_b in very close proximity which hasn’t been avoided?,"
If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.","obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",What if deploy is false and return is true?,"If deploy is false and return is true, then the vehicle would be returning to its starting point without having surveyed any area.","deploy = 'False', return = 'True'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}","What if deploy is true, return is true, obstacle resolved is true, and obstacle proximity is none?","If deploy is true, return is true, the obstacle has been resolved, and there is no obstacle proximity, then the vehicle would be returning to its starting point without any obstacle to avoid.","deploy = 'True', return = 'True', obstacle_resolved = 'True', obstacle_proximity = 'none'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if there’s obstacle_a in nearby proximity which hasn’t been avoided?,"If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.","obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if deploy is false and return is true?,"If deploy is false and return is true, then the vehicle would be returning to its starting position.","deploy = 'False', return = 'True'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if the vehicle has completed its survey and all obstacles are resolved?,"If the vehicle has completed its survey and all obstacles are resolved, then the vehicle would be idle with no activated behavior.","behavior_stage = 'idle', obstacle_resolved = 'True'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if the vehicle is already at point 0 and there's obstacle_b in very close proximity which hasn’t been avoided?,"If the vehicle is already at point 0 and there's obstacle_b in very close proximity, then the vehicle would remain at point 0 and initiate obstacle avoidance behavior to avoid obstacle_b. ","next_point = 'point0', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if the vehicle has completed its survey and there's obstacle_c nearby which has been resolved?,"If the vehicle has completed its survey and there's obstacle_c nearby which has been resolved, then the vehicle would continue returning to its starting point without avoiding the obstacle.","active_behaviour = 'returning', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'True'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",What if the vehicle is idle and there's no obstacle present?,"If the vehicle is idle and there's no obstacle present, then the vehicle would remain idle with no activated behavior.","behaviour_stage = 'idle', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'"
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,moderate,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'moderate', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the deploy status is false and the return status is false?
Explanation: If the deploy status is false and the return status is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = false, return = false

Query 2: What if the obstacle proximity is nearby and the obstacle resolved status is false?
Explanation: If the obstacle proximity is nearby and the obstacle resolved status is false, then the vehicle would be surveying the area while avoiding the obstacle.
State permutation: obstacle_proximity = 'nearby', obstacle_resolved = false

Query 3: What if the deploy status is true, return status is true, and the obstacle proximity is very close?
Explanation: If the deploy status is true, return status is true, and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State permutation: deploy = true, return = true, obstacle_proximity = 'very close'

Query 4: What if there's obstacle_a in close proximity which hasn't been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = false

Query 5: What if the deploy status is false and the next point direction is northwest?
Explanation: If the deploy status is false and the next point direction is northwest, then the vehicle would be idle with no activated behavior and its next movement would be towards the northwest.
State permutation: deploy = false, next_point_direction = 'northwest'

Query 6: What if the vehicle has reached the final point and the return status is false?
Explanation: If the vehicle has reached the final point and the return status is false, then the vehicle would be surveying the area at its current location.
State permutation: next_point = 'point3', return = false",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

User query: What if the vehicle is already at its starting position?

Explanation: If the vehicle is already at its starting position, then the vehicle would be idle with no activated behavior.

State permutation: next_point = 'none', next_point_direction = 'none'

User query: What if the vehicle is at point 1?

Explanation: If the vehicle is at point 1, then the vehicle would continue moving towards point 2 during its survey.

State permutation: next_point = 'point2', next_point_direction = direction towards point 2",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

Query 2: What if the vehicle is currently returning to its starting point?
Explanation: If the vehicle is currently returning to its starting point, then it would not be surveying the area and would instead be moving directly towards its starting point.
State permutation: return = 'True', active_behaviour = 'returning', next_point = 'starting position'

Query 3: What if the vehicle is idle with no activated behaviour?
Explanation: If the vehicle is idle with no activated behaviour, then it would not be deploying or performing any survey or return tasks.
State permutation: deploy = 'False', return = 'False', active_behaviour = 'idle'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_a in very close proximity while surveying? 
Explanation: If obstacle_a is very close to the vehicle while surveying, the vehicle would prioritize avoiding the obstacle and adjust its path accordingly. 
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if the vehicle needs to return to its starting point but encounters obstacle_b in nearby proximity that has not been resolved? 
Explanation: If obstacle_b is nearby and unresolved while the vehicle is returning to its starting point, the vehicle would divert from its original path and take measures to avoid obstacle_b in order to safely reach its starting point.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is idle with no activated behaviour and encounters obstacle_c in close proximity that has not been resolved? 
Explanation: If obstacle_c is close and unresolved while the vehicle is idle, the vehicle would remain idle and continue to prioritize obstacle resolution before engaging in any other behavior.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,advanced,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying the area.
State permutation: deploy = False, return = True

2. What if the obstacle is resolved?
Explanation: If the obstacle is resolved, then the vehicle can continue surveying the area or returning to its starting point without avoiding the obstacle.
State permutation: obstacle_resolved = True

3. What if the next point is point2 instead of point3?
Explanation: If the next point is point2 instead of point3, then the vehicle would change its direction and head towards point2 during its survey or return journey.
State permutation: next_point = 'point2'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,advanced,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

Query 2: What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = False, return = False

Query 3: What if deploy is true, return is true, obstacle name is obstacle_c, obstacle resolved is false and obstacle proximity has value very close?
Explanation: If deploy is true, return is true, obstacle name is obstacle_c, obstacle resolved is false and obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding obstacle_c.
State_permutation: deploy = True, return = True, obstacle_name = 'obstacle_c', obstacle_resolved = False, obstacle_proximity = 'very close'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if the vehicle is in the idle state without any activated behavior?

Explanation: If the vehicle is in the idle state without any activated behavior, then it would not be surveying an area or returning to its starting point. It would simply remain idle and not perform any tasks.

State_permutation: deploy = False, return = False

What if the vehicle is returning to its starting point while avoiding an obstacle in very close proximity?

Explanation: If the vehicle is returning to its starting point while avoiding an obstacle in very close proximity, then it would prioritize obstacle avoidance over returning to the starting point. It would adjust its path to avoid the obstacle and continue towards the starting point.

State_permutation: return = True, obstacle_name = (any obstacle name), obstacle_proximity = 'very close', obstacle_resolved = False

What if the vehicle is surveying the area while avoiding an obstacle in close proximity that has already been resolved?

Explanation: If the vehicle is surveying the area while avoiding an obstacle in close proximity that has already been resolved, then it would continue its surveying behavior without any changes. The obstacle has already been resolved, so it would not affect the vehicle's behavior.

State_permutation: deploy = True, obstacle_name = (any obstacle name), obstacle_proximity = 'close', obstacle_resolved = True",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity and it hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a' 
obstacle_proximity = 'close' 
obstacle_resolved = False

User query: What if deploy is false?

Explanation: If deploy is false, then the vehicle would be idle with no activated behavior.

State permutation:
deploy = False

User query: What if return is true and obstacle_proximity is nearby?

Explanation: If return is true and the obstacle is in nearby proximity, then the vehicle would be returning to its starting point while avoiding the obstacle.

State permutation:
return = True
obstacle_proximity = 'nearby'

Representation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 
'deploy': 'True', 
'return': 'False', 
'obstacle_name': none, 
'obstacle_proximity': 'none', 
'obstacle_resolved': 'False', 
'behaviour_stage': 'in-transit', 
'next_point': 'point3', 
'speed': 'very fast', 
'heading': 'northwest', 
'next_point_direction': 'northwest', 
'obstacle_direction': 'northwest', 
'name': 'alpha', 
'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,advanced,point2,max speed,southeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

User query: What if the vehicle is already on its way back to the starting position?

Explanation: If the vehicle is already on its way back to the starting position, then encountering an obstacle in close proximity would not change its behavior. The vehicle would continue returning to its starting point while avoiding the obstacle.

State_permutation: 
- return = 'True'

User query: What if the vehicle is currently idle?

Explanation: If the vehicle is currently idle, encountering an obstacle in close proximity would not change its behavior. The vehicle would remain idle and not move towards any points or return to its starting position.

State_permutation: 
- deploy = 'False'

-----------------------------------------------------------------------------------------------------------------

Representation: 
{
  'objective': 'Go to points 0, 1, 2 and then return to starting position.', 
  'deploy': 'True', 
  'return': 'False', 
  'obstacle_name': 'none', 
  'obstacle_proximity': 'none', 
  'obstacle_resolved': 'False', 
  'behaviour_stage': 'advanced', 
  'next_point': 'point2', 
  'speed': 'max speed', 
  'heading': 'southeast', 
  'next_point_direction': 'northwest', 
  'obstacle_direction': 'none', 
  'name': 'alpha', 
  'active_behaviour': 'waypt_survey'
}

User query: What if the vehicle's objective changes to 'Go to points 1 and 2 and then return to starting position'?

Explanation: If the vehicle's objective changes to 'Go to points 1 and 2 and then return to starting position', the next point would be updated to 'point1' and the behavior stage would change to 'in-transit'. The vehicle would then continue its survey from point1 and proceed to point2 before returning to the starting position.

State_permutation: 
- objective = 'Go to points 1 and 2 and then return to starting position'
- next_point = 'point1'
- behaviour_stage = 'in-transit'

User query: What if the vehicle encounters an obstacle named obstacle_b?

Explanation: If the vehicle encounters an obstacle named obstacle_b, the obstacle_name would be updated to 'obstacle_b' and the obstacle_resolved would remain 'False'. The vehicle would continue its survey while avoiding the obstacle.

State_permutation: 
- obstacle_name = 'obstacle_b'

User query: What if the vehicle's speed reduces to 'slow'?

Explanation: If the vehicle's speed reduces to 'slow', the speed variable would be updated to 'slow'. The vehicle would then continue its survey at a slower speed.

State_permutation: 
- speed = 'slow'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,southeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if the vehicle has already reached point 2?

Explanation: If the vehicle has already reached point 2, then it will not continue moving towards the next point and will instead start the return to its starting position.

State permutation: next_point = 'point2'

User query: What if the vehicle encounters obstacle_b in very close proximity?

Explanation: If the vehicle encounters obstacle_b in very close proximity, then it will continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close'

User query: What if the vehicle is not in the 'waypt_survey' behavior?

Explanation: If the vehicle is not in the 'waypt_survey' behavior, then its current behavior and actions may differ depending on the specific behavior it is currently engaged in.

State permutation: active_behavior = 'some_other_behavior'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

---

User query: What if deploy is false?

Explanation: If deploy is false, then the vehicle would be idle with no activated behavior.

State permutation: deploy = false

---

User query: What if return is true?

Explanation: If return is true, then the vehicle would be returning to its starting point.

State permutation: return = true

---

Representation: {'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if there’s an obstacle_b in nearby proximity which hasn’t been resolved?

Explanation: If there was obstacle_b in nearby proximity and it hasn't been resolved, then the vehicle would continue the survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

---

User query: What if the vehicle's speed is slow?

Explanation: If the vehicle's speed is slow, then it would take longer for the vehicle to reach its destination points.

State permutation: speed = 'slow'

---

User query: What if the vehicle's heading is east?

Explanation: If the vehicle's heading is east, then its direction would be towards the east.

State permutation: heading = 'east'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if obstacle name is obstacle_b and obstacle proximity is very close?

Explanation: If the obstacle name is obstacle_b and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.

State permutation: deploy = False, return = True",
"Go to points 0, 1, 2 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northwest,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'


User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.

State_permutation:
deploy = 'False'
return = 'True'


User query: What if the vehicle is idle with no activated behaviour?

Explanation: If the vehicle is idle with no activated behaviour, then both deploy and return would be false.

State_permutation:
deploy = 'False'
return = 'False'


Representation: 
{
  'objective': 'Go to points 0, 1, 2 and then return to starting position.', 
  'deploy': 'True', 
  'return': 'False', 
  'obstacle_name': 'none', 
  'obstacle_proximity': 'none', 
  'obstacle_resolved': 'False', 
  'behaviour_stage': 'in-transit', 
  'next_point': 'point2', 
  'speed': 'very fast', 
  'heading': 'northwest', 
  'next_point_direction': 'northwest', 
  'obstacle_direction': 'none', 
  'name': 'alpha', 
  'active_behaviour': 'waypt_survey'
}",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,none,False,in-transit,point2,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is currently returning to its starting point but there is an obstacle_b in very close proximity that hasn't been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle is currently surveying an area but there is an obstacle_c in nearby proximity that hasn't been avoided?
Explanation: If there was obstacle_c in nearby proximity, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is currently idle with no activated behavior but there is an obstacle_d in close proximity that hasn't been avoided?
Explanation: If there was obstacle_d in close proximity, then the vehicle would remain idle with no activated behavior while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point2,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is currently returning to its starting point and there's an obstacle_b in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2) What if the vehicle is currently surveying the area and there's an obstacle_c in close proximity which has been resolved?
Explanation: If there was obstacle_c in close proximity and it has been resolved, then the vehicle would continue surveying the area without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'True'

3) What if the vehicle is currently idle with no activated behaviour and there's no obstacle in the vicinity?
Explanation: If there were no obstacles in the vicinity and the vehicle is idle, it would remain in its idle state with no activated behavior.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point2,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is returning to its starting point while avoiding obstacle_b in nearby proximity which hasn't been resolved?
Explanation: If there was obstacle_b in nearby proximity which hasn't been resolved, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is idle with no activated behavior?
Explanation: If the vehicle is idle with no activated behavior, then it means that both the deploy and return flags are false, and there are no obstacles present.
State permutation: deploy = 'False', return = 'False', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

3. What if the vehicle is surveying an area while avoiding obstacle_c in very close proximity which hasn't been resolved?
Explanation: If there was obstacle_c in very close proximity which hasn't been resolved, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point2,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
- obstacle_name: 'obstacle_a'
- obstacle_proximity: 'close'
- obstacle_resolved: 'False'

User query: What if there's obstacle_b in nearby proximity which has been resolved?

Explanation: If there was obstacle_b in nearby proximity which has been resolved, then the vehicle would continue moving towards point 3 during its survey, as the obstacle has already been taken care of.

State permutation: 
- obstacle_name: 'obstacle_b'
- obstacle_proximity: 'nearby'
- obstacle_resolved: 'True'

User query: What if there's obstacle_c in very close proximity which hasn't been resolved?

Explanation: If there was obstacle_c in very close proximity which hasn't been resolved, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
- obstacle_name: 'obstacle_c'
- obstacle_proximity: 'very close'
- obstacle_resolved: 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point2,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the deploy value is false?
Explanation: If the deploy value is false, then the vehicle would not be surveying any area and would remain idle with no activated behavior.
State_perception: deploy = 'False'

2. What if the obstacle proximity has the value ""far""?
Explanation: If the obstacle proximity has the value ""far"", then the vehicle would continue its survey or return to the starting point without considering the obstacle, as it is not in close proximity.
State_perception: obstacle_proximity = 'far'

3. What if the obstacle resolved value is true?
Explanation: If the obstacle resolved value is true, then the vehicle would continue its survey or return to the starting point without considering the obstacle, as it has already been resolved.
State_perception: obstacle_resolved = 'True'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point2,very fast,northwest,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is in the idle state with no activated behavior?
Explanation: If the vehicle is in the idle state with no activated behavior, it means that the deploy variable is set to false and the return variable is also set to false. The vehicle is not engaged in any surveying or returning activities.
State permutation: deploy = false, return = false

2. What if the vehicle is in the surveying state and there is an obstacle nearby that has not been resolved?
Explanation: If the vehicle is in the surveying state and there is an obstacle nearby that has not been resolved, the vehicle would continue surveying the area while actively avoiding the obstacle. It would take appropriate actions to navigate around the obstacle while continuing its survey.
State permutation: deploy = true, return = false, obstacle_name = obstacle_a, obstacle_proximity = nearby, obstacle_resolved = false

3. What if the vehicle is returning to its starting point and encounters an obstacle in close proximity that has not been resolved?
Explanation: If the vehicle is returning to its starting point and encounters an obstacle in close proximity that has not been resolved, the vehicle would prioritize avoiding the obstacle while continuing its return journey. It would take necessary measures to navigate around the obstacle and ensure a safe return to the starting position.
State permutation: deploy = true, return = true, obstacle_name = obstacle_a, obstacle_proximity = close, obstacle_resolved = false",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point2,fast,northwest,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

-------------------------------------------------------------------------------------------------------------------

User query: What if the vehicle deploys but doesn't return and there's no obstacle?

Explanation: If the vehicle deploys but doesn't return and there's no obstacle, then the vehicle would be in the surveying state while covering the specified points.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

-------------------------------------------------------------------------------------------------------------------

User query: What if the vehicle is idle and there's an obstacle_a in nearby proximity?

Explanation: If the vehicle is idle and there's an obstacle_a in nearby proximity, then the vehicle would not be activated and remain idle until the obstacle is resolved.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point2,very fast,northeast,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the deployment is false and return is false, but there is an obstacle_a in close proximity that hasn't been avoided? 
Explanation: In this scenario, if the deployment is false and return is false, but there is an obstacle_a in close proximity that hasn't been avoided, the vehicle would remain idle and not survey the area or return to its starting point.
State permutation: deploy = False, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

2. What if the deployment is true and return is false, and there is an obstacle_a in close proximity that has been resolved? 
Explanation: In this case, if the deployment is true and return is false, and there is an obstacle_a in close proximity that has been resolved, the vehicle would continue surveying the area without avoiding the obstacle.
State permutation: deploy = True, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = True

3. What if the deployment is true and return is true, and there is an obstacle_a in very close proximity that hasn't been resolved? 
Explanation: If the deployment is true and return is true, and there is an obstacle_a in very close proximity that hasn't been resolved, the vehicle would change its behavior and avoid the obstacle while returning to its starting point.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = False",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point2,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"First Query:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if there’s obstacle_a in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

Second Query:
Representation: {'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}

User query: What if the obstacle_a has been resolved?

Explanation: If the obstacle_a has been resolved, then the vehicle would continue moving towards point 2 during its survey without avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

Third Query:
Representation: {'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}

User query: What if the vehicle changes its heading to southwest?

Explanation: If the vehicle changes its heading to southwest, then it would deviate from the current path and move towards a different direction, which may require a new obstacle avoidance strategy.

State_permutation: heading = 'southwest'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point2,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1) What if the vehicle is returning to its starting point and there is an obstacle_a in very close proximity that hasn't been avoided?
Explanation: If there was obstacle_a in very close proximity, the vehicle would prioritize avoiding the obstacle over returning to its starting point. It would change its behavior from returning to avoiding the obstacle and continue surveying the area until obstacle_a is resolved.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, return = 'True'

2) What if the vehicle is surveying an area and there is no obstacle present?
Explanation: If there is no obstacle present, the vehicle would continue surveying the area without any interruptions. It would maintain its behavior of surveying points 0, 1, 2, and 3 before returning to its starting position.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’, deploy = 'True'

3) What if the vehicle is idle with no activated behavior and there is an obstacle_b in nearby proximity that hasn't been resolved?
Explanation: If there was obstacle_b in nearby proximity, the vehicle would remain idle and not deploy to survey or avoid any obstacles. It would wait until the obstacle_b is resolved before initiating any behavior.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’, deploy = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point2,very fast,northeast,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

User query: What if deploy is false?

Explanation: If deploy is false, then the vehicle would be idle with no activated behavior.

State_permutation:
- deploy = 'False'

User query: What if return is true and obstacle_resolved is true?

Explanation: If return is true and obstacle_resolved is true, then the vehicle would be returning to its starting point without needing to avoid any obstacle.

State_permutation:
- return = 'True'
- obstacle_resolved = 'True'

User query: What if the vehicle is surveying the area and obstacle_proximity is very close?

Explanation: If the vehicle is surveying the area and obstacle_proximity is very close, then the vehicle would be surveying the area while avoiding the obstacle, as it is in a dangerous proximity.

State_permutation:
- active_behaviour = 'waypt_survey'
- obstacle_proximity = 'very close'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point2,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle is returning to its starting point?
Explanation: If the vehicle is returning to its starting point, then the vehicle would change its behavior from surveying an area to returning to its starting point.
State permutation: 'return' = True

Query 2: What if the obstacle is resolved?
Explanation: If the obstacle is resolved, then the vehicle would be able to continue its survey or return to its starting point without avoiding the obstacle.
State permutation: 'obstacle_resolved' = True

Query 3: What if the obstacle is in very close proximity?
Explanation: If the obstacle is in very close proximity, then the vehicle would be surveying the area or returning to its starting point while avoiding the obstacle in a more cautious manner.
State permutation: 'obstacle_proximity' = 'very close'",
"Go to points 0, 1, 2 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point2,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query 2: What if obstacle_b is very close and obstacle_a is nearby, both unresolved?

Explanation: If obstacle_b is very close and obstacle_a is nearby, both unresolved, then the vehicle would prioritize avoiding obstacle_b as it is in very close proximity.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

User query 3: What if the vehicle has completed the survey and is returning, but there's obstacle_c in very close proximity?

Explanation: If the vehicle has completed the survey and is returning, but there's obstacle_c in very close proximity, then the vehicle would prioritize avoiding obstacle_c while returning to its starting point.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,nearby,False,completed,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle is currently in the ""surveying an area"" behavior and there is an obstacle nearby that hasn't been resolved?
Explanation: If there is an obstacle nearby that hasn't been resolved, the vehicle would continue to survey the area while avoiding the obstacle.
State permutation: obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is currently returning to its starting point and there is an obstacle in close proximity that hasn't been resolved?
Explanation: If there is an obstacle in close proximity that hasn't been resolved, the vehicle would continue to return to its starting point while avoiding the obstacle.
State permutation: obstacle_proximity = 'close', obstacle_resolved = 'False'

3. What if the vehicle is currently idle with no activated behavior and there is an obstacle very close that hasn't been resolved?
Explanation: If there is an obstacle very close that hasn't been resolved, the vehicle would remain idle and not engage in any behavior until the obstacle is resolved.
State permutation: obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. Query: What if the deploy is false?
Explanation: If the deploy is false, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = False

2. Query: What if the obstacle proximity is very close instead of nearby?
Explanation: If the obstacle proximity is very close, then the vehicle would be surveying the area while avoiding the obstacle.
State_permutation: obstacle_proximity = 'very close'

3. Query: What if the next point is point2 instead of none?
Explanation: If the next point is point2, then the vehicle would be returning to its starting point while avoiding the obstacle.
State_permutation: next_point = 'point2'

Representation:
{'objective': 'Go to points 0, 1, 2 and then return to starting position.',
 'deploy': 'True', 
 'return': 'True', 
 'obstacle_name': 'obstacle_a', 
 'obstacle_proximity': 'nearby', 
 'obstacle_resolved': 'False', 
 'behaviour_stage': 'in-transit', 
 'next_point': 'none', 
 'speed': 'very fast', 
 'heading': 'northwest', 
 'next_point_direction': 'none', 
 'obstacle_direction': 'southeast', 
 'name': 'alpha', 
 'active_behaviour': 'none'}",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"Query 1: What if the vehicle encounters obstacle_a in very close proximity which hasn't been resolved?
Explanation: If the vehicle encounters obstacle_a in very close proximity and it hasn't been resolved, then the vehicle would immediately stop its survey and start returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

Query 2: What if the vehicle's deploy is false and return is true?
Explanation: If the vehicle's deploy is false and return is true, then the vehicle would be idle and in the process of returning to its starting point.
State permutation: deploy = 'False', return = 'True'

Query 3: What if the obstacle name is none, but the obstacle proximity is nearby and obstacle resolved is false?
Explanation: If the obstacle name is none, but the obstacle proximity is nearby and the obstacle hasn't been resolved, then the vehicle would continue its surveying while being cautious of the obstacle's presence.
State permutation: obstacle_name = 'none', obstacle_proximity = 'nearby', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,medium distance,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the vehicle is already avoiding obstacle_a in close proximity during its survey?
Explanation: If the vehicle is already avoiding obstacle_a in close proximity, then it would continue to survey the area while avoiding the obstacle and maintain its current behavior.
State_permutation: obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is avoiding obstacle_b in very close proximity during its survey?
Explanation: If the vehicle is avoiding obstacle_b in very close proximity, then it would continue to survey the area while avoiding the obstacle and maintain its current behavior.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if there's no obstacle present during the survey?
Explanation: If there's no obstacle present during the survey, then the vehicle would continue its survey of the area without any obstacle avoidance behavior.
State_permutation: obstacle_name = 'none', obstacle_resolved = 'False', obstacle_proximity = 'none'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the vehicle is not deploying and not returning, and there is an obstacle_b nearby that has not been avoided?
Explanation: If there was obstacle_b nearby, the vehicle would remain idle with no activated behavior, as it is not deploying or returning.
State permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is deploying and returning, and there is no obstacle, but obstacle_resolved is true?
Explanation: If there is no obstacle but obstacle_resolved is true, the vehicle would continue surveying the area while avoiding any obstacles, as the obstacle is already resolved.
State permutation: deploy = 'True', return = 'True', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'

3. What if the vehicle is deploying, not returning, and there is an obstacle_c in very close proximity that has not been avoided?
Explanation: If there was obstacle_c in very close proximity, the vehicle would continue surveying the area while avoiding the obstacle, as it is not returning yet.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User Query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards the starting position during its survey while avoiding the obstacle.

State Permutation: 
- 'obstacle_name': 'obstacle_a'
- 'obstacle_proximity': 'close'
- 'obstacle_resolved': 'False'

User Query: What if the vehicle is idle?

Explanation: If the vehicle is idle, then it means that deploy and return are both false, and the vehicle has no activated behavior.

State Permutation: 
- 'deploy': 'False'
- 'return': 'False'

User Query: What if the vehicle is surveying an area without any obstacle?

Explanation: If the vehicle is surveying an area without any obstacle, then it means that deploy is true, return is false, and there is no obstacle in proximity.

State Permutation: 
- 'deploy': 'True'
- 'return': 'False'
- 'obstacle_name': 'none'
- 'obstacle_proximity': 'none'
- 'obstacle_resolved': 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,none,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"Query 1: What if there’s obstacle_a in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in very close proximity, then the vehicle would override its current behavior and prioritize obstacle avoidance. The vehicle would immediately stop surveying and start avoiding the obstacle while returning to its starting point.

State permutation:
obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

Query 2: What if the obstacle resolution status is true?

Explanation: If the obstacle resolution status is true, then the vehicle would consider the obstacle as resolved and continue its current behavior. The vehicle will either continue surveying the area or returning to its starting point depending on its current configuration.

State permutation:
obstacle_name = 'obstacle_a', obstacle_proximity = 'none', obstacle_resolved = 'True'

Query 3: What if the vehicle is not currently deployed?

Explanation: If the vehicle is not currently deployed, then it would be in an idle state with no activated behavior. It would not be surveying an area or returning to its starting point.

State permutation:
deploy = 'False'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,obstacle_a,very far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation 1: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

User query 2: What if there’s no obstacle nearby?

Explanation 2: If there was no obstacle nearby, then the vehicle would continue moving towards its starting point during its return without needing to avoid any obstacles.

State permutation 2: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

User query 3: What if the vehicle has already resolved an obstacle?

Explanation 3: If the vehicle has already resolved an obstacle, then it would no longer need to avoid it and can continue the survey or return without being affected by the obstacle.

State permutation 3: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,none,none,True,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the ""deploy"" value is changed to False?
Explanation: If the ""deploy"" value is changed to False, then the vehicle would not be in any specific behavior and would remain idle.
State permutation: 'deploy' = False

2. What if the ""return"" value is changed to True?
Explanation: If the ""return"" value is changed to True, then the vehicle would be returning to its starting point regardless of any obstacles or proximity.
State permutation: 'return' = True

3. What if the ""next_point"" value is changed to point2?
Explanation: If the ""next_point"" value is changed to point2, then the vehicle would change its objective to go to points 0, 1, and 2, and then return to its starting position.
State permutation: 'next_point' = 'point2'

Representation:
{'objective': 'Go to points 0, 1, 2 and then return to starting position.',
 'deploy': 'True',
 'return': 'True',
 'obstacle_name': 'none',
 'obstacle_proximity': 'none',
 'obstacle_resolved': 'True',
 'behaviour_stage': 'in-transit',
 'next_point': 'pointstart',
 'speed': 'max speed',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'none',
 'name': 'alpha',
 'active_behaviour': 'waypt_return'}

1. What if the ""obstacle_proximity"" value is changed to nearby?
Explanation: If the ""obstacle_proximity"" value is changed to nearby, then the vehicle would be in the behavior of surveying the area while avoiding the obstacle in a nearby proximity.
State permutation: 'obstacle_proximity' = 'nearby'

2. What if the ""obstacle_resolved"" value is changed to False?
Explanation: If the ""obstacle_resolved"" value is changed to False, then the vehicle would continue to return to its starting point while avoiding the obstacle.
State permutation: 'obstacle_resolved' = False

3. What if the ""next_point_direction"" value is changed to south?
Explanation: If the ""next_point_direction"" value is changed to south, then the vehicle would change its heading and direction towards the south while returning to its starting point.
State permutation: 'next_point_direction' = 'south'

Representation:
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'none',
 'obstacle_proximity': 'none',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue returning to its starting position while avoiding the obstacle.

State_permutation:
obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query 2: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behavior.

State_permutation:
deploy = 'False', return = 'True'

User query 3: What if the obstacle proximity is very close?

Explanation: If the obstacle proximity is very close, then the vehicle would be surveying the area or returning to its starting position while avoiding the obstacle, depending on the other conditions.

State_permutation:
obstacle_proximity = 'very close'",
"Go to points 0, 1, 2 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,very fast,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is idle with no activated behaviour?
Explanation: If the vehicle is idle with no activated behaviour, then the deploy flag would be false and the return flag would also be false.
State permutation: deploy = 'False', return = 'False'

3. What if there’s obstacle_b in nearby proximity which has been resolved?
Explanation: If there was obstacle_b in nearby proximity that has been resolved, then the vehicle would continue its survey without changing its behavior.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,max speed,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the ""deploy"" value is changed to False? 

Explanation: If the ""deploy"" value is changed to False, then the vehicle will not be surveying an area and will remain idle with no activated behavior.

State permutation: deploy = False

2. What if the ""return"" value is changed to True? 

Explanation: If the ""return"" value is changed to True, then the vehicle will be returning to its starting point regardless of the other conditions.

State permutation: return = True

3. What if the ""obstacle_proximity"" value is changed to nearby? 

Explanation: If the ""obstacle_proximity"" value is changed to nearby, then the vehicle will be surveying the area while avoiding an obstacle that is nearby.

State permutation: obstacle_proximity = nearby

First representation:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': none, 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

Second representation:
Representation: {'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

Note: In the second representation, 'none' should be changed to None.",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,very fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. User query: What if the vehicle is already at its starting position?
   Explanation: If the vehicle is already at its starting position, then the behavior stage would be set to ""completed"" and the active behavior would be set to ""none"".
   State permutation: next_point = 'none', next_point_direction = 'none'

2. User query: What if the vehicle encounters an obstacle in very close proximity while returning to its starting position?
   Explanation: If the vehicle encounters an obstacle in very close proximity while returning to its starting position, then the vehicle would continue returning while avoiding the obstacle.
   State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. User query: What if the vehicle is not deployed and there is an obstacle in nearby proximity which has been resolved?
   Explanation: If the vehicle is not deployed and there is an obstacle in nearby proximity which has been resolved, then the vehicle would remain idle with no activated behavior.
   State permutation: deploy = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"Query 1:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the obstacle resolution has been completed before reaching point3?
Explanation: If the obstacle resolution was completed before reaching point3, then the vehicle would continue its survey without avoiding the obstacle, since the obstacle is already resolved.
State permutation: obstacle_resolved = 'True'

Query 2:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the obstacle proximity is 'none' instead of 'very close'?
Explanation: If the obstacle proximity was 'none' instead of 'very close', then the vehicle would continue its survey while avoiding the obstacle, as the obstacle is not considered to be in close proximity.
State permutation: obstacle_proximity = 'none'

Query 3:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the obstacle has already been resolved before reaching point3 and the vehicle is in the return stage?
Explanation: If the obstacle has already been resolved before reaching point3 and the vehicle is in the return stage, then the vehicle would continue returning to its starting point without considering the obstacle, as it is already resolved.
State permutation: obstacle_resolved = 'True', return = 'True'",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,moderate,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'moderate', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards its next point during its survey while avoiding the obstacle.

State permutation 1:
obstacle_name: 'obstacle_a'
obstacle_proximity: 'close'
obstacle_resolved: False

User query 2: What if deploy is false and return is true?

Explanation: If deploy is set to false and return is set to true, then the vehicle would be returning to its starting position without surveying any area.

State permutation 2:
deploy: False
return: True

User query 3: What if obstacle_resolved is true?

Explanation: If obstacle_resolved is set to true, then it means that the obstacle has been successfully resolved and the vehicle can continue its survey or return without obstacle avoidance.

State permutation 3:
obstacle_resolved: True

For the second representation:

User query 1: What if deploy is true and return is true?

Explanation: If deploy is set to true and return is set to true, then the vehicle would be returning to its starting position without completing the survey.

State permutation 1:
deploy: True
return: True

User query 2: What if the objective is ""Go to points 0, 1, 2, 3, 4 and then return to starting position.""?

Explanation: If the objective is changed to ""Go to points 0, 1, 2, 3, 4 and then return to starting position,"" then the vehicle's objective would be modified to include an additional point before returning.

State permutation 2:
objective: ""Go to points 0, 1, 2, 3, 4 and then return to starting position.""

User query 3: What if the active behaviour is ""obstacle_avoidance""?

Explanation: If the active behaviour is set to ""obstacle_avoidance,"" then the vehicle would be actively avoiding obstacles instead of surveying or returning.

State permutation 3:
active_behaviour: ""obstacle_avoidance""",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,low,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'low', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle is not deploying and there is an obstacle in nearby proximity that has not been avoided?
Explanation: If the vehicle is not deploying and there is an obstacle in nearby proximity that has not been avoided, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = False

2. What if the vehicle is deploying, returning, and there is an obstacle_b in very close proximity that has not been resolved?
Explanation: If the vehicle is deploying, returning, and there is an obstacle_b in very close proximity that has not been resolved, then the vehicle would continue returning to its starting point while avoiding the obstacle_b.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = False

3. What if the vehicle is deploying, not returning, and there is no obstacle in close proximity?
Explanation: If the vehicle is deploying, not returning, and there is no obstacle in close proximity, then the vehicle would be surveying the area without any obstacle avoidance.
State permutation: deploy = True, return = False, obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = False",
"Go to points 0, 1, 2 and then return to starting position.",False,False,none,none,False,completed,none,idle,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'idle', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle is currently idle with no activated behavior and the deploy status is changed to true?
Explanation: If the vehicle is currently idle with no activated behavior and the deploy status is changed to true, then the vehicle would start surveying an area.
State permutation: deploy = true, active_behaviour = 'waypt_survey'

2. What if the vehicle is currently surveying an area and the return status is changed to true?
Explanation: If the vehicle is currently surveying an area and the return status is changed to true, then the vehicle would start returning to its starting point.
State permutation: return = true, active_behaviour = 'returning'

3. What if the vehicle is currently surveying the area while avoiding an obstacle and the obstacle proximity is changed to very close?
Explanation: If the vehicle is currently surveying the area while avoiding an obstacle and the obstacle proximity is changed to very close, then the vehicle would increase its avoidance measures and adjust its behavior accordingly.
State permutation: obstacle_proximity = 'very close', active_behaviour = 'obstacle_avoidance'

For the second representation:

1. What if the vehicle is currently completed its behavior and the deploy status is changed to true?
Explanation: If the vehicle has already completed its behavior and the deploy status is changed to true, then the vehicle would start surveying an area.
State permutation: deploy = true, active_behaviour = 'waypt_survey'

2. What if the vehicle is currently idle with no activated behavior and the return status is changed to true?
Explanation: If the vehicle is currently idle with no activated behavior and the return status is changed to true, then the vehicle would start returning to its starting point.
State permutation: return = true, active_behaviour = 'returning'

3. What if the vehicle is currently surveying an area and an obstacle is detected?
Explanation: If the vehicle is currently surveying an area and an obstacle is detected, then the vehicle will initiate obstacle avoidance procedures.
State permutation: obstacle_name = 'obstacle_detected', active_behaviour = 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
Representation: 
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 
  'deploy': 'True', 
  'return': 'False', 
  'obstacle_name': 'obstacle_a', 
  'obstacle_proximity': 'close', 
  'obstacle_resolved': 'False', 
  'behaviour_stage': 'in-transit', 
  'next_point': 'point3', 
  'speed': 'very fast', 
  'heading': 'northwest', 
  'next_point_direction': 'northwest', 
  'obstacle_direction': 'northwest', 
  'name': 'alpha', 
  'active_behaviour': 'waypt_survey'
}

Other possible queries:

1. What if the vehicle is not deploying and not returning?
Explanation: If the vehicle is not deploying and not returning, then the vehicle would be idle with no activated behavior.

State permutation: 
Representation: 
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 
  'deploy': 'False', 
  'return': 'False', 
  'obstacle_name':'none', 
  'obstacle_proximity': 'none', 
  'obstacle_resolved': 'False', 
  'behaviour_stage': 'none', 
  'next_point': 'none', 
  'speed': 'none', 
  'heading': 'none', 
  'next_point_direction': 'none', 
  'obstacle_direction': 'none', 
  'name': 'alpha', 
  'active_behaviour': 'none'
}

2. What if the vehicle is returning and there's an obstacle in very close proximity that hasn't been avoided?
Explanation: If the vehicle is returning and there's an obstacle in very close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.

State permutation: 
Representation: 
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'True',
  'return': 'True',
  'obstacle_name': 'obstacle_a',
  'obstacle_proximity': 'very close',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point3',
  'speed': 'very fast',
  'heading': 'northwest',
  'next_point_direction': 'northwest',
  'obstacle_direction': 'northwest',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}

3. What if the vehicle is idle with no activated behavior?
Explanation: If the vehicle is idle with no activated behavior, then the vehicle would not be deploying or returning.

State permutation: 
Representation: 
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'False',
  'return': 'False',
  'obstacle_name': 'none',
  'obstacle_proximity': 'none',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'none',
  'next_point': 'none',
  'speed': 'none',
  'heading': 'none',
  'next_point_direction': 'none',
  'obstacle_direction': 'none',
  'name': 'alpha',
  'active_behaviour': 'none'
}",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would be in the surveying mode while actively avoiding the obstacle. It would continue moving towards point 3 during its survey while taking necessary measures to avoid obstacle_a.

State permutation: 

Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to the starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

Other possible queries and permutations:

1. Query: What if deploy is false and return is true?
   Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting position from the survey area.
   State permutation:
   Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to the starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

2. Query: What if deploy is true, return is false, obstacle proximity is nearby, and obstacle resolved is true?
   Explanation: If deploy is true, return is false, obstacle proximity is nearby, and obstacle resolved is true, then the vehicle would continue surveying the area while considering the obstacle already resolved and not requiring any avoidance action.
   State permutation:
   Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to the starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-progress', 'next_point': 'point3', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

3. Query: What if obstacle proximity is very close and obstacle resolved is true?
   Explanation: If the obstacle proximity is very close and obstacle resolved is true, then the vehicle would continue surveying the area while considering the obstacle already resolved and not requiring any avoidance action even in the case of very close proximity.
   State permutation:
   Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to the starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-progress', 'next_point': 'point3', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there's obstacle_a in close proximity which hasn't been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue to be idle with no activated behavior.

State permutation: 
obstacle_name = 'obstacle_a', 
obstacle_proximity = 'close', 
obstacle_resolved = 'False', 
behaviour_stage = 'none', 
next_point = 'none', 
speed = 'idle', 
heading = 'south', 
next_point_direction = 'none', 
obstacle_direction = 'none', 
active_behaviour = 'none'

User query: What if 'return' is true and an obstacle is nearby but already resolved?

Explanation: If 'return' is true and an obstacle is nearby but already resolved, then the vehicle would be returning to its starting point while no longer avoiding the obstacle.

State permutation:
return = 'True',
obstacle_name = 'none',
obstacle_proximity = 'nearby',
obstacle_resolved = 'True',
active_behaviour = 'returning'

User query: What if 'deploy' is false and there's an obstacle in very close proximity?

Explanation: If 'deploy' is false and there's an obstacle in very close proximity, then the vehicle would be idle with no activated behavior while avoiding the obstacle.

State permutation:
deploy = 'False',
obstacle_proximity = 'very close',
active_behaviour = 'none'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"Query 1: What if the vehicle reaches its next point but there is an obstacle nearby that has not been resolved?
Explanation: If the vehicle reaches its next point but there is an obstacle nearby that has not been resolved, then the vehicle would enter the surveying behavior while avoiding the obstacle.
State permutation: next_point = 'point3', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

Query 2: What if the vehicle is in the surveying behavior but there is an obstacle very close to it that has not been resolved?
Explanation: If the vehicle is in the surveying behavior but there is an obstacle very close to it that has not been resolved, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: active_behaviour = 'waypt_survey', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

Query 3: What if the vehicle is returning to its starting position and there is an obstacle nearby that has not been resolved?
Explanation: If the vehicle is returning to its starting position and there is an obstacle nearby that has not been resolved, then the vehicle would continue returning while avoiding the obstacle.
State permutation: active_behaviour = 'return_start', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the deploy value is false?
Explanation: If the deploy value is false, then the vehicle would not be surveying the area or performing any other behavior. It would remain idle with no activated behavior.
State permutation: deploy = False

Query 2: What if the obstacle_resolved value is true?
Explanation: If the obstacle_resolved value is true, then it means the vehicle has successfully avoided the obstacle. In this case, the vehicle would continue its survey or return to the starting point without any hindrance from the obstacle.
State permutation: obstacle_resolved = True

Query 3: What if the objective is changed to 'Go to points 4, 5, 6, 7 and then return to starting position'?
Explanation: If the objective is changed as mentioned, the vehicle would follow a different set of waypoints: points 4, 5, 6, and 7. After reaching point 7, it would then return to the starting position.
State permutation: objective = 'Go to points 4, 5, 6, 7 and then return to starting position'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle reaches point 3 and obstacle_a becomes very close, but it is not resolved?
Explanation: If obstacle_a becomes very close while the vehicle is at point 3, the vehicle would still be in the survey mode but will start avoiding obstacle_a while continuing its survey.
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

Query 2: What if the vehicle is at point 2 and obstacle_b appears nearby, but it is not resolved?
Explanation: If obstacle_b appears nearby when the vehicle is at point 2, the vehicle would switch to the obstacle avoidance mode while still surveying the area.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

Query 3: What if the vehicle is at point 1 and obstacle_c becomes close and is not resolved?
Explanation: If obstacle_c becomes close while the vehicle is at point 1, the vehicle would change its mode to obstacle avoidance while continuing the survey.
State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,moderate,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'moderate', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is currently returning to its starting point and there is an obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would change its behavior from returning to its starting point to surveying the area while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the vehicle is currently idle with no activated behavior and an obstacle_c in very close proximity is detected?
Explanation: If there was obstacle_c in very close proximity, then the vehicle would change its behavior from being idle to surveying the area while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if the vehicle is currently surveying an area and there is an obstacle_d in close proximity which hasn't been avoided?
Explanation: If there was obstacle_d in close proximity, then the vehicle would continue surveying the area while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"First Query: What if the vehicle encounters obstacle_a in close proximity which hasn't been avoided?

Explanation: If the vehicle encounters obstacle_a in close proximity and it hasn't been avoided, then the vehicle would stop its surveying behavior and activate its obstacle avoidance behavior to safely navigate around the obstacle. 

State permutation: 
obstacle_name = 'obstacle_a', 
obstacle_proximity = 'close', 
obstacle_resolved = False, 
active_behaviour = 'obstacle_avoidance'

Second Query: What if the vehicle has already resolved obstacle_b in very close proximity?

Explanation: If the vehicle has already resolved obstacle_b in very close proximity, then the vehicle would continue with its surveying behavior without any interruption. 

State permutation: 
obstacle_name = 'obstacle_b', 
obstacle_proximity = 'very close', 
obstacle_resolved = True

Third Query: What if the vehicle is already returning to its starting point and encounters obstacle_c in nearby proximity?

Explanation: If the vehicle is already returning to its starting point and encounters obstacle_c in nearby proximity, then the vehicle would adjust its path to avoid the obstacle while continuing to return to its starting point. 

State permutation: 
obstacle_name = 'obstacle_c', 
obstacle_proximity = 'nearby', 
obstacle_resolved = False, 
active_behaviour = 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is already at point 3 and there's obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If the vehicle is already at point 3 and there's obstacle_b in nearby proximity, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is returning to its starting point and there's obstacle_c in very close proximity which hasn't been avoided?
Explanation: If the vehicle is returning to its starting point and there's obstacle_c in very close proximity, then the vehicle would change its behavior and prioritize avoiding the obstacle over returning to the starting point.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False', return = 'True'

3. What if the vehicle is idle with no activated behavior and there's obstacle_d in close proximity which hasn't been avoided?
Explanation: If the vehicle is idle with no activated behavior and there's obstacle_d in close proximity, then the vehicle would still remain idle and not move towards any points since it's not deployed.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False', deploy = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is in close proximity to obstacle_b, which has not been resolved?
Explanation: If the vehicle is in close proximity to obstacle_b and the obstacle has not been resolved, then the vehicle would continue moving towards point0 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle has already resolved obstacle_a and obstacle_b and there are no other obstacles nearby?
Explanation: If the vehicle has already resolved obstacle_a and obstacle_b and there are no other obstacles nearby, then the vehicle would continue its survey without any obstacles to avoid.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'

3. What if the vehicle's deploy value is set to false and return value is set to true?
Explanation: If the vehicle's deploy value is set to false and return value is set to true, then the vehicle would be returning to its starting point and not conducting any survey or obstacle avoidance.
State permutation: deploy = 'False', return = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is in advanced stage and there's an obstacle_b in very close proximity which hasn't been resolved?
Explanation: If there was an obstacle_b in very close proximity and it hasn't been resolved, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2) What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State permutation: deploy = 'False', return = 'True'

3) What if the vehicle is in advanced stage and there's an obstacle_c nearby which has been resolved?
Explanation: If there was an obstacle_c nearby and it has been resolved, then the vehicle would continue moving towards point 0 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is deployed and there is an obstacle_b in very close proximity that hasn't been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle. 
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = ‘False’

2) What if the vehicle is not deployed and the obstacle_c is in nearby proximity which hasn't been resolved yet?
Explanation: If the vehicle is not deployed and obstacle_c is in nearby proximity and hasn't been resolved, then the vehicle would remain idle without any activated behaviour. 
State_permutation: deploy = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3) What if the vehicle is deployed, but both deploy and return are set to false and there is an obstacle_d in close proximity that hasn't been resolved yet?
Explanation: If the vehicle is deployed, but both deploy and return are set to false, and there is an obstacle_d in close proximity that hasn't been resolved yet, then the vehicle would continue surveying the area while avoiding the obstacle. 
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s an obstacle_b in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the obstacle proximity is nearby and obstacle_a has been resolved?
Explanation: If the obstacle proximity is nearby and obstacle_a has been resolved, then the vehicle would continue surveying the area without avoiding any obstacle.
State_permutation: obstacle_proximity = 'nearby', obstacle_resolved = 'True'

3. What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then it would remain idle with no activated behavior.
State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which has been resolved?
Explanation: If there was obstacle_b in nearby proximity but it has been resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’

2. What if the vehicle is instructed to return while obstacle_c is in very close proximity and hasn't been resolved?
Explanation: If the vehicle is instructed to return while obstacle_c is in very close proximity and hasn't been resolved, then the vehicle would change its behavior and start avoiding the obstacle while returning to its starting point.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if the vehicle's behavior stage is not 'in-transit' but 'waiting' and obstacle_d is in nearby proximity and hasn't been resolved?
Explanation: If the vehicle's behavior stage is not 'in-transit' but 'waiting' and obstacle_d is in nearby proximity and hasn't been resolved, then the vehicle would not survey or return to its starting point. It would remain idle and wait for the obstacle to be resolved.
State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. Query: What if the vehicle is in close proximity to obstacle_b while returning to its starting point?
   Explanation: If the vehicle is in close proximity to obstacle_b while returning to its starting point, then the vehicle would adjust its path to avoid the obstacle and continue returning to its starting point.
   State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. Query: What if the vehicle is no longer in transit and has reached point 2?
   Explanation: If the vehicle is no longer in transit and has reached point 2, then the vehicle would change its behavior stage to 'surveying' and start surveying the area.
   State permutation: behaviour_stage = 'surveying', next_point = 'point2', next_point_direction = 'none'

3. Query: What if the vehicle's speed is changed to 'slow' while avoiding an obstacle in very close proximity?
   Explanation: If the vehicle's speed is changed to 'slow' while avoiding an obstacle in very close proximity, then the vehicle would adjust its speed accordingly to safely navigate around the obstacle.
   State permutation: speed = 'slow', obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southwest,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is already in the process of avoiding an obstacle when obstacle_a in close proximity is detected? 

Explanation: If obstacle_a in close proximity is detected while the vehicle is already in the process of avoiding an obstacle, the vehicle would continue to prioritize avoiding the obstacle it is currently avoiding and adjust its path accordingly to avoid obstacle_a as well. 

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False', active_behaviour = 'avoid_obstacle'

2. What if deploy is false and return is true, and obstacle_a in very close proximity is detected?

Explanation: If obstacle_a in very close proximity is detected while the vehicle is returning to its starting point and both deploy and return are true, the vehicle would prioritize avoiding the obstacle and adjust its path to avoid obstacle_a before continuing with the return to the starting point.

State permutation: deploy = 'False', return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False', active_behaviour = 'return_obstacle_avoid'

3. What if deploy is true, return is true, obstacle_a in nearby proximity is detected, and obstacle_b in close proximity is detected as well?

Explanation: If both obstacle_a in nearby proximity and obstacle_b in close proximity are detected while the vehicle is returning to its starting point and both deploy and return are true, the vehicle would prioritize avoiding both obstacles. It would adjust its path to avoid both obstacle_a and obstacle_b before continuing with the return to the starting point.

State permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False', active_behaviour = 'return_obstacle_avoid', obstacle_name_2 = 'obstacle_b', obstacle_proximity_2 = 'close', obstacle_resolved_2 = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,none,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = ‘False’

User query 2: What if deploy is false and return is true?
Explanation 2: If deploy is false and return is true, then the vehicle would be idle and not performing any survey or avoiding obstacles.
State permutation 2: deploy = 'false', return = 'true'

User query 3: What if the vehicle is not in transit and the next point is not point3?
Explanation 3: If the vehicle is not in transit and the next point is not point3, then the vehicle would not be surveying the area or moving towards point 3.
State permutation 3: behaviour_stage = 'not-in-transit', next_point != 'point3'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
   Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
   State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. User query: What if the vehicle is currently returning to its starting point and there is no obstacle present?
   Explanation: If the vehicle is currently returning to its starting point and there is no obstacle present, then the vehicle would continue returning to its starting point without any hindrances.
   State permutation: deploy = 'True', return = 'True', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

3. User query: What if the vehicle is currently idle with no activated behavior and there is an obstacle_b in very close proximity which hasn't been resolved?
   Explanation: If the vehicle is idle with no activated behavior and there is an obstacle_b in very close proximity which hasn't been resolved, then the vehicle would remain idle and not move until the obstacle is resolved.
   State permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.

State permutation:
deploy = 'False'
return = 'True'

User query: What if the obstacle proximity is 'very close'?

Explanation: If the obstacle proximity is 'very close', then the vehicle would be surveying the area while avoiding the obstacle, as long as the obstacle name is not equal to none and obstacle resolved is false.

State permutation:
obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the obstacle is obstacle_a in very close proximity and has not been resolved?
Explanation: If the obstacle is obstacle_a in very close proximity and has not been resolved, the vehicle would stop surveying and immediately return to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point.
State_permutation: deploy = 'False', return = 'True'

3. What if the vehicle is not surveying but has obstacle_b in nearby proximity that has been resolved?
Explanation: If the vehicle is not surveying but has obstacle_b in nearby proximity that has been resolved, it would continue its current behavior of moving towards the next point without avoiding the obstacle.
State_permutation: active_behaviour does not contain 'survey', obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if deploy is false and return is true?
Explanation: If deploy was false and return was true, then the vehicle would be returning to its starting point without surveying any area.
State permutation: deploy = false, return = true

2. What if obstacle_resolved is true?
Explanation: If obstacle_resolved was true, then the obstacle would have been successfully avoided or resolved by the vehicle.
State permutation: obstacle_resolved = true

3. What if the obstacle_proximity has a value of far?
Explanation: If the obstacle_proximity was far, then the vehicle would not consider the obstacle as a threat and continue with its survey or return without avoiding it.
State permutation: obstacle_proximity = far",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"Query 1: What if deploy is false?
Explanation: If deploy is false, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = False

Query 2: What if return is true?
Explanation: If return is true, then the vehicle would be returning to its starting point.
State_permutation: return = True

Query 3: What if obstacle_resolved is true?
Explanation: If obstacle_resolved is true, then the obstacle would no longer be an issue for the vehicle.
State_permutation: obstacle_resolved = True

-------------------------------------------------------------------------

Representation 1:

{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': none,
 'obstacle_proximity': 'none',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}

-------------------------------------------------------------------------

Query 1: What if there's obstacle_a in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = False

Query 2: What if deploy is true and return is true?
Explanation: If deploy is true and return is true, then the vehicle would be returning to its starting point.
State_permutation: deploy = True, return = True

Query 3: What if active_behaviour is 'waypt_survey'?
Explanation: If the active_behaviour is 'waypt_survey', then the vehicle would be surveying an area.
State_permutation: active_behaviour = 'waypt_survey'

-------------------------------------------------------------------------

Representation 2:

{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'obstacle_c',
 'obstacle_proximity': 'very close',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point1',
 'speed': 'very fast',
 'heading': 'southwest',
 'next_point_direction': 'southeast',
 'obstacle_direction': 'southeast',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}

-------------------------------------------------------------------------

Query 1: What if obstacle_proximity is 'close'?
Explanation: If the obstacle_proximity is 'close', then the vehicle would be surveying the area while avoiding an obstacle.
State_permutation: obstacle_proximity = 'close'

Query 2: What if next_point is 'point2'?
Explanation: If the next_point is 'point2', then the vehicle would be moving towards point 2 in its survey.
State_permutation: next_point = 'point2'

Query 3: What if speed is 'slow'?
Explanation: If the speed is 'slow', then the vehicle would be moving at a slower pace.
State_permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the obstacle is obstacle_a in very close proximity which hasn't been resolved?
Explanation: If there was obstacle_a in very close proximity and it hasn't been resolved, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if there's no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue moving towards point 3 during its survey without any need to avoid an obstacle.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’

3. What if the obstacle is obstacle_b in nearby proximity which has been resolved?
Explanation: If there is obstacle_b in nearby proximity and it has been resolved, then the vehicle would continue moving towards point 3 during its survey without any need to avoid an obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"User query: What if the vehicle resolves obstacle_c and obstacle proximity becomes far?

Explanation: If the vehicle resolves obstacle_c and the obstacle proximity becomes far, then the vehicle would continue surveying the area without avoiding any obstacles.

State_permutation: obstacle_resolved = 'True', obstacle_proximity = 'far'

User query: What if the vehicle changes its behavior to return and obstacle_b in nearby proximity is not resolved?

Explanation: If the vehicle changes its behavior to return and obstacle_b in nearby proximity is not resolved, then the vehicle would start returning to its starting point while avoiding obstacle_b.

State_permutation: active_behaviour = 'return', obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

User query: What if the vehicle's deploy is set to false?

Explanation: If the vehicle's deploy is set to false, then the vehicle would be idle with no activated behavior.

State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the deploy value is set to false?
Explanation: If the deploy value is set to false, then the vehicle would not be in the surveying behavior stage. It would be idle with no activated behavior.
State permutation: deploy = 'False'

2. What if the return value is set to true?
Explanation: If the return value is set to true, then the vehicle would be in the process of returning to its starting point. It would no longer be surveying the area.
State permutation: return = 'True'

3. What if the obstacle proximity is set to 'none'?
Explanation: If the obstacle proximity is set to 'none', then there would be no obstacle in close proximity to the vehicle. The vehicle would continue surveying the area without avoiding any obstacle.
State permutation: obstacle_proximity = 'none'

---

Representation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 
'deploy': 'True', 
'return': 'False', 
'obstacle_name': 'obstacle_c', 
'obstacle_proximity': 'close', 
'obstacle_resolved': 'False', 
'behaviour_stage': 'in-transit', 
'next_point': 'point1', 
'speed': 'very fast', 
'heading': 'southeast', 
'next_point_direction': 'southeast', 
'obstacle_direction': 'northeast', 
'name': 'alpha', 
'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}

4. What if the obstacle proximity is set to 'very close'?
Explanation: If the obstacle proximity is set to 'very close', then the vehicle would be in an even closer proximity to the obstacle. It needs to avoid the obstacle to ensure safe navigation.
State permutation: obstacle_proximity = 'very close'

5. What if the active behaviour is set to 'returning'?
Explanation: If the active behaviour is set to 'returning', then the vehicle would no longer be in the surveying behavior stage. It would be in the process of returning to its starting point.
State permutation: active_behaviour = 'returning'

6. What if the obstacle resolved value is set to true?
Explanation: If the obstacle resolved value is set to true, then the obstacle would have been successfully resolved. The vehicle would no longer need to avoid the obstacle and can continue surveying the area.
State permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is already returning to its starting point and there's an obstacle d in nearby proximity that hasn't been avoided?
Explanation: If there was obstacle_d in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2) What if the vehicle is surveying an area, and there's no obstacle, but its speed is set to slow?
Explanation: If the vehicle is surveying an area without any obstacles but its speed is set to slow, then it would continue surveying at a slower pace.
State permutation: speed = 'slow'

3) What if the vehicle is idle with no activated behavior, and there's an obstacle_b in very close proximity that hasn't been resolved?
Explanation: If there was obstacle_b in very close proximity, and the vehicle is idle, then it would remain idle and not move towards any points until the obstacle is resolved.
State permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is already avoiding obstacle_c in nearby proximity?
Explanation: If the vehicle is already avoiding obstacle_c in nearby proximity, then it would continue surveying the area while avoiding the obstacle and moving towards point 1.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be in an idle state with no activated behavior.
State_permutation: deploy = 'False', return = 'False'

3. What if the vehicle is returning to its starting point while avoiding obstacle_c in very close proximity?
Explanation: If the vehicle is returning to its starting point while avoiding obstacle_c in very close proximity, then it would prioritize avoiding the obstacle and move towards its starting point.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = 'False', return = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southeast,south,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'south', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1st What-if Query:
What if there’s obstacle_a in nearby proximity which hasn’t been resolved?
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2nd What-if Query:
What if there’s obstacle_b in very close proximity which has been resolved?
Explanation: If there was obstacle_b in very close proximity, but it has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘True’

3rd What-if Query:
What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then it would be idle with no activated behavior.
State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southeast,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle is in the idle state with no activated behavior?
Explanation: If the vehicle is in the idle state with no activated behavior, it would mean that both deploy and return are false.
State permutation: deploy = False, return = False

Query 2: What if the vehicle is surveying an area while avoiding an obstacle?
Explanation: If the vehicle is surveying an area while avoiding an obstacle, it would mean that deploy is true, return is false, the obstacle name is not equal to none, obstacle resolved is false, and obstacle proximity has a value of nearby, close, or very close.
State permutation: deploy = True, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

Query 3: What if the vehicle is returning to its starting point while avoiding an obstacle?
Explanation: If the vehicle is returning to its starting point while avoiding an obstacle, it would mean that deploy is true, return is true, the obstacle name is not equal to none, obstacle resolved is false, and obstacle proximity has a value of nearby, close, or very close.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,medium distance,False,in-transit,point1,very fast,southeast,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: {'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False'}

User query 2: What if obstacle_c is resolved and no longer a concern?
Explanation: If obstacle_c is resolved and no longer a concern, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State permutation 2: {'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True'}

User query 3: What if the vehicle is instructed to return to its starting point?
Explanation: If the vehicle is instructed to return to its starting point, then the vehicle would no longer be in survey mode and would start heading back.
State permutation 3: {'return': 'True', 'active_behaviour': 'returning'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,medium distance,False,in-transit,point1,very fast,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

Query 2: What if the vehicle has already resolved obstacle_c?
Explanation: If the vehicle has already resolved obstacle_c, then it would continue its surveying behavior without considering the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'medium distance', obstacle_resolved = 'True'

Query 3: What if the vehicle's next point is point4 instead of point1?
Explanation: If the vehicle's next point is point4 instead of point1, then it would deviate from the original objective and go to an additional point before returning to the starting position.
State permutation: next_point = 'point4', next_point_direction = 'southwest'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,far,False,in-transit,point1,very fast,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, as described in the user query, the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation 1: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 2: What if the vehicle resolved obstacle_c?

Explanation: If the vehicle resolved obstacle_c, then it would continue surveying the area while avoiding the obstacle.

State permutation 2: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'far', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 3: What if the vehicle is currently in the return phase?

Explanation: If the vehicle is currently in the return phase, it would be moving towards its starting position.

State permutation 3: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,far,False,in-transit,point1,max speed,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is in survey mode and there's an obstacle_b in close proximity which hasn't been avoided?
Explanation: If there was obstacle_b in close proximity, the vehicle would change its behavior and start avoiding the obstacle while continuing its survey.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is in survey mode and there's no obstacle but obstacle_resolved is true?
Explanation: If there's no obstacle present but obstacle_resolved is true, it means that the vehicle has successfully avoided a previous obstacle and can continue its survey without any disruptions.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'

3. What if the vehicle is returning to its starting point and there's an obstacle_d in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_d in very close proximity, the vehicle would change its behavior and start avoiding the obstacle while continuing its return to the starting point.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,none,False,in-transit,point1,max speed,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query 2: What if the vehicle's behavior stage is ""returning to starting point"" instead of ""in-transit""?
Explanation 2: If the vehicle's behavior stage is ""returning to starting point"" instead of ""in-transit"", then the vehicle would be returning to its starting point regardless of any obstacles.
State permutation 2: behaviour_stage = 'returning to starting point'

User query 3: What if the vehicle's next point is point2 instead of point3?
Explanation 3: If the vehicle's next point is point2 instead of point3, then the vehicle would be surveying the area around point2 instead of point3.
State permutation 3: next_point = 'point2'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,none,False,in-transit,point1,very fast,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle is obstacle_b in nearby proximity and it is already resolved?
Explanation: If the obstacle is obstacle_b in nearby proximity and it is already resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'

2. What if the vehicle is not deployed and the obstacle proximity is very close?
Explanation: If the vehicle is not deployed and the obstacle proximity is very close, then the vehicle would remain idle with no activated behavior.
State_permutation: deploy = 'False', obstacle_proximity = 'very close'

3. What if the vehicle is returning and there is no obstacle?
Explanation: If the vehicle is returning and there is no obstacle, then the vehicle would continue returning to its starting point without avoiding any obstacles.
State_permutation: return = 'True', obstacle_name = 'none'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_c,very far,False,in-transit,point1,max speed,southwest,southwest,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity that hasn't been avoided, the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if the vehicle has already resolved obstacle_c?

Explanation: If the vehicle has already resolved obstacle_c, it would continue surveying the area while avoiding any other obstacles in its proximity.

State permutation:
obstacle_name = 'obstacle_c'
obstacle_proximity = 'very far'
obstacle_resolved = 'True'

User query: What if the vehicle is currently in the return stage?

Explanation: If the vehicle is currently in the return stage, it means that it has completed its survey and is returning to its starting position.

State permutation:
behaviour_stage = 'return'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,True,in-transit,point1,max speed,southwest,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is deployed but the obstacle proximity is very close and obstacle resolved is false?
Explanation: If the obstacle proximity is very close and obstacle resolved is false, the vehicle would continue surveying the area while avoiding the obstacle and then return to its starting point.
State permutation: deploy = True, obstacle_proximity = 'very close', obstacle_resolved = False

2. What if the vehicle is not deployed and the obstacle name is obstacle_b?
Explanation: If the vehicle is not deployed and the obstacle name is obstacle_b, the vehicle would remain idle with no activated behavior.
State permutation: deploy = False, obstacle_name = 'obstacle_b'

3. What if the vehicle is returning and the obstacle proximity is close, but the obstacle is resolved?
Explanation: If the vehicle is returning and the obstacle proximity is close, but the obstacle is resolved, the vehicle would continue returning to its starting point without avoiding the obstacle.
State permutation: return = True, obstacle_proximity = 'close', obstacle_resolved = True",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southwest,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle proximity is 'close' and the obstacle has been resolved?
Explanation: If the obstacle proximity is 'close' and the obstacle has been resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'none', obstacle_proximity = 'close', obstacle_resolved = 'True'

2. What if the vehicle has already reached point 1 and the obstacle proximity is 'close'?
Explanation: If the vehicle has already reached point 1 and the obstacle proximity is 'close', then the vehicle would still be surveying the area while avoiding the obstacle, but it would not change its current behavior.
State permutation: next_point = 'point1', obstacle_proximity = 'close'

3. What if the obstacle name is 'obstacle_b' and the obstacle has been resolved?
Explanation: If the obstacle name is 'obstacle_b' and the obstacle has been resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle, as the obstacle name does not match the specified condition.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,south,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'south', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is in close proximity to obstacle_b which hasn't been avoided?
Explanation: If there was obstacle_b in close proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

2. What if the vehicle is in nearby proximity to obstacle_c which has been resolved?
Explanation: If there was obstacle_c in nearby proximity but has been resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’

3. What if the vehicle is at point 3 and deploy is false, but return is true?
Explanation: If the vehicle is at point 3 and deploy is false while return is true, then the vehicle would be returning to its starting point.
State_permutation: next_point = 'point3', deploy = 'False', return = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southeast,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_b in very close proximity while surveying an area?
   - Explanation: If obstacle_b is detected in very close proximity, the vehicle would immediately stop surveying and start avoiding the obstacle.
   - State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle's active behavior changes to ""return to starting point"" while there is an unresolved obstacle_c nearby?
   - Explanation: If the vehicle is instructed to return to its starting point while there is an unresolved obstacle_c nearby, it would modify its behavior to avoid the obstacle and then proceed towards the starting point.
   - State permutation: active_behaviour = 'return_to_start', obstacle_name = 'obstacle_c', obstacle_resolved = 'False'

3. What if the vehicle's next point changes to point2 while there is an unresolved obstacle_d in close proximity?
   - Explanation: If the vehicle is directed to move to point2 while there is an unresolved obstacle_d in close proximity, it would adjust its path to avoid obstacle_d and reach the new destination.
   - State permutation: next_point = 'point2', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point1,max speed,southeast,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is not in the ""waypt_survey"" active behavior? 

Explanation: If the vehicle is not in the ""waypt_survey"" active behavior, then the vehicle would not be surveying the area and would be performing a different behavior.

State permutation: active_behaviour = 'different_behavior'

2) What if the vehicle is already at its starting position?

Explanation: If the vehicle is already at its starting position, then the vehicle would not need to return and would be idle with no activated behavior.

State permutation: next_point = 'starting_position'

3) What if the obstacle has been resolved?

Explanation: If the obstacle has been resolved, then the vehicle would not need to avoid it and would continue surveying the area or returning to its starting position without obstacle avoidance.

State permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point2,max speed,southeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle name is obstacle_b in nearby proximity but has been resolved?
Explanation: If obstacle_b is in nearby proximity but has been resolved, then the vehicle would continue moving towards point 2 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying the area.
State permutation: deploy = False, return = True

3. What if the vehicle is idle with no activated behavior?
Explanation: If the vehicle is idle with no activated behavior, then deploy and return would both be false.
State permutation: deploy = False, return = False",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,southeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the deploy value is set to False instead of True?
Explanation: If the deploy value is set to False, then the vehicle would not be surveying the area or returning to its starting point. It would remain idle with no activated behavior.
State permutation: 'deploy': False

2) What if the return value is set to True instead of False?
Explanation: If the return value is set to True, then the vehicle would be returning to its starting point instead of continuing its survey or remaining idle.
State permutation: 'return': True

3) What if the obstacle proximity is set to ""nearby"" instead of ""none""?
Explanation: If the obstacle proximity is set to ""nearby"" instead of ""none"", then the vehicle would be surveying the area while avoiding the obstacle, even if the obstacle has not been resolved.
State permutation: 'obstacle_proximity': 'nearby'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_b in very close proximity while surveying?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would stop surveying and start avoiding the obstacle while remaining in the same behavior stage.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle is currently returning to its starting point and encounters obstacle_c in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_c in nearby proximity while returning, then the vehicle would change its behavior and start avoiding the obstacle while still heading towards its starting point.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if deploy is false and return is true?
Explanation: If the vehicle is not deployed but is in the process of returning to its starting point, then the vehicle would still be considered idle with no activated behavior.
State permutation: deploy = 'False', return = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle has completed its survey and is returning to its starting point?
Explanation: If the vehicle has completed its survey and is returning to its starting point, then the vehicle will no longer be surveying the area and will be in the process of returning to its starting point.
State permutation: deploy = 'True', return = 'True', active_behaviour = 'return_to_starting_point'

3. What if the vehicle is not surveying any area and there are no obstacles?
Explanation: If the vehicle is not surveying any area and there are no obstacles, then the vehicle will be idle with no activated behavior.
State permutation: deploy = 'False', return = 'False', active_behaviour = 'none', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is deployed and there is an obstacle_b nearby which hasn't been avoided?
Explanation: If there was obstacle_b nearby, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is not deployed and there is an obstacle_c nearby which hasn't been avoided?
Explanation: If there was obstacle_c nearby, since the vehicle is not deployed, it would remain idle with no activated behavior.
State_permutation: deploy = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is deployed, returning to its starting point, and there is an obstacle_d in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_d in very close proximity, the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point2,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if the vehicle encounters obstacle_b in nearby proximity and it has already been resolved?
   Explanation: If obstacle_b is encountered in nearby proximity and has already been resolved, the vehicle would continue surveying the area without any change in its behavior.
   State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'True'

2. User query: What if the vehicle is in the deployment stage but its return is set to true?
   Explanation: If the vehicle is in the deployment stage but its return is set to true, it would change its behavior and start returning to its starting point instead of surveying the area.
   State permutation: return = 'True', behavior_stage = 'in-transit'

3. User query: What if the vehicle's next point is set to point1 instead of point3?
   Explanation: If the vehicle's next point is set to point1 instead of point3, its surveying behavior would change and it would start moving towards point1 instead of point3 during its survey.
   State permutation: next_point = 'point1', next_point_direction = 'northwest'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,advanced,point3,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if the vehicle is already in its return phase but there is an obstacle_a in close proximity that hasn't been resolved yet?
Explanation: If there was an obstacle_a in close proximity during the return phase, then the vehicle would continue avoiding the obstacle and adjusting its trajectory towards its starting position.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’, behaviour_stage = 'return', active_behaviour = 'obstacle_avoidance'

What if the vehicle is surveying an area and there is an obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was an obstacle_b in nearby proximity while surveying, then the vehicle would immediately initiate the obstacle avoidance behavior to avoid the obstacle and continue with its survey.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’, active_behaviour = 'obstacle_avoidance'

What if the vehicle is in idle mode and there is an obstacle_c in very close proximity which hasn't been resolved yet?
Explanation: If there was an obstacle_c in very close proximity while the vehicle is idle, then the vehicle would remain stationary and initiate the obstacle avoidance behavior to resolve the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, behaviour_stage = 'idle', active_behaviour = 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point3,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

Query 2: What if deploy is false?
Explanation: If deploy is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = False

Query 3: What if return is true?
Explanation: If return is true, then the vehicle would be returning to its starting point.
State permutation: return = True

Query 4: What if obstacle_resolved is true?
Explanation: If obstacle_resolved is true, then the vehicle would no longer be avoiding the obstacle.
State permutation: obstacle_resolved = True

Query 5: What if obstacle_proximity is nearby?
Explanation: If obstacle_proximity is nearby, then the vehicle would be surveying the area while avoiding the obstacle.
State permutation: obstacle_proximity = 'nearby'

Query 6: What if active_behaviour is 'none'?
Explanation: If active_behaviour is 'none', then the vehicle would not have any specific behavior activated.
State permutation: active_behaviour = 'none'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,none,none,False,in-transit,point3,very fast,northwest,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is already surveying an area and there's an obstacle_b nearby which hasn't been avoided?
Explanation: If there was obstacle_b nearby while the vehicle is surveying, then the vehicle would continue its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is returning to its starting point and there's an obstacle_c in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_c in very close proximity while the vehicle is returning, then the vehicle would change its route to avoid the obstacle and continue returning to its starting point.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

3. What if the vehicle is idle with no activated behavior and there's no obstacle present?
Explanation: If the vehicle is idle and there's no obstacle present, then the vehicle would remain idle until a new instruction is given.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,none,False,in-transit,point3,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is not deploying and is returning?
Explanation: If the vehicle is not deploying and is returning, then it means that the vehicle has completed its survey and is now returning to its starting position.
State permutation: deploy = False, return = True
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

2. What if the obstacle has been resolved and the vehicle is no longer avoiding it?
Explanation: If the obstacle has been resolved, it means that the vehicle has successfully avoided the obstacle and can continue its survey without avoiding it anymore.
State permutation: obstacle_resolved = True
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

3. What if the vehicle is not surveying and is returning to its starting point?
Explanation: If the vehicle is not surveying and is returning to its starting point, it means that the survey has been completed and the vehicle is now returning.
State permutation: active_behaviour = 'returning'
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'returning'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point3,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point instead of surveying the area.
State permutation: deploy = False, return = True

2. What if the obstacle has been resolved?
Explanation: If the obstacle has been resolved, then the vehicle would continue its survey or return to its starting point without avoiding the obstacle.
State permutation: obstacle_resolved = True

3. What if the vehicle is not in transit, but instead in the obstacle avoidance stage?
Explanation: If the vehicle is not in transit, but in the obstacle avoidance stage, it indicates that it has detected an obstacle and is actively avoiding it.
State permutation: behaviour_stage = obstacle_avoidance",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point3,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if obstacle_a is resolved and obstacle_b in nearby proximity is not avoided?
Explanation: If obstacle_a is resolved and obstacle_b is in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding obstacle_b.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

3. What if obstacle_a is resolved and there are no obstacles in nearby proximity?
Explanation: If obstacle_a is resolved and there are no obstacles in nearby proximity, then the vehicle would continue moving towards point 3 during its survey without avoiding any obstacles.
State_permutation: obstacle_name = none, 'obstacle_proximity': 'none', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point3,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1) What if the vehicle is not deployed and the obstacle name is obstacle_a?
Explanation: If the vehicle is not deployed and the obstacle name is obstacle_a, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = False, obstacle_name = 'obstacle_a'

2) What if the vehicle is returning to its starting point and the obstacle proximity is very close?
Explanation: If the vehicle is returning to its starting point and the obstacle proximity is very close, then the vehicle would continue returning while avoiding the obstacle.
State permutation: return = True, obstacle_proximity = 'very close'

3) What if the vehicle is surveying the area while avoiding an obstacle and the obstacle has been resolved?
Explanation: If the vehicle is surveying the area while avoiding an obstacle and the obstacle has been resolved, then the vehicle would continue surveying the area without changing its behavior.
State permutation: obstacle_resolved = True",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point3,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is returning to its starting position and there's an obstacle_b in nearby proximity which hasn't been resolved?
Explanation: If there was obstacle_b in nearby proximity and the vehicle is returning to its starting position, then the vehicle would continue moving towards its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is surveying the area and there's an obstacle_c in close proximity which has been resolved?
Explanation: If there was obstacle_c in close proximity and the vehicle is surveying the area, and the obstacle has already been resolved, then the vehicle would continue its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'True'

3. What if the vehicle is idle with no activated behavior and there's no obstacle present?
Explanation: If the vehicle is idle with no activated behavior and there's no obstacle present, then the vehicle would remain idle and not perform any action.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point3,very fast,northwest,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"Query 1: What if the deploy value is false instead of true?
Explanation: If the deploy value is false, then the vehicle would not be surveying the area and would be idle with no activated behavior.
State permutation: deploy = False

Query 2: What if the return value is true instead of false?
Explanation: If the return value is true, then the vehicle would be returning to its starting point instead of surveying the area.
State permutation: return = True

Query 3: What if the obstacle proximity has a value of ""nearby"" instead of ""very close""?
Explanation: If the obstacle proximity is ""nearby"" instead of ""very close"", then the vehicle would still be surveying the area while avoiding the obstacle, but the obstacle would be at a slightly greater distance.
State permutation: obstacle_proximity = ""nearby""

Query 4: What if there is no obstacle present (obstacle name = None) and the obstacle resolved is true?
Explanation: If there is no obstacle present and the obstacle resolved is true, then the vehicle would continue surveying the area without any obstacle avoidance behavior.
State permutation: obstacle_name = None, obstacle_resolved = True

Query 5: What if the behavior stage is ""completed"" instead of ""in-transit""?
Explanation: If the behavior stage is ""completed"" instead of ""in-transit"", then the vehicle would have finished its survey and would not be actively surveying or avoiding any obstacles.
State permutation: behaviour_stage = ""completed""

Query 6: What if the active behavior is ""return_to_start"" instead of ""waypt_survey,avoid_obstacle_avoid_obstacle_a""?
Explanation: If the active behavior is ""return_to_start"" instead of ""waypt_survey,avoid_obstacle_avoid_obstacle_a"", then the vehicle would be directly returning to its starting position without surveying or avoiding the obstacle.
State permutation: active_behaviour = ""return_to_start""",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point3,very fast,northwest,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1) What if the vehicle is in the idle state with no activated behavior?
Explanation: If the vehicle is in the idle state with no activated behavior, it means that the deploy and return flags are both false. It would indicate that the vehicle is not currently surveying an area or returning to its starting point.
State_permutation: deploy = 'False', return = 'False', active_behaviour = 'none'

2) What if the vehicle is returning to its starting point while avoiding an obstacle?
Explanation: If the vehicle is returning to its starting point while avoiding an obstacle, it would mean that both the deploy and return flags are true, and the obstacle is in close proximity and has not been resolved. The vehicle would prioritize avoiding the obstacle while continuing towards its starting point.
State_permutation: deploy = 'True', return = 'True', obstacle_proximity = 'close', obstacle_resolved = 'False'

3) What if the vehicle is in the surveying state without any obstacles nearby?
Explanation: If the vehicle is in the surveying state without any obstacles nearby, it means that the deploy flag is true, the return flag is false, and there is no obstacle in close proximity. The vehicle would continue surveying the area without needing to avoid any obstacles.
State_permutation: deploy = 'True', return = 'False', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point3,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the deploy value is changed to false?
Explanation: If the deploy value is changed to false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = 'False'

2. What if the return value is changed to true?
Explanation: If the return value is changed to true, then the vehicle would be returning to its starting point.
State permutation: return = 'True'

3. What if the obstacle proximity value is changed to ""far""?
Explanation: If the obstacle proximity value is changed to ""far"", then the vehicle would not consider the obstacle as nearby, close, or very close.
State permutation: obstacle_proximity = 'far'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point3,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"Query 1: What if the deploy value is false instead of true?

Explanation: If the deploy value was false, then the vehicle would not be surveying an area and would remain idle with no activated behavior.

State permutation: deploy = False

Query 2: What if the obstacle proximity has a value of ""far"" instead of ""close""?

Explanation: If the obstacle proximity was ""far"" instead of ""close"", then the vehicle would not consider the obstacle as a threat and would continue surveying the area without avoiding it.

State permutation: obstacle_proximity = ""far""

Query 3: What if the obstacle resolved value is true instead of false?

Explanation: If the obstacle resolved value was true instead of false, then the vehicle would not consider the obstacle as a threat and would continue surveying the area without avoiding it.

State permutation: obstacle_resolved = True",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point3,very fast,northeast,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is not deployed? 
Explanation: If the vehicle is not deployed, then it would not be surveying the area or returning to its starting point. It would remain idle with no activated behavior.
State_permutation: deploy = 'False'

2. What if the vehicle is deployed and the obstacle proximity is 'far'? 
Explanation: If the obstacle proximity is 'far', then the vehicle would continue surveying the area or returning to its starting point without any avoidance behavior because the obstacle is not considered close enough to pose a threat.
State_permutation: obstacle_proximity = 'far'

3. What if the obstacle has been resolved? 
Explanation: If the obstacle has been resolved, then the vehicle would continue surveying the area or returning to its starting point without any avoidance behavior because there is no longer a need to avoid the obstacle.
State_permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point3,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if the vehicle is not deploying but the obstacle has not been resolved?

Explanation: If the vehicle is not deploying but the obstacle has not been resolved, then the vehicle would remain idle with no activated behavior.

State permutation: deploy = 'false', obstacle_resolved = 'false'

User query: What if the vehicle is returning to its starting point and there is an obstacle in very close proximity that has not been resolved?

Explanation: If the vehicle is returning to its starting point and there is an obstacle in very close proximity that has not been resolved, then the vehicle would continue moving towards its starting point while avoiding the obstacle.

State permutation: return = 'true', obstacle_proximity = 'very close', obstacle_resolved = 'false'

User query: What if the vehicle is surveying an area, an obstacle named obstacle_b is nearby, and the obstacle has been resolved?

Explanation: If the vehicle is surveying an area, an obstacle named obstacle_b is nearby, and the obstacle has been resolved, then the vehicle would continue its survey without avoiding the obstacle.

State permutation: active_behaviour = 'waypt_survey', obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'true'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point3,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle has already resolved the obstacle but obstacle_name is still 'obstacle_a'?
Explanation: If the vehicle has already resolved obstacle_a, then it would continue moving towards point 3 during its survey without avoiding the obstacle.
State permutation: obstacle_resolved = 'True'

2. What if the vehicle is in the return stage but obstacle_proximity is 'very close'?
Explanation: If the vehicle is in the return stage and obstacle_proximity is 'very close', then it would deviate from its return path and avoid the obstacle while returning to its starting point.
State permutation: behaviour_stage = 'returning', obstacle_proximity = 'very close'

3. What if the vehicle's speed is 'slow' and obstacle_direction is 'north'?
Explanation: If the vehicle's speed is 'slow' and the obstacle is in the north direction, then it would adjust its speed and direction accordingly to avoid the obstacle while surveying the area.
State permutation: speed = 'slow', obstacle_direction = 'north'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,nearby,False,completed,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would be returning to its starting point while avoiding the obstacle.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

-------------------------------------------------------------------------------------------------------------------

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behavior but it would be returning to its starting point.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}

-------------------------------------------------------------------------------------------------------------------

User query: What if the obstacle proximity is very close and the obstacle has been resolved?

Explanation: If the obstacle proximity is very close and the obstacle has been resolved, then the vehicle would be surveying the area while avoiding the obstacle and the behavior of obstacle avoidance would be deactivated.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if obstacle_a is in close proximity which hasn't been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, according to the decision-making description, the vehicle would be in the state of surveying the area while avoiding the obstacle.

State permutation: 
{'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False'}

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, according to the decision-making description, the vehicle would be in the state of returning to its starting point.

State permutation: 
{'deploy': 'False', 'return': 'True'}

User query: What if obstacle_a is resolved?

Explanation: If obstacle_a is resolved, according to the decision-making description, the vehicle's obstacle_resolved value would be set to True.

State permutation: 
{'obstacle_resolved': 'True'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behavior.

State permutation: 
deploy = 'False'
return = 'True'

User query: What if the obstacle proximity is 'none'?

Explanation: If the obstacle proximity is 'none', then it means there is no obstacle nearby, close or very close to the vehicle.

State permutation: 
obstacle_proximity = 'none'

Representation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}

User query: What if the obstacle name is 'obstacle_b'?

Explanation: If the obstacle name is 'obstacle_b', then there is a different obstacle in close proximity to the vehicle that needs to be avoided.

State permutation: 
obstacle_name = 'obstacle_b'

User query: What if deploy is true and return is false and the obstacle has been resolved?

Explanation: If deploy is true, return is false, and the obstacle has been resolved, then the vehicle will continue surveying the area without avoiding the obstacle.

State permutation: 
deploy = 'True'
return = 'False'
obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,medium distance,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the vehicle's behavior stage is ""in-transit"" instead of ""waypt_survey"" when there is an obstacle_a in close proximity that hasn't been avoided?
Explanation: If the vehicle's behavior stage was ""in-transit"" instead of ""waypt_survey"" when there is an obstacle_a in close proximity that hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: behavior_stage = 'in-transit', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

2. What if the vehicle's next point is pointstart+1 instead of pointstart when there is an obstacle_a in medium distance that hasn't been avoided and the behavior stage is ""in-transit""?
Explanation: If the vehicle's next point was pointstart+1 instead of pointstart when there is an obstacle_a in medium distance that hasn't been avoided and the behavior stage is ""in-transit"", then the vehicle would change its direction towards the next point (pointstart+1) while avoiding the obstacle.
State_permutation: next_point = 'pointstart+1', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'medium distance', obstacle_resolved = ‘False’

3. What if the vehicle's active behavior is ""waypt_survey"" instead of ""waypt_return"" when there is an obstacle_a in medium distance that hasn't been avoided and the behavior stage is ""in-transit""?
Explanation: If the vehicle's active behavior was ""waypt_survey"" instead of ""waypt_return"" when there is an obstacle_a in medium distance that hasn't been avoided and the behavior stage is ""in-transit"", then the vehicle would continue surveying the area while avoiding the obstacle, instead of returning to its starting point.
State_permutation: active_behavior = 'waypt_survey', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'medium distance', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the deploy is false and return is false, but there is an obstacle_a in close proximity that hasn't been avoided?
Explanation: If the deploy is false and return is false, but there is an obstacle_a in close proximity that hasn't been avoided, then the vehicle would remain idle with no activated behavior. The obstacle_a would not affect the vehicle's state or behavior since it is not deployed.

State permutation: deploy = False, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

2. What if the deploy is true, return is false, and the obstacle proximity is very close?
Explanation: If the deploy is true, return is false, and the obstacle proximity is very close, then the vehicle would continue surveying the area while avoiding the obstacle. The obstacle's very close proximity would trigger the avoidance behavior, allowing the vehicle to survey around the obstacle.

State permutation: deploy = True, return = False, obstacle_proximity = 'very close'

3. What if the deploy is true, return is true, and the obstacle has been resolved?
Explanation: If the deploy is true, return is true, and the obstacle has been resolved, then the vehicle would continue returning to its starting point unaffected by the obstacle. The resolved obstacle would no longer hinder the vehicle's path, allowing it to smoothly return without avoidance behavior.

State permutation: deploy = True, return = True, obstacle_resolved = True",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query: What if the obstacle is resolved and the vehicle is no longer in close proximity to it?

Explanation: If the obstacle is resolved and the vehicle is no longer in close proximity to it, then the vehicle would continue its survey or return to its starting position depending on the current behaviour stage.

State_permutation: obstacle_resolved = 'True', obstacle_proximity = 'far'

User query: What if the vehicle is no longer in-transit and is now in the survey_completed stage?

Explanation: If the vehicle is no longer in-transit and is now in the survey_completed stage, then the vehicle would have completed its survey and might be ready to return to its starting position.

State_permutation: behaviour_stage = 'survey_completed'

User query: What if the vehicle changes its heading to southeast?

Explanation: If the vehicle changes its heading to southeast, then the vehicle would be heading in a different direction, which might affect its path and behaviour.

State_permutation: heading = 'southeast'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,none,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the obstacle_a is in very close proximity and hasn't been avoided?
Explanation: If obstacle_a is in very close proximity and hasn't been avoided, then the vehicle would prioritize avoiding the obstacle over continuing its survey or returning to its starting point. It would take immediate evasive action to steer clear of the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the obstacle_a is resolved and obstacle_b appears in close proximity?
Explanation: If obstacle_a is resolved but obstacle_b appears in close proximity, the vehicle would continue its survey or return to its starting point while avoiding obstacle_b. It would adjust its trajectory and navigation to steer clear of obstacle_b while maintaining its mission objective.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'True'

3. What if the obstacle_a is resolved and there are no obstacles in the vicinity?
Explanation: If obstacle_a is resolved and there are no obstacles in the vicinity, the vehicle would continue its survey or return to its starting point without the need for obstacle avoidance. It would proceed along its planned trajectory without any deviation due to obstacles.
State_permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,obstacle_a,very far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 

Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': obstacle_a, 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if there’s obstacle_b in nearby proximity which has been resolved?

Explanation: If there was obstacle_b in nearby proximity, which has been resolved, then the vehicle would continue moving towards point 3 during its survey, ignoring the resolved obstacle.

State_permutation: 

Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if there’s no obstacle and the vehicle has reached its starting point?

Explanation: If there's no obstacle and the vehicle has reached its starting point, then the vehicle is considered idle with no activated behavior.

State_permutation: 

Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,none,none,True,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = False, return = False

2. What if deploy is true, return is false, and obstacle proximity has value ""nearby""?
Explanation: If deploy is true, return is false, and obstacle proximity is ""nearby,"" then the vehicle would be surveying the area while avoiding an obstacle.
State_permutation: deploy = True, return = False, obstacle_proximity = ""nearby""

3. What if deploy is true, return is true, and obstacle proximity has value ""very close""?
Explanation: If deploy is true, return is true, and obstacle proximity is ""very close,"" then the vehicle would be returning to its starting point while avoiding an obstacle.
State_permutation: deploy = True, return = True, obstacle_proximity = ""very close""",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1) What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2) What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle is currently returning to its starting point, even if there are no obstacles present.
State permutation: deploy = 'False', return = 'True'

3) What if the vehicle is idle with no activated behavior and next_point is point2?
Explanation: If the vehicle is idle with no activated behavior and the next_point is point2, then it means that there has been a change in plans or an error in the system.
State permutation: behavior_stage = 'idle', next_point = 'point2'",
"Go to points 0, 1, 2, 3 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,very fast,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"User query: What if the obstacle_a is resolved and the vehicle is deploying but not returning?
Explanation: If the obstacle_a is resolved and the vehicle is deploying but not returning, then the vehicle would continue surveying the area without avoiding any obstacles.
State_permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True', deploy = 'True', return = 'False'.

User query: What if the vehicle is not deploying or returning?
Explanation: If the vehicle is not deploying or returning, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = 'False', return = 'False'.

User query: What if the obstacle_a is nearby and the vehicle is returning, but the obstacle is already resolved?
Explanation: If the obstacle_a is nearby and the vehicle is returning, but the obstacle is already resolved, then the vehicle would continue returning to its starting point without avoiding the obstacle.
State_permutation: obstacle_name = 'none', obstacle_proximity = 'nearby', obstacle_resolved = 'True', return = 'True'.",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,completed,none,very fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is false and return is true? 
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying any area. 
State permutation: deploy = false, return = true

2. What if deploy is false, return is false, and obstacle proximity is nearby? 
Explanation: If deploy is false, return is false, and there is an obstacle nearby, then the vehicle would remain idle and not activate any behavior. 
State permutation: deploy = false, return = false, obstacle_proximity = nearby

3. What if deploy is true, return is true, and obstacle resolved is true? 
Explanation: If deploy is true, return is true, and the obstacle has been resolved, then the vehicle would be returning to its starting position with no obstacle avoidance behavior. 
State permutation: deploy = true, return = true, obstacle_resolved = true",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,completed,none,fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle is not deployed and does not need to return, but there is an obstacle_b in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_b in very close proximity, since the vehicle is not deployed and doesn't need to return, it would remain idle with no activated behavior.
State Permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle is deployed and needs to return, but there is an obstacle_c in nearby proximity which hasn't been resolved?
Explanation: If there was obstacle_c in nearby proximity, since the vehicle is deployed and needs to return, it would start returning to its starting point while avoiding the obstacle.
State Permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is deployed and does not need to return, but there is an obstacle_d in close proximity which has been resolved?
Explanation: If there was obstacle_d in close proximity, since the obstacle has been resolved, the vehicle would continue surveying the area without any obstruction.
State Permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,completed,none,moderate,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'moderate', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided? 

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

Other queries and permutations for the provided representation:

1. Query: What if deploy is false and return is true?
   Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position.
   State_permutation: deploy = False, return = True

2. Query: What if the obstacle proximity is very close?
   Explanation: If the obstacle proximity is very close, then the vehicle would be surveying the area while avoiding the obstacle.
   State_permutation: obstacle_proximity = 'very close'

3. Query: What if the vehicle's active behaviour is 'waypt_survey'?
   Explanation: If the vehicle's active behaviour is 'waypt_survey', then the vehicle would be surveying the area.
   State_permutation: active_behaviour = 'waypt_survey'

Alternate representation:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'moderate', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

1. Query: What if the behavior stage is 'in-progress' instead of 'completed'?
   Explanation: If the behavior stage is 'in-progress', then the vehicle would be currently in the process of completing its objective.
   State_permutation: behaviour_stage = 'in-progress'

2. Query: What if the speed is 'slow' instead of 'moderate'?
   Explanation: If the speed is 'slow', then the vehicle would be traveling at a slower pace.
   State_permutation: speed = 'slow'

3. Query: What if there is an obstacle named 'obstacle_b' instead of 'none'?
   Explanation: If there is an obstacle named 'obstacle_b', then the vehicle would have to take appropriate measures to avoid it.
   State_permutation: obstacle_name = 'obstacle_b'",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,completed,none,low,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'low', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would remain in its completed state with no activated behavior. 

State permutation: {'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False'}

User query: What if the vehicle is not deploying and there is an obstacle_b nearby?

Explanation: If the vehicle is not deploying and there is obstacle_b nearby, then the vehicle would remain idle with no activated behavior.

State permutation: {'deploy': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby'}

User query: What if the vehicle is returning and there is an obstacle_c in very close proximity, which has not been resolved?

Explanation: If the vehicle is returning and there is obstacle_c in very close proximity, which has not been resolved, then the vehicle would continue returning to its starting point while avoiding the obstacle.

State permutation: {'return': 'True', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False'}",
"Go to points 0, 1, 2, 3 and then return to starting position.",False,False,none,none,False,completed,none,idle,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'idle', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

1. What if the vehicle is not deploying?
Explanation: If the vehicle is not deploying, then it would not be surveying the area and would remain idle with no activated behaviour.

State permutation:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'idle', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

2. What if the vehicle is returning?
Explanation: If the vehicle is returning, then it would not continue surveying the area and would instead move towards its starting point.

State permutation:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'starting position', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

3. What if the obstacle has already been resolved?
Explanation: If the obstacle has already been resolved, then the vehicle would not need to avoid it and would continue moving towards point 3 during its survey.

State permutation:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if 'deploy' is true and 'return' is false, but 'obstacle_resolved' is true and 'obstacle_name' is equal to none?
Explanation: If 'obstacle_resolved' is true and 'obstacle_name' is equal to none, it means that the vehicle has successfully avoided the obstacle. Therefore, the vehicle would continue surveying the area while avoiding any obstacles.
State permutation: 'obstacle_resolved' = true, 'obstacle_name' = none

2. What if 'deploy' is false and 'return' is false, but 'obstacle_proximity' has a value of 'nearby'?
Explanation: If 'obstacle_proximity' has a value of 'nearby', it indicates that there is an obstacle nearby. In this case, even though the vehicle is idle with no activated behavior, it would take the necessary actions to avoid the obstacle.
State permutation: 'obstacle_proximity' = 'nearby'

3. What if 'deploy' is true, 'return' is true, and 'obstacle_resolved' is true?
Explanation: If 'deploy' is true, 'return' is true, and 'obstacle_resolved' is true, it means that the vehicle has already successfully avoided the previous obstacle and is now returning to its starting point. The obstacle is no longer a factor in the decision-making process.
State permutation: 'deploy' = true, 'return' = true, 'obstacle_resolved' = true",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"Query 1:
What if the deploy is true, return is false, obstacle name is obstacle_a, obstacle resolved is false, and obstacle proximity has a value of nearby?

Explanation:
If the deploy is true, return is false, obstacle name is obstacle_a, obstacle resolved is false, and obstacle proximity is nearby, then the vehicle would be surveying the area while avoiding obstacle_a.

State Permutation:
obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', and obstacle_resolved = 'False'

Query 2:
What if the deploy is true, return is true, obstacle name is obstacle_b, obstacle resolved is false, and obstacle proximity has a value of close?

Explanation:
If the deploy is true, return is true, obstacle name is obstacle_b, obstacle resolved is false, and obstacle proximity is close, then the vehicle would be returning to its starting point while avoiding obstacle_b.

State Permutation:
obstacle_name = 'obstacle_b', obstacle_proximity = 'close', and obstacle_resolved = 'False'

Query 3:
What if the deploy is false and return is false?

Explanation:
If the deploy is false and return is false, then the vehicle would be idle with no activated behavior.

State Permutation:
deploy = 'False' and return = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle's objective is changed to 'Go to points 0, 1, 2, 3, 4, and then return to starting position'?
Explanation: If the objective is changed to include point 4, the vehicle would continue its survey and eventually return to the starting position after reaching point 4.
State_permutation: objective = 'Go to points 0, 1, 2, 3, 4 and then return to starting position.'

2. What if the vehicle's deploy status is changed to false?
Explanation: If the deploy status is changed to false, the vehicle would be idle with no activated behaviour and would not perform any survey or return to the starting position.
State_permutation: deploy = 'False'

3. What if there is an obstacle named 'obstacle_b' in very close proximity that has not been resolved?
Explanation: If there is an obstacle named 'obstacle_b' in very close proximity that has not been resolved, the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"First Query:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the obstacle_a in close proximity hasn't been avoided?
Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

Second Query:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the obstacle has already been resolved?
Explanation: If the obstacle has already been resolved, then the vehicle would continue moving towards point 3 during its survey without any concern for the previous obstacle.
State permutation: obstacle_resolved = 'True'

Third Query:
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'south', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}
User query: What if the vehicle was heading south instead of northwest?
Explanation: If the vehicle was heading south instead of northwest, then it would be moving towards point 3 in a different direction during its survey.
State permutation: heading = 'south'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State_permutation: deploy = 'False', return = 'True'

3. What if the vehicle's next_point is point2 instead of point0?
Explanation: If the vehicle's next_point is point2 instead of point0, then the vehicle would be heading towards a different waypoint during its survey.
State_permutation: next_point = 'point2'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if the vehicle encounters obstacle_b in very close proximity while returning to its starting point?
Explanation: If the vehicle encounters obstacle_b in very close proximity while returning to its starting point, then the vehicle would change its behavior and start avoiding the obstacle, adjusting its path accordingly.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. User query: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point, indicating that it has completed its survey and is not actively surveying any area.
State permutation: deploy = 'False', return = 'True'

3. User query: What if the vehicle's objective is to go to points 0, 1, 2, 3, 4, and 5 and then return to the starting position?
Explanation: If the vehicle's objective is to go to points 0, 1, 2, 3, 4, and 5 and then return to the starting position, then the vehicle would have an additional waypoint to reach before returning to the starting point, indicating a longer overall route.
State permutation: objective = 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,moderate,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'moderate', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if the vehicle has completed its survey and is ready to return, but there's obstacle_b in very close proximity which hasn't been avoided?

Explanation: If there was obstacle_b in very close proximity, the vehicle would abort its return and continue surveying the area while avoiding the obstacle.

State permutation:
deploy = 'True'
return = 'False'
obstacle_name = 'obstacle_b'
obstacle_proximity = 'very close'
obstacle_resolved = 'False'

User query: What if the vehicle is idle and there's obstacle_c in nearby proximity which hasn't been avoided?

Explanation: If there was obstacle_c in nearby proximity, the vehicle would remain idle and not activate any behavior until the obstacle is resolved.

State permutation:
deploy = 'False'
return = 'False'
obstacle_name = 'obstacle_c'
obstacle_proximity = 'nearby'
obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User Query: What if there’s obstacle_b in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.

State Permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

User Query: What if the vehicle has reached all the points and obstacle_c in nearby proximity hasn't been avoided?

Explanation: If the vehicle has reached all the points and obstacle_c is in nearby proximity and hasn't been avoided, then the vehicle would still proceed with returning to its starting point, but it would avoid obstacle_c during its return journey.

State Permutation: next_point = 'None', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

User Query: What if return is true and obstacle_d in close proximity hasn't been avoided?

Explanation: If return is true and obstacle_d is in close proximity and hasn't been avoided, then the vehicle would change its behavior from returning to its starting point to surveying the area while avoiding obstacle_d.

State Permutation: return = 'True', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there's obstacle_a in close proximity which hasn't been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'surveying', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

-------------------------------------------------------------------------------------------------------------------------------------------

User query: What if the vehicle is currently returning to its starting point?

Explanation: If the vehicle is currently returning to its starting point, then it should not be surveying an area or avoiding any obstacles.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'starting_position', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

-------------------------------------------------------------------------------------------------------------------------------------------

User query: What if the vehicle is currently surveying an area?

Explanation: If the vehicle is currently surveying an area, it should not be returning to its starting point or avoiding any obstacles.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'surveying', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is instructed to return while obstacle_c is in very close proximity and hasn't been avoided?
Explanation: If the vehicle is instructed to return and there is obstacle_c in very close proximity, then the vehicle would change its behavior and prioritize avoiding the obstacle while returning to its starting point.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

3. What if the vehicle is in idle state and obstacle_d is in close proximity which hasn't been avoided?
Explanation: If the vehicle is in idle state and there is obstacle_d in close proximity, then the vehicle would remain idle and not move until the obstacle is resolved or cleared.
State_permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point0,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point0', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1:
What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation:
If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State Permutation:
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': 'obstacle_a',
  'obstacle_proximity': 'close',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point3',
  'speed': 'very fast',
  'heading': 'northwest',
  'next_point_direction': 'northwest',
  'obstacle_direction': 'northwest',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}

Query 2:
What if deploy is false and return is true?

Explanation:
If deploy is false and return is true, then the vehicle would be idle and not surveying any area or returning to its starting point.

State Permutation:
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'False',
  'return': 'True',
  'obstacle_name': 'none',
  'obstacle_proximity': 'none',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'idle',
  'next_point': 'none',
  'speed': 'none',
  'heading': 'none',
  'next_point_direction': 'none',
  'obstacle_direction': 'none',
  'name': 'alpha',
  'active_behaviour': 'none'
}

Query 3:
What if the vehicle has already resolved an obstacle before reaching point 3?

Explanation:
If the vehicle has already resolved an obstacle before reaching point 3, then it would continue its survey towards the next point without considering the obstacle.

State Permutation:
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': 'none',
  'obstacle_proximity': 'none',
  'obstacle_resolved': 'True',
  'behaviour_stage': 'in-transit',
  'next_point': 'point3',
  'speed': 'very fast',
  'heading': 'northwest',
  'next_point_direction': 'northwest',
  'obstacle_direction': 'northwest',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is in the advanced stage of its behavior and there is an obstacle_b in nearby proximity that has not been resolved?
Explanation: If there was obstacle_b in nearby proximity, the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is in the advanced stage of its behavior, there is an obstacle_c in close proximity that has not been resolved, and the vehicle is heading northwest?
Explanation: If there was obstacle_c in close proximity and the vehicle was heading northwest, the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'close', obstacle_resolved = 'False', heading = 'northwest'

3. What if the vehicle is in the advanced stage of its behavior, there is an obstacle_d in very close proximity that has not been resolved, and the vehicle is heading southeast?
Explanation: If there was obstacle_d in very close proximity and the vehicle was heading southeast, the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False', heading = 'southeast'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle has completed the survey and is now returning with obstacle_c in very close proximity which hasn't been avoided?
Explanation: If the vehicle has completed the survey and is now returning with obstacle_c in very close proximity, then the vehicle would alter its return path to avoid the obstacle while returning to its starting position.
State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is idle with no activated behavior and obstacle_d in close proximity which hasn't been avoided?
Explanation: If the vehicle is idle with no activated behavior and obstacle_d in close proximity, then the vehicle would not be affected by the obstacle because it is not in a deploy or return state.
State_permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) User query: What if the vehicle is instructed to return while an obstacle named obstacle_b is in very close proximity and it hasn't been avoided yet?
Explanation: If the vehicle is instructed to return while obstacle_b is in very close proximity and it hasn't been avoided yet, then the vehicle would prioritize avoiding the obstacle and adjust its course accordingly to avoid a collision while returning to its starting point.
State permutation: 
- obstacle_name = 'obstacle_b'
- obstacle_proximity = 'very close'
- obstacle_resolved = 'False'

2) User query: What if the vehicle is instructed to deploy and return, but the obstacle proximity is ""far""?
Explanation: If the vehicle is instructed to deploy and return, but the obstacle proximity is ""far"", then the vehicle would survey the area and return to its starting point without any concern for the obstacle since it is far away and poses no immediate threat.
State permutation: 
- obstacle_proximity = 'far'

3) User query: What if the vehicle is instructed to deploy, there is an obstacle named obstacle_c in close proximity which has been resolved, and the vehicle is currently moving towards point 2?
Explanation: If the vehicle is instructed to deploy, there is an obstacle named obstacle_c in close proximity which has been resolved, and the vehicle is currently moving towards point 2, then the vehicle would continue its survey and move towards point 2 without taking any action regarding the resolved obstacle since it is no longer a threat.
State permutation: 
- obstacle_name = 'obstacle_c'
- obstacle_proximity = 'close'
- obstacle_resolved = 'True'
- next_point = 'point2'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southwest,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would stop surveying the area and start returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the vehicle's objective changes to 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position'?
Explanation: If the vehicle's objective changes, then the vehicle would continue surveying the area until it reaches point 5 and then return to its starting position.
State_permutation: objective = 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position'

3. What if the vehicle's speed decreases to 'slow'?
Explanation: If the vehicle's speed decreases to 'slow', then the vehicle's behavior stage and speed would change accordingly, affecting its overall movement and surveying capabilities.
State_permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,none,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if the obstacle_c is resolved and the vehicle is in close proximity to the obstacle?

Explanation: If obstacle_c is resolved and the vehicle is in close proximity to the obstacle, then the vehicle would continue moving towards point 1 during its survey while disregarding the obstacle.

State permutation: obstacle_resolved = 'True', 'obstacle_proximity': 'close'

User query: What if the vehicle is in the return stage and the obstacle_proximity is very close?

Explanation: If the vehicle is in the return stage and the obstacle_proximity is very close, then the vehicle would still continue returning to its starting point, even if there is a nearby obstacle.

State permutation: behaviour_stage = 'return', 'obstacle_proximity': 'very close'

User query: What if the active_behaviour is no_behaviour and the obstacle_direction is southeast?

Explanation: If the active_behaviour is no_behaviour and the obstacle_direction is southeast, then the vehicle would remain idle with no activated behavior, regardless of the obstacle's direction.

State permutation: active_behaviour = 'no_behaviour', obstacle_direction = 'southeast'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if the vehicle is not deployed?

Explanation: If the vehicle is not deployed, then it would be idle with no activated behavior.

State permutation:
deploy = 'False'

User query: What if the vehicle is returning to its starting point?

Explanation: If the vehicle is returning to its starting point, it must have already completed its survey and obstacle avoidance.

State permutation:
return = 'True'

User query: What if there’s obstacle_c in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_c in very close proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_c'
obstacle_proximity = 'very close'
obstacle_resolved = 'False'

User query: What if the next point is point4 instead of point1?

Explanation: If the next point is point4 instead of point1, then the vehicle would adjust its behavior and continue towards point4 during its survey.

State permutation:
next_point = 'point4'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

User query: What if the vehicle has already resolved obstacle_b?

Explanation: If the vehicle has already resolved obstacle_b, then the vehicle would continue its survey without any obstacle avoidance actions.

State permutation: 
- obstacle_name = 'obstacle_b'
- obstacle_proximity = 'nearby'
- obstacle_resolved = 'True'

User query: What if the vehicle is in the process of returning and encounters obstacle_c in very close proximity?

Explanation: If the vehicle is in the process of returning and encounters obstacle_c in very close proximity, then the vehicle would change its behavior from returning to surveying while avoiding the obstacle.

State permutation: 
- obstacle_name = 'obstacle_c'
- obstacle_proximity = 'very close'
- obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the deploy value is set to False?
Explanation: If the deploy value is set to False, then the vehicle would not be surveying an area and would be idle with no activated behavior.
State_permutation: deploy = False

2. What if the return value is set to True?
Explanation: If the return value is set to True, then the vehicle would be returning to its starting point instead of continuing its survey.
State_permutation: return = True

3. What if the obstacle_proximity value is set to 'very close'?
Explanation: If the obstacle_proximity value is set to 'very close', then the vehicle would be surveying the area while avoiding the obstacle at a very close range.
State_permutation: obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"Query 1: What if the obstacle_c is resolved?
Explanation: If the obstacle_c is resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State_permutation: obstacle_resolved = True

Query 2: What if the vehicle is at point 4?
Explanation: If the vehicle is at point 4, then the vehicle would have completed its survey and would start returning to its starting position.
State_permutation: next_point = 'point4', active_behaviour = 'return_to_starting_position'

Query 3: What if the vehicle's speed is set to slow?
Explanation: If the vehicle's speed is set to slow, then the vehicle's surveying and returning behaviors would be performed at a slower speed.
State_permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"What if the vehicle is currently returning to its starting point and there is still an obstacle in very close proximity that hasn't been resolved?
Explanation: If there was an obstacle in very close proximity that hadn't been resolved, the vehicle would continue returning to its starting point while actively avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

What if the vehicle is currently surveying an area and there is an obstacle_b in nearby proximity that hasn't been resolved?
Explanation: If there was an obstacle_b in nearby proximity that hadn't been resolved, the vehicle would continue surveying the area while actively avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

What if the vehicle is currently idle with no activated behavior and there is an obstacle in close proximity that hasn't been resolved?
Explanation: If there was an obstacle in close proximity that hadn't been resolved, the vehicle would remain idle and not perform any behavior until the obstacle is resolved.
State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the deploy value is false and the return value is true? 

Explanation: If the deploy value is false and the return value is true, then the vehicle would be returning to its starting position without surveying the area. 

State Permutation: 
deploy: False
return: True

2. What if the obstacle proximity has the value ""far"" instead of ""close"" or ""very close""? 

Explanation: If the obstacle proximity has the value ""far"", then the vehicle would continue surveying the area without avoiding the obstacle. 

State Permutation: 
obstacle_proximity: ""far""

3. What if the active behavior is ""obs_avoid_obstacle_b"" instead of ""waypt_survey,avoid_obstacle_avoid_obstacle_c""? 

Explanation: If the active behavior is ""obs_avoid_obstacle_b"", then the vehicle would be surveying the area while avoiding obstacle_b instead of obstacle_c. 

State Permutation: 
active_behaviour: ""obs_avoid_obstacle_b""",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1) What if the obstacle is named obstacle_a and its proximity is ""nearby"" instead of ""close""?
Explanation: If the obstacle named obstacle_a had a proximity of ""nearby"", then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2) What if the obstacle is resolved and its name is none?
Explanation: If the obstacle was resolved and had no name, then the vehicle would continue moving towards point 3 during its survey with no obstacle to avoid.
State permutation: obstacle_name = none, obstacle_resolved = 'True'

3) What if the obstacle is resolved and its proximity is not ""nearby"", ""close"", or ""very close""?
Explanation: If the obstacle was resolved and had a proximity other than ""nearby"", ""close"", or ""very close"", then the vehicle would continue moving towards point 3 during its survey with no obstacle to avoid.
State permutation: obstacle_proximity = 'far', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"User query 1: What if the obstacle_a in close proximity is resolved while the vehicle is returning to its starting point?

Explanation: If the obstacle_a in close proximity is resolved while the vehicle is returning to its starting point, then the vehicle would continue returning to its starting point without surveying the area while avoiding the obstacle.

State permutation: obstacle_resolved = True

User query 2: What if the vehicle is not deployed?

Explanation: If the vehicle is not deployed, then the vehicle would remain idle with no activated behavior, regardless of other conditions.

State permutation: deploy = False

User query 3: What if the vehicle is deployed and the obstacle_a in nearby proximity is resolved?

Explanation: If the vehicle is deployed and the obstacle_a in nearby proximity is resolved, then the vehicle would continue surveying the area without avoiding the obstacle.

State permutation: deploy = True, obstacle_resolved = True

Representation 2:

User query 1: What if the vehicle's speed is set to 'slow'?

Explanation: If the vehicle's speed is set to 'slow', then the vehicle would move at a slower speed while surveying the area and avoiding the obstacles.

State permutation: speed = 'slow'

User query 2: What if the obstacle_e in nearby proximity is resolved?

Explanation: If the obstacle_e in nearby proximity is resolved, then the vehicle would continue surveying the area while avoiding any other obstacles that are present.

State permutation: obstacle_resolved = True

User query 3: What if the vehicle's next_point is set to 'point2'?

Explanation: If the vehicle's next_point is set to 'point2', then the vehicle would change its direction and move towards 'point2' during its survey.

State permutation: next_point = 'point2'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: What if the vehicle is currently returning to its starting point and there is an obstacle_b in nearby proximity which hasn't been avoided?

Explanation: If there was an obstacle_b in nearby proximity, while the vehicle is returning to its starting point, then the vehicle would change its behavior to avoid_obstacle and adjust its path to avoid the obstacle.

State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

Query 2: What if the vehicle is currently surveying an area, obstacle_x in very close proximity is resolved, and there is no other obstacle nearby?

Explanation: If there was no obstacle nearby while the vehicle is currently surveying an area, and obstacle_x in very close proximity is resolved, then the vehicle would continue its surveying behavior without any changes and complete its assigned objective.

State permutation: obstacle_name = 'obstacle_x', obstacle_proximity = 'very close', obstacle_resolved = 'True'

Query 3: What if the vehicle is currently idle and there is an obstacle_y in close proximity which hasn't been resolved yet?

Explanation: If there was an obstacle_y in close proximity, while the vehicle is idle, and the obstacle hasn't been resolved, then the vehicle would remain idle and not engage in any behavior until the obstacle is resolved.

State permutation: obstacle_name = 'obstacle_y', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if the vehicle is currently returning to its starting point?

Explanation: If the vehicle is currently returning to its starting point, then the vehicle's behavior would change to ""returning to starting point"" instead of ""surveying an area.""

State_permutation: return = 'True'

User query: What if the vehicle is idle with no activated behavior?

Explanation: If the vehicle is idle with no activated behavior, then the vehicle's behavior stage would be ""idle with no activated behavior"" instead of ""in-transit.""

State_permutation: behavior_stage = 'idle with no activated behavior'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the vehicle is returning to its starting point and there is an obstacle_b in nearby proximity that hasn't been resolved? 

Explanation: If there was obstacle_b in nearby proximity and the vehicle is returning to its starting point, then the vehicle would change its behavior and start avoiding the obstacle while returning to its starting point.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the vehicle is surveying the area while avoiding an obstacle and there is no obstacle in close proximity?

Explanation: If there is no obstacle in close proximity and the vehicle is surveying the area while avoiding an obstacle, then the vehicle would continue surveying the area and avoid the obstacle if it comes into nearby or very close proximity.

State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’

3. What if the vehicle is in transit and there is an obstacle_d in very close proximity that hasn't been resolved?

Explanation: If there is obstacle_d in very close proximity and the vehicle is in transit, then the vehicle would change its behavior and start avoiding the obstacle while continuing its transit.

State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"User query: What if there’s obstacle_b in nearby proximity which has been resolved?
Explanation: If there was obstacle_b in nearby proximity that had been resolved, then the vehicle would continue moving towards point 1 during its survey, as the obstacle has already been avoided.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'

User query: What if there’s no obstacle present?
Explanation: If there were no obstacles present, then the vehicle would continue moving towards point 3 during its survey without needing to avoid any obstacles.
State permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'False'

User query: What if the vehicle has finished surveying and is ready to return?
Explanation: If the vehicle has finished surveying and is ready to return, then the vehicle would be in the process of returning to its starting position, regardless of any obstacles present.
State permutation: active_behaviour = 'return_to_start', deploy = 'True', return = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"User query: What if there’s obstacle_b in very close proximity which hasn’t been avoided? 

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = ‘False’

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying any area.

State permutation: deploy = False, return = True

User query: What if there’s no obstacle and the vehicle has completed its survey?

Explanation: If there's no obstacle and the vehicle has completed its survey, then the vehicle would start returning to its starting position.

State permutation: obstacle_name = 'None', obstacle_proximity = 'none', active_behaviour = 'return_to_start'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the vehicle is already on its way back to the starting position and there's obstacle_a in close proximity which hasn't been avoided?

Explanation: If there was obstacle_a in close proximity while the vehicle is returning to its starting position, then the vehicle would continue to avoid the obstacle and adjust its course to avoid a collision while returning to its starting position.

State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = ‘False’

2. What if the vehicle is surveying the area and there's obstacle_b in very close proximity which hasn't been avoided?

Explanation: If there was obstacle_b in very close proximity while the vehicle is surveying the area, then the vehicle would continue to avoid the obstacle and adjust its course to avoid a collision while surveying the area.

State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = ‘False’

3. What if the vehicle is surveying the area and there's obstacle_c in nearby proximity which hasn't been avoided?

Explanation: If there was obstacle_c in nearby proximity while the vehicle is surveying the area, then the vehicle would continue to avoid the obstacle and adjust its course to avoid a collision while surveying the area.

State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"First Query:
What if the vehicle resolves obstacle_a which is in close proximity during its survey?
Explanation: If the vehicle resolves obstacle_a, it would continue moving towards point 3 during its survey without avoiding the obstacle.
State permutation: obstacle_resolved = 'True'

Second Query:
What if the vehicle has a different active behaviour instead of surveying an area?
Explanation: If the vehicle has a different active behaviour, it would perform a different task instead of surveying the area.
State permutation: active_behaviour = 'different_behaviour'

Third Query:
What if the vehicle is returning to its starting point and obstacle_e in close proximity hasn't been resolved?
Explanation: If the vehicle is returning to its starting point and obstacle_e hasn't been resolved, it would continue returning while avoiding the obstacle.
State permutation: return = 'True', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"What if the vehicle is deployed and obstacle_e is in very close proximity but has not been avoided? Explanation: If obstacle_e is in very close proximity and has not been avoided, the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle. State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'very close', obstacle_resolved = 'False'

What if the vehicle is deployed and obstacle_f is in nearby proximity but has not been resolved? Explanation: If obstacle_f is in nearby proximity and has not been resolved, the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle. State permutation: obstacle_name = 'obstacle_f', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

What if the vehicle is deployed and obstacle_g is in close proximity but has been resolved? Explanation: If obstacle_g is in close proximity and has been resolved, the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle. State permutation: obstacle_name = 'obstacle_g', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: What if the deploy state is false and the return state is true?
Explanation: If the deploy state is false and the return state is true, then the vehicle would be returning to its starting point without surveying any area.
State permutation: deploy = False, return = True

Query 2: What if there’s obstacle_b in nearby proximity which has been resolved?
Explanation: If there was obstacle_b in nearby proximity that has been resolved, then the vehicle would continue surveying the area without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = True

Query 3: What if the vehicle is not at the waypoint yet?
Explanation: If the vehicle is not at the waypoint yet, then it would still be in transit towards the next point without any activated behavior.
State permutation: behaviour_stage = 'in-transit'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southwest,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then it would be idle with no activated behavior.

State permutation:
deploy = 'False'

User query: What if the vehicle is returning to its starting point?
Explanation: If the vehicle is returning to its starting point, then it would not be surveying the area.

State permutation:
return = 'True'

Representation:
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': none,
 'obstacle_proximity': 'none',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}

--------------------------------------------------------------------
Representation: 
{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'obstacle_e',
 'obstacle_proximity': 'very close',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point1',
 'speed': 'very fast',
 'heading': 'southwest',
 'next_point_direction': 'southwest',
 'obstacle_direction': 'southwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}

User query: What if the obstacle_e is resolved?
Explanation: If the obstacle_e is resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.

State permutation:
obstacle_resolved = 'True'

User query: What if the vehicle is returning to its starting position?
Explanation: If the vehicle is returning to its starting position, then it would not be surveying the area.

State permutation:
return = 'True'

User query: What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then it would be idle with no activated behavior.

State permutation:
deploy = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southwest,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the vehicle is not deployed and not returning, with obstacle_b in very close proximity that hasn't been resolved?
Explanation: If obstacle_b were in very close proximity and not resolved, the vehicle would remain idle with no activated behavior.
State_permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle is deployed and not returning, with obstacle_c in nearby proximity that hasn't been resolved?
Explanation: If obstacle_c were in nearby proximity and not resolved, the vehicle would continue surveying the area while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is deployed and returning, with obstacle_d in close proximity that hasn't been resolved?
Explanation: If obstacle_d were in close proximity and not resolved, the vehicle would adjust its path to return to the starting point while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1) What if there’s obstacle_b in nearby proximity which has been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle_b.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’

2) What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point, regardless of any obstacles or proximity.
State_permutation: deploy = 'False', return = 'True'

3) What if there’s no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue with its survey without any hindrance or avoidance behavior.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,far,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: What if the vehicle has resolved obstacle_a in close proximity?
Explanation: If the vehicle has resolved obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'True'

Query 2: What if the vehicle is not deployed and is returning to its starting point?
Explanation: If the vehicle is not deployed and is returning to its starting point, then the vehicle would be idle with no activated behavior.
State permutation: deploy = 'False', return = 'True', active_behavior = 'none'

Query 3: What if the vehicle is deployed and there is no obstacle in nearby proximity?
Explanation: If the vehicle is deployed and there is no obstacle in nearby proximity, then the vehicle would continue surveying the area without avoiding any obstacles.
State permutation: obstacle_proximity = 'none'

Query 4: What if the vehicle has resolved obstacle_e in close proximity?
Explanation: If the vehicle has resolved obstacle_e in close proximity, then the vehicle would continue moving towards point 1 during its survey, avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'far', obstacle_resolved = 'True'

Query 5: What if the vehicle is not deployed and is not returning to its starting point?
Explanation: If the vehicle is not deployed and is not returning to its starting point, then the vehicle would be idle with no activated behavior.
State permutation: deploy = 'False', return = 'False', active_behavior = 'none'

Query 6: What if the vehicle is deployed and there is an obstacle in very close proximity?
Explanation: If the vehicle is deployed and there is an obstacle in very close proximity, then the vehicle would be returning to its starting point while avoiding the obstacle.
State permutation: obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the vehicle is not in survey mode?
Explanation: If the vehicle is not in survey mode, then it would not be surveying the area and its behavior would change accordingly.
State_permutation: active_behaviour = 'none'

2. What if the vehicle is in return mode and there is an obstacle nearby that has not been resolved?
Explanation: If the vehicle is in return mode and there is an obstacle nearby that has not been resolved, then the vehicle would change its behavior to avoid the obstacle while returning to its starting point.
State_permutation: return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then it would not be performing any actions and its behavior would change accordingly.
State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1.

User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

2.

User query: What if the vehicle is already at its starting position?

Explanation: If the vehicle is already at its starting position, then the vehicle would not need to return and would instead remain idle with no activated behaviour.

State_permutation: return = 'True'

3.

User query: What if the vehicle is not deployed?

Explanation: If the vehicle is not deployed, then the vehicle would be idle with no activated behaviour.

State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,far,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle is already at point 4 and there is obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If the vehicle is already at point 4 and there is obstacle_b in nearby proximity, then the vehicle would not change its behavior and continue surveying the area while avoiding the obstacle, since the return flag is still false.
State Permutation: 'next_point' = 'point4', 'obstacle_name' = 'obstacle_b', 'obstacle_proximity' = 'nearby', 'obstacle_resolved' = 'False'

Query 2: What if the vehicle has already returned to its starting position and there is obstacle_c in very close proximity which hasn't been avoided?
Explanation: If the vehicle has already returned to its starting position and there is obstacle_c in very close proximity, then it would not change its behavior as it is already in an idle state with no activated behavior.
State Permutation: 'return' = 'True', 'obstacle_name' = 'obstacle_c', 'obstacle_proximity' = 'very close', 'obstacle_resolved' = 'False'

Query 3: What if the vehicle is on its way to point 2 and there is obstacle_d in close proximity which hasn't been avoided?
Explanation: If the vehicle is on its way to point 2 and there is obstacle_d in close proximity, then it would change its behavior and start surveying the area while avoiding the obstacle, since the deploy flag is true and return flag is false.
State Permutation: 'next_point' = 'point2', 'obstacle_name' = 'obstacle_d', 'obstacle_proximity' = 'close', 'obstacle_resolved' = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,none,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle_e is resolved and obstacle proximity is 'close'?
Explanation: If the obstacle_e is resolved and the obstacle proximity is 'close', then the vehicle would continue moving towards point 1 during its survey while avoiding the resolved obstacle.
State_permutation: obstacle_resolved = 'True', obstacle_proximity = 'close'

2. What if the deploy is false and the return is true?
Explanation: If the deploy is false and the return is true, then the vehicle would be returning to its starting point without surveying any area.
State_permutation: deploy = 'False', return = 'True'

3. What if the obstacle proximity is 'very close'?
Explanation: If the obstacle proximity is 'very close', then the vehicle would be surveying the area while avoiding the obstacle at a very close distance.
State_permutation: obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the deploy status is false?
Explanation: If the deploy status is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = False

Query 2: What if the obstacle proximity is very close?
Explanation: If the obstacle proximity is very close, then the vehicle would be surveying the area while avoiding the obstacle.
State permutation: obstacle_proximity = 'very close'

Query 3: What if the active behavior is obstacle_avoidance?
Explanation: If the active behavior is obstacle_avoidance, then the vehicle would be returning to its starting point while avoiding an obstacle.
State permutation: active_behaviour = 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

User query: What if the vehicle is idle with no activated behavior?

Explanation: If the vehicle is idle with no activated behavior, then the deploy and return variables should both be false.

State permutation: 
- deploy = 'False'
- return = 'False'
- active_behaviour = 'None'

User query: What if the vehicle is returning to its starting point while avoiding an obstacle?

Explanation: If the vehicle is returning to its starting point while avoiding an obstacle, the deploy and return variables should both be true, and the obstacle_resolved variable should be false.

State permutation: 
- deploy = 'True'
- return = 'True'
- obstacle_resolved = 'False'

Representation 2:

User query: What if there’s obstacle_e in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_e in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.

State permutation: 
- obstacle_name = 'obstacle_e'
- obstacle_proximity = 'nearby'
- obstacle_resolved = 'False'

User query: What if the vehicle is idle with no activated behavior?

Explanation: If the vehicle is idle with no activated behavior, then the deploy and return variables should both be false.

State permutation: 
- deploy = 'False'
- return = 'False'
- active_behaviour = 'None'

User query: What if the vehicle is returning to its starting point while avoiding an obstacle?

Explanation: If the vehicle is returning to its starting point while avoiding an obstacle, the deploy and return variables should both be true, and the obstacle_resolved variable should be false.

State permutation: 
- deploy = 'True'
- return = 'True'
- obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,none,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if the deploy value is false and the return value is true?
   Explanation: If the deploy value is false and the return value is true, then the vehicle would be returning to its starting position.
   State permutation: 'deploy': 'False', 'return': 'True'

2. User query: What if the obstacle proximity has a value of ""nearby""?
   Explanation: If the obstacle proximity has a value of ""nearby"", then the vehicle would be surveying the area while avoiding the obstacle.
   State permutation: 'obstacle_proximity': 'nearby'

3. User query: What if the active behavior changes to ""obstacle_avoidance""?
   Explanation: If the active behavior changes to ""obstacle_avoidance"", then the vehicle would be actively avoiding obstacles while either surveying the area or returning to its starting position.
   State permutation: 'active_behaviour': 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation 1: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 2: What if the obstacle_e is resolved?

Explanation 2: If the obstacle_e is resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.

State permutation 2: {'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 3: What if the vehicle reaches its starting position and deploy is still true?

Explanation 3: If the vehicle reaches its starting position and deploy is still true, then the vehicle would stay idle with no activated behavior.

State permutation 3: {'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'starting_position', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,none,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1:
What if there’s obstacle_a in very close proximity which hasn’t been avoided?

Explanation:
If there was obstacle_a in very close proximity, then the vehicle would immediately stop surveying and start avoiding the obstacle before continuing its survey. 

State permutation:
obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

Query 2:
What if deploy is false and return is true?

Explanation:
If deploy is false and return is true, then the vehicle is currently returning to its starting position, regardless of any obstacles or surveying objectives.

State permutation:
deploy = 'False', return = 'True'

Query 3:
What if there’s no obstacle, the vehicle is idle, and deploy is true?

Explanation:
If there's no obstacle, the vehicle is idle, and deploy is true, then the vehicle would start surveying the area without any obstacle avoidance behavior.

State permutation:
obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True', deploy = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_a in medium distance proximity which has been resolved?
Explanation: If there was obstacle_a in medium distance proximity and it has been resolved, then the vehicle would continue moving towards point 1 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'medium distance', obstacle_resolved = 'True'

2. User query: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position regardless of any obstacles or surveying areas.
State permutation: deploy = 'False', return = 'True'

3. User query: What if the objective is to go to points 0, 1, 2, 3, 4, 5, and then return to starting position?
Explanation: If the objective is to go to points 0, 1, 2, 3, 4, 5 and then return to starting position, then the vehicle would have an extended route and would need to survey more areas before returning.
State permutation: objective = 'Go to points 0, 1, 2, 3, 4, 5, and then return to starting position.'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_e,very far,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the obstacle is obstacle_a and it is in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would stop surveying and start returning to its starting position while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2) What if the obstacle is obstacle_b and it is in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3) What if there is no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue moving towards point 3 during its survey without any obstacle avoidance behavior.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,True,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the vehicle is currently in the return stage instead of the in-transit stage?
Explanation: If the vehicle is in the return stage instead of the in-transit stage, then the vehicle would be returning to its starting point instead of surveying the area.
State_permutation: behaviour_stage = 'return'

3. What if the vehicle's speed is set to medium instead of very fast?
Explanation: If the vehicle's speed is set to medium instead of very fast, then the vehicle would be surveying the area at a slower pace.
State_permutation: speed = 'medium'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: {'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False'}


User query: What if the vehicle is returning to its starting point and there is an obstacle_b nearby that has been resolved?

Explanation: If the vehicle is returning to its starting point and there is an obstacle_b nearby that has been resolved, then the vehicle would continue returning to its starting point without avoiding the obstacle.

State permutation: {'return': 'True', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'True'}


User query: What if the vehicle is idle with no activated behavior?

Explanation: If the vehicle is idle with no activated behavior, then the vehicle would not be deploying or returning and would remain idle.

State permutation: {'deploy': 'False', 'return': 'False', 'active_behaviour': 'none'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop its survey and return to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

Query 2: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point.
State permutation: deploy = 'False', return = 'True'

Query 3: What if the vehicle is not surveying any area and there is an obstacle in nearby proximity?
Explanation: If the vehicle is not surveying any area and there is an obstacle in nearby proximity, then the vehicle would stop and stay idle while avoiding the obstacle.
State permutation: active_behaviour = 'none', obstacle_proximity = 'nearby'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point2,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_x in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_x in nearby proximity, then the vehicle would continue moving towards its next point (point2) during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_x', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is in the idle state with no activated behavior?
Explanation: If the vehicle is in the idle state with no activated behavior, then it means the deploy variable is false, and the return variable is also false.
State permutation: deploy = 'False', return = 'False'

3. What if the vehicle has completed its survey and is returning to its starting point?
Explanation: If the vehicle has completed its survey and is returning to its starting point, then the deploy variable would be true, while the return variable would also be true.
State permutation: deploy = 'True', return = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be idle and returning to its starting point.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

User query: What if obstacle_a has been resolved?

Explanation: If obstacle_a has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.

State_permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = ‘False’

User query: What if the vehicle is not in transit?
Explanation: If the vehicle is not in transit, then it means that the vehicle has completed its survey and is currently idle with no activated behavior.
State_permutation: behaviour_stage = 'idle', active_behaviour = 'none'

User query: What if the vehicle is returning and there’s obstacle_b nearby which has been resolved?
Explanation: If the vehicle is returning and there's obstacle_b nearby which has been resolved, then the vehicle would continue returning to its starting position while no longer avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = ‘True’

Representation: 
{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'none',
 'obstacle_proximity': 'none',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point2',
 'speed': 'very fast',
 'heading': 'southeast',
 'next_point_direction': 'southeast',
 'obstacle_direction': 'none',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}

User query: What if the vehicle is returning to its starting position at a slow speed?
Explanation: If the vehicle is returning to its starting position at a slow speed, then it means the vehicle would be moving at a slower pace while heading towards its starting position during its return.
State_permutation: speed = 'slow'

User query: What if the vehicle is not deployed and is not returning?
Explanation: If the vehicle is not deployed and is not returning, then it means that the vehicle is currently idle with no activated behavior.
State_permutation: deploy = 'False', return = 'False'

User query: What if there’s an obstacle_c in very close proximity which hasn't been resolved?
Explanation: If there was obstacle_c in very close proximity and it hasn't been resolved, then the vehicle would be surveying the area while avoiding the obstacle_c.
State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if there’s an obstacle_b in nearby proximity which hasn’t been avoided?

Explanation: If there was an obstacle_b in nearby proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

What if there’s obstacle_c in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_c in very close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

What if there’s obstacle_d in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_d in close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in close proximity which has been resolved? 
Explanation: If there was obstacle_a in close proximity that has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle. 
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

2. What if there’s no obstacle present and the vehicle has reached point 3?
Explanation: If there's no obstacle and the vehicle has reached point 3, then the vehicle would proceed to the next point (point 4) during its survey.
State permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘True’, next_point = 'point4'

3. What if the vehicle is in the return stage and there's an obstacle_b in very close proximity?
Explanation: If the vehicle is in the return stage and there's an obstacle_b in very close proximity, then the vehicle would change its behavior and avoid the obstacle while returning to its starting point.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, behaviour_stage = 'return', active_behaviour = 'return_avoid_obstacle'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting position.
State permutation: deploy = 'False', return = 'True'

3. What if obstacle_c in very close proximity has been resolved?
Explanation: If obstacle_c in very close proximity has been resolved, then the vehicle would continue its surveying behavior without changing its course.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,True,in-transit,point2,very fast,northeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State permutation: deploy = 'False', return = 'True'

3. What if the vehicle is idle with no activated behavior?
Explanation: If the vehicle is idle with no activated behavior, then deploy and return would both be false, indicating that the vehicle is not actively performing any tasks.
State permutation: deploy = 'False', return = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,east,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'east', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in close proximity which has been resolved? 

Explanation: If there was obstacle_a in close proximity that has been resolved, then the vehicle would continue moving towards point 2 during its survey without avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

2. What if the vehicle needs to return to its starting position while avoiding obstacle_b in very close proximity?

Explanation: If the vehicle needs to return to its starting position while avoiding obstacle_b in very close proximity, then the vehicle would adjust its path to avoid the obstacle and return to the starting position.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, return = 'True'

3. What if the vehicle is idle with no activated behavior and needs to avoid obstacle_c nearby?

Explanation: If the vehicle is idle with no activated behavior and needs to avoid obstacle_c nearby, then the vehicle would avoid the obstacle and remain idle without any specific behavior.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’, deploy = 'False', return = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,northeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would change its behavior and not continue moving towards point 2 during its survey. Instead, it would prioritize avoiding the obstacle and change its direction or behavior accordingly.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2) User query: What if the vehicle is already at point 3 and obstacle_a is in nearby proximity?

Explanation: If the vehicle is already at point 3 and obstacle_a is in nearby proximity, then the vehicle would consider the obstacle while surveying the area and avoiding it. It would not immediately return to the starting point, as it still needs to complete its survey of the area.

State permutation: next_point = 'point3', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby'

3) User query: What if the vehicle is not deployed and there’s no obstacle present?

Explanation: If the vehicle is not deployed and there's no obstacle present, then the vehicle would remain idle with no activated behavior. It would not perform any surveying or return to its starting point as it is not deployed in this scenario.

State permutation: deploy = 'False', return = 'False', obstacle_name = 'none', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point2,max speed,east,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'east', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if the vehicle is returning and there’s obstacle_b in very close proximity which hasn’t been avoided?

Explanation: If the vehicle is returning and there's obstacle_b in very close proximity that hasn't been avoided, then the vehicle would change its behavior and actively avoid the obstacle while continuing to return to its starting position.

State permutation: 'return' = True, 'obstacle_name' = 'obstacle_b', 'obstacle_proximity' = 'very close', 'obstacle_resolved' = False

User query: What if the vehicle is idle and there’s obstacle_c in nearby proximity which hasn't been avoided?

Explanation: If the vehicle is idle and there's obstacle_c in nearby proximity that hasn't been avoided, then the vehicle would still remain idle with no activated behavior, as it is not in a survey or return mode. The presence of an obstacle in this case does not affect the vehicle's behavior.

State permutation: 'deploy' = False, 'return' = False, 'obstacle_name' = 'obstacle_c', 'obstacle_proximity' = 'nearby', 'obstacle_resolved' = False

User query: What if the vehicle is returning, obstacle_d is resolved, and there’s obstacle_e in close proximity which hasn't been avoided?

Explanation: If the vehicle is returning, obstacle_d is resolved, and there's obstacle_e in close proximity that hasn't been avoided, the vehicle would still continue returning to its starting position while actively avoiding obstacle_e. The resolution of obstacle_d does not affect the vehicle's behavior in this scenario.

State permutation: 'return' = True, 'obstacle_name' = 'obstacle_e', 'obstacle_proximity' = 'close', 'obstacle_resolved' = False",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point3,max speed,east,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'east', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while actively trying to avoid the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if the vehicle has completed its survey and obstacle_a is in very close proximity?

Explanation: If the vehicle has completed its survey and obstacle_a is in very close proximity, then the vehicle would be in the process of returning to its starting position, but would actively try to avoid the obstacle_a.

State_permutation: active_behaviour = 'returning', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

User query: What if obstacle_b is in nearby proximity before the vehicle starts its survey?

Explanation: If obstacle_b is in nearby proximity before the vehicle starts its survey, then the vehicle will start its survey while actively trying to avoid obstacle_b and continue with its planned survey path.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point3,max speed,east,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'east', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there's obstacle_b in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would stop surveying and begin returning to its starting position while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = 'False', return = 'False'

3. What if the vehicle is already at its starting position and deploy is true?
Explanation: If the vehicle is already at its starting position and deploy is true, then it would start surveying the area.
State permutation: deploy = 'True', next_point = 'starting_position'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point3,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle encounters obstacle_a in close proximity but it has already been resolved?
Explanation: If the vehicle encounters obstacle_a in close proximity but it has already been resolved, the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

Query 2: What if the vehicle is not in survey mode and encounters obstacle_b in nearby proximity?
Explanation: If the vehicle is not in survey mode and encounters obstacle_b in nearby proximity, the vehicle would automatically switch to survey mode while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’, active_behaviour = 'waypt_survey'

Query 3: What if the vehicle is currently returning to its starting point and encounters obstacle_c in very close proximity?
Explanation: If the vehicle is currently returning to its starting point and encounters obstacle_c in very close proximity, the vehicle would change its course to avoid the obstacle and continue returning to its starting point.
State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, active_behaviour = 'return'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point3,max speed,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if there’s an obstacle_b in nearby proximity which hasn’t been avoided?

Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

What if there’s an obstacle_c in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_c in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

What if there’s an obstacle_d in nearby proximity which has already been resolved?

Explanation: If there was obstacle_d in nearby proximity that has already been resolved, then the vehicle would continue moving towards point 3 during its survey without the need to avoid the obstacle.

State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point3,max speed,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop and attempt to avoid the obstacle before continuing with its survey. 
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point from a survey mission.
State_permutation: deploy = False, return = True

3. What if the vehicle is idle with no activated behavior?
Explanation: If the vehicle is idle with no activated behavior, it means that both deploy and return are false, and there are no obstacles present. The vehicle is not currently engaged in any tasks.
State_permutation: deploy = False, return = False, obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False', active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,advanced,point4,max speed,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.
State_permutation: deploy = False, return = True

3. What if the objective is changed to 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.'?
Explanation: If the objective is changed to 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', then the vehicle would have an additional waypoint to reach before returning to the starting point.
State_permutation: objective = 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point4,max speed,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s an obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was an obstacle_b in nearby proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. What if there’s an obstacle_c in very close proximity which hasn’t been avoided?
Explanation: If there was an obstacle_c in very close proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

3. What if there’s an obstacle_d in close proximity which has already been resolved?
Explanation: If there was an obstacle_d in close proximity that has already been resolved, then the vehicle would continue moving towards point 4 during its survey without needing to avoid the obstacle.
State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point4,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query: What if the vehicle is instructed to return to its starting position while avoiding an obstacle?
Explanation: If the vehicle is instructed to return to its starting position while avoiding an obstacle, then it would change its active behavior to ""return_avoid_obstacle"" and adjust its heading and speed accordingly. 
State permutation: active_behaviour = 'return_avoid_obstacle', heading = 'northwest', speed = 'slow'

Query: What if the vehicle is instructed to survey an area but there is an obstacle in very close proximity?
Explanation: If the vehicle is instructed to survey an area but there is an obstacle in very close proximity, then it would change its active behavior to ""surveying_avoid_obstacle"" and adjust its heading and speed accordingly while avoiding the obstacle.
State permutation: active_behaviour = 'surveying_avoid_obstacle', heading = 'northwest', speed = 'slow'

Query: What if the vehicle is not deployed but there is an obstacle in close proximity that hasn't been resolved?
Explanation: If the vehicle is not deployed but there is an obstacle in close proximity that hasn't been resolved, then it would remain idle with no activated behavior until the obstacle is resolved or the vehicle is instructed to deploy.
State permutation: deploy = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,none,none,False,in-transit,point4,very fast,northwest,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be idle and not surveying any area. It would be returning to its starting position instead.
State_permutation: deploy = 'False', return = 'True'

User query: What if the vehicle is not surveying an area and there's an obstacle_b in very close proximity which has been resolved?
Explanation: If the vehicle is not surveying an area and there's an obstacle_b in very close proximity which has been resolved, then the vehicle would be returning to its starting position while not avoiding the obstacle.
State_permutation: active_behaviour = 'None', obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘True’

Representation: {'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if there’s obstacle_c in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_c in nearby proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

User query: What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be idle with no activated behaviour, and it would not be surveying any area or returning to its starting position.
State_permutation: deploy = 'False', return = 'False'

User query: What if the vehicle is not surveying an area and there's an obstacle_d in close proximity which has been resolved?
Explanation: If the vehicle is not surveying an area and there's an obstacle_d in close proximity which has been resolved, then the vehicle would be returning to its starting position while not avoiding the obstacle.
State_permutation: active_behaviour = 'None', obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,none,False,in-transit,point4,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is already surveying an area and obstacle_b comes into close proximity?
Explanation: If obstacle_b comes into close proximity while the vehicle is already surveying an area, then the vehicle would continue its survey while avoiding obstacle_b.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is returning to its starting point and obstacle_c comes into very close proximity?
Explanation: If obstacle_c comes into very close proximity while the vehicle is returning to its starting point, then the vehicle would change its behavior and start avoiding obstacle_c until it can safely return to the starting point.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is idle with no activated behavior and obstacle_d is nearby but has already been resolved?
Explanation: If obstacle_d is nearby but has already been resolved while the vehicle is idle, the vehicle would remain idle as there is no need for it to take any actions.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point4,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is currently on its way to point 4 and there is an obstacle in very close proximity which hasn't been resolved?
Explanation: If there was an obstacle in very close proximity, the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if the vehicle is currently on its way to point 4 and there is no obstacle present?
Explanation: If there is no obstacle present, the vehicle would continue moving towards point 4 during its survey without any obstacle avoidance behavior.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’

3. What if the vehicle has already reached point 4 and is about to return to the starting position, but there is an obstacle in close proximity which hasn't been avoided?
Explanation: If there was an obstacle in close proximity, the vehicle would modify its behavior, prioritize obstacle avoidance, and adjust its path accordingly while returning to the starting position.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point4,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is near obstacle_a and obstacle_a is resolved?
Explanation: If the vehicle is near obstacle_a and obstacle_a is resolved, then the vehicle would continue moving towards point 4 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'True'

2. What if the vehicle is returning to its starting point and encounters obstacle_b in very close proximity which hasn't been avoided?
Explanation: If the vehicle is returning to its starting point and encounters obstacle_b in very close proximity which hasn't been avoided, then the vehicle would change its behavior to avoid the obstacle and continue returning to its starting point.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False', active_behaviour = 'return_avoid_obstacle_b'

3. What if the vehicle is idle with no activated behavior and obstacle_c in nearby proximity is not resolved?
Explanation: If the vehicle is idle with no activated behavior and obstacle_c in nearby proximity is not resolved, then the vehicle would change its behavior to avoid the obstacle while remaining idle.
State_permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False', active_behaviour = 'idle_avoid_obstacle_c'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point4,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1) What if the vehicle's objective is to go to points 0, 1, 2, 3, and 4, and then return to the starting position?
Explanation: If the vehicle's objective is to go to points 0, 1, 2, 3, and 4, and then return to the starting position, the vehicle will continue moving towards point 4 during its survey while avoiding obstacle_a.
State permutation: objective = 'Go to points 0, 1, 2, 3, 4 and then return to starting position.'

2) What if the vehicle's obstacle proximity is very close instead of close?
Explanation: If the vehicle's obstacle proximity is very close instead of close, the vehicle would still continue moving towards point 3 during its survey while avoiding obstacle_a, but the proximity to the obstacle would be even closer.
State permutation: obstacle_proximity = 'very close'

3) What if the vehicle's active behavior is not waypt_survey, but obstacle_avoidance?
Explanation: If the vehicle's active behavior is not waypt_survey, but obstacle_avoidance, then the vehicle would not be surveying the area but instead solely focused on avoiding obstacles, including obstacle_a.
State permutation: active_behaviour = 'obstacle_avoidance'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point4,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"Query 1: What if the vehicle resolves obstacle_a and the obstacle proximity becomes none?
Explanation: If the vehicle resolves obstacle_a and the obstacle proximity becomes none, then the vehicle would continue moving towards point 4 during its survey while avoiding any obstacles.
State permutation: obstacle_name = none, obstacle_proximity = 'none', obstacle_resolved = 'True'

Query 2: What if the vehicle changes its active behaviour from waypt_survey to obstacle_avoidance?
Explanation: If the vehicle changes its active behaviour from waypt_survey to obstacle_avoidance, then the vehicle would focus on avoiding obstacles rather than surveying the area.
State permutation: active_behaviour = 'obstacle_avoidance'

Query 3: What if the vehicle's next point direction changes from northwest to northeast?
Explanation: If the vehicle's next point direction changes from northwest to northeast, then the vehicle would adjust its heading and move towards the new direction while continuing its survey.
State permutation: next_point_direction = 'northeast'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point4,very fast,northwest,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"What if the vehicle is in the process of avoiding obstacle_a, but obstacle_a suddenly disappears?

Explanation: If obstacle_a suddenly disappears while the vehicle is in the process of avoiding it, then the vehicle would continue moving towards point 4 during its survey without avoiding any obstacles.

State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘True’

What if the vehicle is in the process of avoiding obstacle_a, but obstacle_a suddenly moves closer?

Explanation: If obstacle_a suddenly moves closer while the vehicle is in the process of avoiding it, then the vehicle would adjust its course to maintain a safe distance from the obstacle while continuing its survey towards point 4.

State_permutation: obstacle_proximity = 'very close', obstacle_direction = 'northeast'

What if the vehicle is in the process of avoiding obstacle_a, but obstacle_a suddenly moves away?

Explanation: If obstacle_a suddenly moves away while the vehicle is in the process of avoiding it, then the vehicle would adjust its course to continue moving towards point 4 without actively avoiding the obstacle anymore.

State_permutation: obstacle_proximity = 'close', obstacle_direction = 'northeast'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point4,very fast,northeast,northwest,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if obstacle_a is in very close proximity and has been resolved?
Explanation: If obstacle_a is in very close proximity and has been resolved, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle. 
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'True'

2. What if there is no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue moving towards point 4 during its survey without any obstacle avoidance behavior.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

3. What if the vehicle is already in the process of returning to its starting point?
Explanation: If the vehicle is already in the process of returning to its starting point, then the behavior of surveying the area would be interrupted and the vehicle would change its behavior to continue returning to its starting point.
State permutation: return = 'True', active_behaviour = 'return_to_start'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point4,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is currently returning to its starting point and there is an obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity and the vehicle is currently returning to its starting point, then the vehicle would change its behavior to avoid_obstacle_avoid_obstacle_b and continue returning to the starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is currently idle with no activated behavior and there is an obstacle_c in close proximity which hasn't been avoided?
Explanation: If there was obstacle_c in close proximity and the vehicle is currently idle, then the vehicle would change its behavior to survey the area while avoiding_obstacle_avoid_obstacle_c.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', obstacle_proximity = 'close', obstacle_resolved = 'False'

3. What if the vehicle is currently surveying an area and there is an obstacle_d in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_d in very close proximity and the vehicle is currently surveying an area, then the vehicle would continue surveying the area while avoiding_obstacle_avoid_obstacle_d.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point4,very fast,northeast,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 4 during its survey, but it would avoid obstacle_a by adjusting its heading in the southeast direction.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if the vehicle has already returned to its starting point?

Explanation: If the vehicle has already returned to its starting point, then it would be in an idle state with no activated behavior, regardless of any obstacle or its proximity.

State_permutation: return = True

User query: What if the obstacle has been resolved?

Explanation: If the obstacle has been resolved, then the vehicle would continue its current behavior (surveying the area or returning to its starting point), regardless of its proximity to the obstacle.

State_permutation: obstacle_resolved = True",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point4,very fast,northeast,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if the obstacle_a is resolved?
Explanation: If the obstacle_a is resolved, then the vehicle would continue moving towards point 4 during its survey without avoiding the obstacle.
State permutation: obstacle_resolved = 'True'

User query 2: What if the vehicle is instructed to return?
Explanation: If the vehicle is instructed to return, then it would stop surveying the area and start returning to its starting position.
State permutation: return = 'True', active_behaviour = 'return_to_start'

User query 3: What if the vehicle's speed is changed to slow?
Explanation: If the vehicle's speed is changed to slow, then its speed would decrease and it would move at a slower pace during its survey or return.
State permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point4,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

User query: What if there’s obstacle_b in nearby proximity which has been resolved?

Explanation: If there was obstacle_b in nearby proximity which has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’

User query: What if deploy is false?

Explanation: If deploy is false, then the vehicle would be idle with no activated behavior, regardless of any other conditions or representations.

State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point4,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle_a is in very close proximity and hasn't been avoided?
Explanation: If the obstacle_a is in very close proximity, then the vehicle would immediately stop surveying and start returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the obstacle_a is resolved?
Explanation: If the obstacle_a is resolved, then the vehicle would continue surveying the area without taking any specific actions to avoid the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_resolved = 'True'

3. What if the deploy is false and the return is false?
Explanation: If the deploy is false and the return is false, then the vehicle would remain idle with no activated behavior, regardless of the obstacle or its proximity.
State_permutation: deploy = 'False', return = 'False'

For the second representation:

1. What if the obstacle_a is resolved and the obstacle_proximity is 'none'?
Explanation: If the obstacle_a is resolved and there is no obstacle_proximity, then the vehicle would continue surveying the area without any obstacle avoidance measures.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'none', obstacle_resolved = 'True'

2. What if the deploy is true and the return is true?
Explanation: If the deploy is true and the return is true, then the vehicle would be returning to its starting point regardless of the obstacle or its proximity.
State_permutation: deploy = 'True', return = 'True'

3. What if the active_behaviour is 'waypt_survey' but there is no next_point defined?
Explanation: If the active_behaviour is 'waypt_survey' but there is no next_point defined, then the vehicle would be unable to proceed with the survey and may enter an idle state or perform a different behavior.
State_permutation: active_behaviour = 'waypt_survey', next_point = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,nearby,False,completed,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if the obstacle is resolved and the vehicle is in the completed behaviour stage?

Explanation: If the obstacle is resolved and the vehicle is in the completed behaviour stage, then the vehicle would continue returning to its starting position without surveying the area.

State_permutation: obstacle_resolved = 'True', behaviour_stage = 'completed'

User query: What if the vehicle is not deployed and the obstacle proximity is close?

Explanation: If the vehicle is not deployed and the obstacle proximity is close, then the vehicle would remain idle with no activated behavior even if there is an obstacle nearby.

State_permutation: deploy = 'False', obstacle_proximity = 'close'

User query: What if there is no obstacle and the vehicle is returning to its starting position?

Explanation: If there is no obstacle and the vehicle is returning to its starting position, then the vehicle would complete its return without any obstacle avoidance maneuvers.

State_permutation: obstacle_name = 'None', obstacle_proximity = 'none', return = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. User query: What if deploy is false and return is true?
   Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying any area.
   State permutation: deploy = 'False', return = 'True'

2. User query: What if obstacle_resolved is true?
   Explanation: If obstacle_resolved is true, then the obstacle has been successfully avoided and the vehicle can continue its survey or return to its starting position without any hindrance.
   State permutation: obstacle_resolved = 'True'

3. User query: What if speed is 'slow'?
   Explanation: If the speed is 'slow', then the vehicle would move at a slower pace while surveying the area or returning to its starting position.
   State permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. User query: What if there’s obstacle_a in near proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in near proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'near', obstacle_resolved = 'False'

2. User query: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be idle and not perform any behavior.
State permutation: deploy = 'False', return = 'True'

3. User query: What if deploy is false and obstacle proximity is close?
Explanation: If deploy is false and obstacle proximity is close, then the vehicle would be idle and not perform any behavior, regardless of the obstacle.
State permutation: deploy = 'False', obstacle_proximity = 'close'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,medium distance,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"Query 1: What if there’s obstacle_a in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

Query 2: What if there’s obstacle_b in close proximity which has been resolved?
Explanation: If there was obstacle_b in close proximity and it has been resolved, then the vehicle would continue moving towards point3 during its survey without changing its behavior.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'True'

Query 3: What if there’s no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue moving towards point3 during its survey without changing its behavior.
State permutation: obstacle_name = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"What if the obstacle proximity is changed to 'nearby'? 

Explanation: If the obstacle proximity is changed to 'nearby', then the vehicle would still continue returning to its starting position while avoiding the obstacle, but it would be more cautious in its movements. 

State permutation: obstacle_proximity = 'nearby'

What if the obstacle name is changed to 'obstacle_b'?

Explanation: If the obstacle name is changed to 'obstacle_b', then the vehicle would still continue returning to its starting position while avoiding the obstacle, but it would be a different obstacle that needs to be avoided. 

State permutation: obstacle_name = 'obstacle_b'

What if the deploy is changed to false?

Explanation: If the deploy is changed to false, then the vehicle would not be surveying the area or returning to its starting position. It would remain idle with no activated behavior. 

State permutation: deploy = false",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there is obstacle_a in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would change its behavior from surveying the area to avoiding the obstacle and return to its starting point.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting point, regardless of any obstacles or behavior stages.
State_permutation: deploy = 'False', return = 'True'

3. What if obstacle_name is none and obstacle_resolved is true?
Explanation: If obstacle_name is none (indicating no obstacle) and obstacle_resolved is true, then it means there are no obstacles present and any previous obstacle has been successfully resolved.
State_permutation: obstacle_name = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,none,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the obstacle 'obstacle_a' is in close proximity and has not been resolved?
   Explanation: If there was 'obstacle_a' in close proximity and it has not been resolved, then the vehicle would change its behavior from 'waypt_return' to 'waypt_survey' and start surveying the area while avoiding the obstacle.
   State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

2. What if there's no obstacle and the vehicle has already resolved any previous obstacles?
   Explanation: If there is no obstacle and the vehicle has already resolved any previous obstacles, then the vehicle would continue returning to its starting point without any obstacle avoidance.
   State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = True

3. What if the obstacle 'obstacle_b' is in very close proximity and has not been resolved?
   Explanation: If there was 'obstacle_b' in very close proximity and it has not been resolved, then the vehicle would continue moving towards the next point while avoiding the obstacle during its survey.
   State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = False",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,obstacle_a,very far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"Query 1: What if there's obstacle_b in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would change its behavior and start returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

Query 2: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behavior and it would start returning to its starting point.
State permutation: deploy = 'False', return = 'True'

Query 3: What if there's no obstacle and the vehicle is currently surveying an area?
Explanation: If there's no obstacle and the vehicle is currently surveying an area, then the vehicle would continue its survey without avoiding any obstacles.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,none,none,True,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s obstacle_b in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if the vehicle is not deployed and not returning?
Explanation: If the vehicle is not deployed and not returning, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = 'False', return = 'False'

3. What if there’s obstacle_c in nearby proximity which has been resolved?
Explanation: If there was obstacle_c in nearby proximity and it has been resolved, then the vehicle would continue surveying the area while no longer avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity' = 'nearby', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behaviour.
State permutation: deploy = 'False', return = 'True'

3. What if the vehicle is not surveying but deploy is true and return is false?
Explanation: If the vehicle is not surveying, but deploy is true and return is false, then the vehicle would be in-transit to its next point.
State permutation: active_behaviour = 'in-transit', deploy = 'True', return = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,very fast,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"Query 1:
What if deploy is false and return is true?
Explanation:
If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying any area.
State permutation:
deploy = False, return = True

Query 2:
What if obstacle_name is obstacle_b and obstacle_resolved is true?
Explanation:
If obstacle_name is obstacle_b and obstacle_resolved is true, then the obstacle has been successfully avoided and the vehicle can continue surveying or returning without any obstacles in its path.
State permutation:
obstacle_name = 'obstacle_b', obstacle_resolved = True

Query 3:
What if next_point is point4 instead of pointstart?
Explanation:
If next_point is point4 instead of pointstart, then the vehicle would have an additional point to visit before returning to its starting position.
State permutation:
next_point = 'point4'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,max speed,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State_permutation: deploy = False, return = True

What if obstacle_resolved is true?
Explanation: If obstacle_resolved is true, it means that the obstacle has been resolved and no longer poses a hindrance to the vehicle's movement.
State_permutation: obstacle_resolved = True

What if the vehicle's speed is set to slow?
Explanation: If the vehicle's speed is set to slow, it would affect the time taken for the vehicle to reach its destinations and return to the starting position.
State_permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,very fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if 'deploy' is false and 'return' is false, but 'obstacle_resolved' is true? 
Explanation: If the obstacle is resolved, then the vehicle would remain idle with no activated behaviour, even though its deploy and return flags are false. 
State permutation: Obstacle_resolved = True

2. What if 'deploy' is true, 'return' is true, 'obstacle_resolved' is false, and 'obstacle_proximity' is 'none'?
Explanation: If there is no obstacle nearby, the vehicle would return to its starting point without avoiding any obstacles.
State permutation: Obstacle_proximity = 'none', Obstacle_resolved = False

3. What if 'deploy' is true, 'return' is false, and 'active_behaviour' is 'none'?
Explanation: If the vehicle does not have any active behaviour but is deployed, it would be considered idle rather than surveying an area.
State permutation: Active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User Query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State Permutation 1: {'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False'}

User Query 2: What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State Permutation 2: {'deploy': 'False', 'return': 'True'}

User Query 3: What if the objective is to go to points 5, 6, 7 and then return to the starting position?
Explanation: If the objective is to go to points 5, 6, 7 and then return to the starting position, the vehicle would follow a different set of waypoints and behavior.
State Permutation 3: {'objective': 'Go to points 5, 6, 7 and then return to starting position.', 'next_point': 'point7'}",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,moderate,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'moderate', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is true, return is false, obstacle_name is obstacle_a, obstacle_resolved is false and obstacle_proximity is close, but the vehicle is not surveying the area? 

Explanation: If the vehicle is not surveying the area but there is an obstacle_a in close proximity, then the vehicle would need to change its behavior and start surveying the area while avoiding the obstacle.

State_permutation: active_behaviour = 'waypt_survey', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if deploy is true, return is true, obstacle_name is obstacle_b, obstacle_resolved is false and obstacle_proximity is very close, but the vehicle is not returning to its starting point?

Explanation: If the vehicle is not returning to its starting point but there is an obstacle_b in very close proximity, then the vehicle would need to change its behavior and start returning to its starting point while avoiding the obstacle.

State_permutation: active_behaviour = 'waypt_return', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if deploy is true, return is false, obstacle_name is obstacle_c, obstacle_resolved is false and obstacle_proximity is nearby, but the vehicle is not surveying the area while avoiding an obstacle?

Explanation: If the vehicle is not surveying the area while avoiding an obstacle but there is an obstacle_c nearby, then the vehicle would need to change its behavior and start surveying the area while avoiding the obstacle.

State_permutation: active_behaviour = 'waypt_survey_obstacle_avoidance', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,low,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'low', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is true and return is false, but obstacle_resolved is true?
Explanation: If deploy is true, return is false, and obstacle_resolved is true, then the vehicle would continue surveying the area without avoiding the obstacle since it has already been resolved.
State_permutation: deploy = True, return = False, obstacle_resolved = True

2. What if deploy is false and return is false, but obstacle_proximity is very close?
Explanation: If deploy is false, return is false, and obstacle_proximity is very close, then it indicates that there is an obstacle in very close proximity to the vehicle even though it is currently idle. The vehicle should take action to resolve the obstacle before deploying or returning.
State_permutation: deploy = False, return = False, obstacle_proximity = 'very close'

3. What if deploy is true, return is true, obstacle_resolved is false, and obstacle_name is obstacle_b?
Explanation: If deploy is true, return is true, obstacle_resolved is false, and obstacle_name is obstacle_b, then it means that the vehicle is currently returning to its starting point and there is an unresolved obstacle named obstacle_b. The vehicle should prioritize obstacle avoidance while returning to its starting point.
State_permutation: deploy = True, return = True, obstacle_resolved = False, obstacle_name = 'obstacle_b'",
"Go to points 0, 1, 2, 3, 4 and then return to starting position.",False,False,none,none,False,completed,none,idle,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'idle', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is true, return is false, obstacle name is obstacle_a, obstacle resolved is false, and obstacle proximity has value nearby?
Explanation: If there was an obstacle named obstacle_a nearby that hasn't been resolved, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: deploy = true, return = false, obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = false

2. What if deploy is true, return is true, obstacle name is obstacle_b, obstacle resolved is false, and obstacle proximity has value close?
Explanation: If there was an obstacle named obstacle_b close to the vehicle that hasn't been resolved, then the vehicle would change its behavior and start returning to its starting point while avoiding the obstacle.
State permutation: deploy = true, return = true, obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = false

3. What if deploy is false, return is false, obstacle name is none, and obstacle resolved is true?
Explanation: If there was no obstacle and the vehicle had completed its objective, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = false, return = false, obstacle_name = 'none', obstacle_resolved = true",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,none,none,none,none,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if deploy is true and return is true?

Explanation: If deploy is true and return is true, then the vehicle would be returning to its starting position after completing its survey.

State permutation: deploy = true, return = true

User query: What if obstacle_proximity is very close?

Explanation: If obstacle_proximity is very close, then the vehicle would be surveying the area while avoiding an obstacle in extremely close proximity.

State permutation: obstacle_proximity = 'very close'

User query: What if active_behaviour is none?

Explanation: If active_behaviour is none, then the vehicle would not have any specific behavior activated and would be idle.

State permutation: active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would remain idle with no activated behavior.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False, deploy = False, return = False, active_behaviour = 'none'
State representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.

State permutation: deploy = False, return = True
State representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}

User query: What if obstacle_resolved is true?

Explanation: If obstacle_resolved is true, then the vehicle would continue its current behavior without avoiding the obstacle.

State permutation: obstacle_resolved = True
State representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,none,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'none', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"Query 1:
What if the vehicle is in transit and its behavior stage is ""none""?

Explanation:
If the vehicle is in transit and its behavior stage is ""none"", it means that the vehicle is not engaged in any specific behavior or task. It may be simply moving from one point to another without any specific objective or action.

State Permutation:
behaviour_stage = 'none', active_behaviour = 'none'

Query 2:
What if the vehicle is currently at point 2 and its next point is point 3?

Explanation:
If the vehicle is currently at point 2 and its next point is point 3, it means that the vehicle has completed the task at point 2 and is now moving towards point 3 as part of its objective.

State Permutation:
next_point = 'point3'

Query 3:
What if the vehicle is currently avoiding an obstacle with obstacle proximity as ""very close""?

Explanation:
If the vehicle is currently avoiding an obstacle with obstacle proximity as ""very close"", it means that the vehicle has detected an obstacle in very close range and is actively taking steps to avoid it while continuing its current behavior or task.

State Permutation:
obstacle_proximity = 'very close', active_behaviour = 'waypt_survey'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,none,idle,south,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if the vehicle is in close proximity to obstacle_a but the obstacle has already been resolved? 
Explanation: If the vehicle is in close proximity to obstacle_a but the obstacle has already been resolved, then the vehicle would continue its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

2. What if the vehicle is not deployed and is returning to its starting point?
Explanation: If the vehicle is not deployed and is returning to its starting point, then the vehicle would be in an idle state with no activated behavior.
State_permutation: deploy = 'False', return = 'True'

3. What if the vehicle is deployed and is in very close proximity to obstacle_b, which hasn't been resolved yet?
Explanation: If the vehicle is deployed and is in very close proximity to obstacle_b, which hasn't been resolved yet, then the vehicle would be surveying the area while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,idle,south,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would change its behavior from surveying the area to surveying the area while avoiding the obstacle_a.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

--------------------------------------------------

User query: What if obstacle_b is resolved and the vehicle is still in close proximity to it?

Explanation: If obstacle_b is resolved and the vehicle is still in close proximity to it, then the vehicle would continue its survey of the area while considering the obstacle_b as no longer obstructing its path.

State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

--------------------------------------------------

User query: What if the vehicle completes its survey and deploys again without any obstacle?

Explanation: If the vehicle completes its survey and deploys again without any obstacle, then the vehicle would start the surveying behavior once more, beginning from point 0.

State permutation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'idle', 'heading': 'south', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,low,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'low', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1:
What if the deploy value is False?

Explanation:
If the deploy value is False, then the vehicle would not be in any behavior stage and would be idle with no activated behavior.

State Permutation:
deploy = False

Query 2:
What if the obstacle proximity is very close and the obstacle name is obstacle_b?

Explanation:
If the obstacle proximity is very close and the obstacle name is obstacle_b, then the vehicle would be surveying the area while avoiding the obstacle_b.

State Permutation:
obstacle_proximity = 'very close'
obstacle_name = 'obstacle_b'

Query 3:
What if the return value is True and the obstacle resolved value is True?

Explanation:
If the return value is True and the obstacle resolved value is True, then the vehicle would be returning to its starting point and the obstacle would have been successfully resolved.

State Permutation:
return = True
obstacle_resolved = True",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,moderate,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'moderate', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

User query: What if the vehicle is at the beginning of its survey and obstacle_b is nearby, but there is no obstacle_c?

Explanation: If the vehicle is at the beginning of its survey and obstacle_b is nearby, but there is no obstacle_c, then the vehicle would continue surveying the area while avoiding obstacle_b.

State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

User query: What if the vehicle has completed its survey and is returning to its starting point, but obstacle_d is very close and has not been resolved?

Explanation: If the vehicle has completed its survey and is returning to its starting point, but obstacle_d is very close and has not been resolved, then the vehicle would change its behavior and avoid obstacle_d while returning to its starting point.

State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'

Representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'moderate', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if the vehicle's next point is point2 and the obstacle_c is nearby but has been resolved?

Explanation: If the vehicle's next point is point2 and the obstacle_c is nearby but has been resolved, then the vehicle would continue moving towards point2 during its survey while ignoring the obstacle_c.

State permutation: next_point = 'point2', obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1:
What if the deploy value is false?

Explanation:
If the deploy value is false, it means that the vehicle is not in a surveying or returning state. It would be idle with no activated behavior.

State Permutation:
deploy = False

Query 2:
What if the obstacle_proximity has a value of very close?

Explanation:
If the obstacle_proximity has a value of very close, it means that the obstacle is in very close proximity to the vehicle. In this case, if the obstacle is not resolved and the return value is false, the vehicle would continue surveying the area while avoiding the obstacle.

State Permutation:
obstacle_proximity = ""very close""

Query 3:
What if the active_behaviour is set to ""waypt_return"" and the deploy value is true?

Explanation:
If the active_behaviour is set to ""waypt_return"" and the deploy value is true, it means that the vehicle is in the process of returning to its starting point. It would no longer be surveying the area.

State Permutation:
active_behaviour = ""waypt_return""
deploy = True

Representation:
{
  'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': 'none',
  'obstacle_proximity': 'none',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point0',
  'speed': 'fast',
  'heading': 'southeast',
  'next_point_direction': 'southeast',
  'obstacle_direction': 'none',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in nearby proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if there’s obstacle_b in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if there’s obstacle_c in close proximity which has already been resolved?

Explanation: If there was obstacle_c in close proximity which has already been resolved, then the vehicle would continue moving towards point 0 during its survey without avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

Query 2: What if the vehicle is already returning to its starting point?
Explanation: If the vehicle is already returning to its starting point, it means that the survey is completed and the vehicle is no longer surveying the area.
State permutation: return = True, active_behaviour = 'return_to_start'

Query 3: What if the vehicle is idle and not in transit?
Explanation: If the vehicle is idle and not in transit, it means that it is not currently engaged in any specific behavior or moving towards any point.
State permutation: behaviour_stage = 'idle', next_point = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point0,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point0', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if there’s obstacle_c in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_c in very close proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if there’s obstacle_d in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_d in close proximity, then the vehicle would continue moving towards point 0 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
obstacle_name = 'obstacle_a', 
'obstacle_proximity': 'close', 
obstacle_resolved = ‘False’

---

User query: What if the vehicle is in the return stage?

Explanation: If the vehicle is in the return stage, it means that it has completed its survey and is now returning to its starting point.

State_permutation: 
behaviour_stage = 'return'

---

User query: What if the vehicle is idle and not surveying any area?

Explanation: If the vehicle is idle and not surveying any area, it means that it is not currently deployed and its return status is also false.

State_permutation: 
deploy = 'False', 
return = 'False'

---

Representation: 
{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 
'deploy': 'True', 
'return': 'False', 
'obstacle_name': 'none', 
'obstacle_proximity': 'none', 
'obstacle_resolved': 'False', 
'behaviour_stage': 'advanced', 
'next_point': 'point1', 
'speed': 'max speed', 
'heading': 'southeast', 
'next_point_direction': 'southeast', 
'obstacle_direction': 'none', 
'name': 'alpha', 
'active_behaviour': 'waypt_survey'}

---

User query: What if the vehicle is surveying an area and the obstacle proximity is very close?

Explanation: If the vehicle is surveying an area and the obstacle proximity is very close, then the vehicle would continue its survey while avoiding the obstacle with extra precaution due to the close proximity.

State_permutation: 
active_behaviour = 'waypt_survey', 
obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point1,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1st representation:

1. What if there’s obstacle_a in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_a nearby, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.
State permutation: deploy = 'False', return = 'True'

3. What if deploy is true, return is false, and the obstacle_name is obstacle_b?
Explanation: If deploy is true, return is false, and the obstacle name is obstacle_b, then the vehicle would be surveying the area while avoiding obstacle_b.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_b'


2nd representation:

1. What if there’s obstacle_x in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_x nearby, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_x', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the next_point is point3 and the speed is moderate?
Explanation: If the next_point is point3 and the speed is moderate, then the vehicle would be moving towards point 3 at a moderate speed.
State permutation: next_point = 'point3', speed = 'moderate'

3. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.
State permutation: deploy = 'False', return = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

User query 1: What if the deploy value is False instead of True?

Explanation: If the deploy value was False instead of True, then the vehicle would not be surveying the area and would remain idle with no activated behavior.

State_permutation:
- deploy = 'False'
- return = 'False'
- active_behaviour = 'none'

User query 2: What if the return value is True instead of False and there is no obstacle present?

Explanation: If the return value was True instead of False and there was no obstacle present, then the vehicle would be returning to its starting position.

State_permutation:
- return = 'True'
- deploy = 'True'
- obstacle_name = 'none'
- obstacle_proximity = 'none'
- obstacle_resolved = 'False'
- active_behaviour = 'returning'

User query 3: What if the obstacle proximity is 'very close' instead of 'close'?

Explanation: If the obstacle proximity was 'very close' instead of 'close', then the vehicle would still continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation:
- obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southeast,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if there’s obstacle_a in nearby proximity which hasn’t been resolved?
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = False

Query 2: What if the vehicle has completed its survey and is currently returning to its starting position?
Explanation: If the vehicle has completed its survey and is currently returning to its starting position, then the vehicle would have deploy as true and return as true.
State permutation: deploy = True, return = True, active_behaviour = 'returning survey area'

Query 3: What if the vehicle is currently idle and has no activated behavior?
Explanation: If the vehicle is currently idle and has no activated behavior, then deploy and return would both be false.
State permutation: deploy = False, return = False, active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point1,very fast,southwest,southwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point1 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = ‘False’

User query 2: What if deploy is false?
Explanation 2: If deploy is false, then the vehicle would be idle with no activated behavior.
State permutation 2: deploy = False

User query 3: What if return is true and deploy is false?
Explanation 3: If return is true and deploy is false, then the vehicle would be returning to its starting point without performing any survey.
State permutation 3: return = True, deploy = False",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,none,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if the deploy value is false?
   Explanation: If the deploy value is false, then the vehicle would not be surveying an area or returning to its starting point. It would be idle with no activated behavior.
   State permutation: deploy = false

2. User query: What if the obstacle proximity is very close and the obstacle name is obstacle_b?
   Explanation: If the obstacle proximity is very close and the obstacle name is obstacle_b, then the vehicle would be surveying the area while avoiding the obstacle. It would continue moving towards the next point while taking precautions to avoid obstacle_b.
   State permutation: obstacle_proximity = 'very close', obstacle_name = 'obstacle_b'

3. User query: What if the return value is true and the obstacle resolved value is true?
   Explanation: If the return value is true and the obstacle resolved value is true, then the vehicle would be returning to its starting position without any obstacle avoidance. It would not be concerned with any obstacles in its path as they have already been resolved.
   State permutation: return = true, obstacle_resolved = true",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there's obstacle_a in close proximity which hasn't been avoided?

Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State Permutation 1: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 2: What if obstacle_d is in nearby proximity and has been resolved?

Explanation 2: If obstacle_d is in nearby proximity and has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.

State Permutation 2: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_d', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query 3: What if the deploy is false and return is true?

Explanation 3: If deploy is false and return is true, then the vehicle is idle with no activated behaviour.

State Permutation 3: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'False', 'return': 'True', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the vehicle is returning to its starting point while avoiding obstacle_b in nearby proximity?
Explanation: If the vehicle is returning to its starting point while avoiding obstacle_b in nearby proximity, then the vehicle would change its behavior to ""avoiding obstacle"" and adjust its path accordingly to avoid obstacle_b.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the vehicle is idle with no activated behavior and there is no obstacle present?
Explanation: If the vehicle is idle with no activated behavior and there is no obstacle present, then the vehicle would remain idle and not perform any actions.
State_permutation: deploy = 'False', return = 'False', obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’

3. What if the vehicle is surveying the area while avoiding obstacle_c in very close proximity?
Explanation: If the vehicle is surveying the area while avoiding obstacle_c in very close proximity, then the vehicle would adjust its path and behavior to avoid obstacle_c while continuing its survey.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"Query 1:
What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation:
If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

Query 2:
What if the vehicle has already resolved obstacle_b which was in very close proximity?

Explanation:
If the vehicle has already resolved obstacle_b which was in very close proximity, then the vehicle would continue its survey while avoiding the obstacle and moving towards the next point.

State permutation:
obstacle_name = 'obstacle_b'
obstacle_proximity = 'very close'
obstacle_resolved = 'True'

Query 3:
What if the vehicle is no longer in transit and has completed its survey at point3?

Explanation:
If the vehicle is no longer in transit and has completed its survey at point3, then the vehicle would be idle with no activated behaviour.

State permutation:
behaviour_stage = 'idle'
next_point = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if the obstacle is obstacle_a and it is in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop its survey and start avoiding the obstacle, adjusting its course to avoid a collision.
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if the vehicle has already resolved the obstacle and it is obstacle_b in close proximity, which hasn't been avoided?
Explanation: If there was already another obstacle_b in close proximity, the vehicle would continue its survey while avoiding obstacle_b, adjusting its course whenever necessary to avoid a collision.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'close', obstacle_resolved = 'True'

3. What if the vehicle is already returning and there is an obstacle_c in nearby proximity, which hasn't been avoided?
Explanation: If there was obstacle_c in nearby proximity while the vehicle is already returning, then the vehicle would change its course to avoid the obstacle_c and still continue its return to the starting point without deviating from its path.
State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southwest,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.
State_permutation: deploy = False, return = True

3. What if the objective changes to 'Go to points 6, 7, 8 and then return to starting position'?
Explanation: If the objective changes to 'Go to points 6, 7, 8 and then return to starting position', then the vehicle would update its next_point to 'point6' and continue its survey in the new sequence of points.
State_permutation: objective = 'Go to points 6, 7, 8 and then return to starting position', next_point = 'point6'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"Query 1:
What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

Query 2:
What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.
State_permutation: deploy = False, return = True

Query 3:
What if the vehicle is not surveying an area and obstacle proximity is very close?
Explanation: If the vehicle is not surveying an area and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State_permutation: active_behaviour = 'return_to_base', obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,very close,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c'}",,"1. User query: What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
   Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
   State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

2. User query: What if the vehicle completes the survey and encounters obstacle_d in close proximity while returning to its starting point?
   Explanation: If the vehicle completes the survey and encounters obstacle_d in close proximity while returning to its starting point, then the vehicle would change its behavior and start avoiding the obstacle_d while heading towards its starting point.
   State permutation: active_behaviour = 'waypt_return,avoid_obstacle_avoid_obstacle_d', obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = 'False'

3. User query: What if the vehicle's deploy and return both are false, but it encounters obstacle_e in nearby proximity?
   Explanation: If the vehicle's deploy and return both are false, but it encounters obstacle_e in nearby proximity, then the vehicle would remain idle without any activated behavior, but it would start avoiding obstacle_e.
   State permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_e', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"Query 1:
What if the deploy is false and return is false?
Explanation:
If the deploy is false and return is false, then the vehicle would be idle with no activated behavior and would not conduct any survey or obstacle avoidance. 

State permutation:
deploy = False, return = False

Query 2:
What if the obstacle_resolved is true?
Explanation:
If the obstacle_resolved is true, then it means that the obstacle has been successfully avoided by the vehicle. This would not affect the current behavior of the vehicle, as it would continue surveying the area or returning to its starting point based on the deploy and return values.

State permutation:
obstacle_resolved = True

Query 3:
What if the behavior_stage is 'survey_completed'?
Explanation:
If the behavior_stage is 'survey_completed', it indicates that the vehicle has completed its survey of the area and there are no more waypoints or points remaining to visit. In this case, the vehicle would change its behavior and enter a different stage, such as returning to its starting position or going idle.

State permutation:
behavior_stage = 'survey_completed'

Representation 2:

Query 1:
What if the obstacle_proximity is 'very close'?
Explanation:
If the obstacle_proximity is 'very close', it indicates that the obstacle is extremely close to the vehicle. In this scenario, the vehicle would prioritize avoiding the obstacle and may change its current behavior of surveying or returning to its starting point in order to avoid a potential collision.

State permutation:
obstacle_proximity = 'very close'

Query 2:
What if the active_behaviour includes 'avoid_obstacle_avoid_obstacle_d'?
Explanation:
If the active_behaviour includes 'avoid_obstacle_avoid_obstacle_d', it suggests that there is another obstacle, obstacle_d, that the vehicle is currently avoiding. This would affect the vehicle's behavior as it would need to take into account multiple obstacles and adjust its path accordingly.

State permutation:
active_behaviour = 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e,avoid_obstacle_avoid_obstacle_d'

Query 3:
What if the speed is 'slow'?
Explanation:
If the speed is 'slow', it indicates that the vehicle is moving at a slower pace. This may affect the vehicle's behavior as it could impact the time taken for surveying or returning to the starting point, potentially altering the overall decision-making and path planning process.

State permutation:
speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided? 

Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point without surveying any area.

State_permutation: deploy = False, return = True

3. What if the vehicle has completed the survey and resolved obstacle_d in nearby proximity?

Explanation: If the vehicle has completed the survey and resolved obstacle_d in nearby proximity, then the vehicle would be returning to its starting point, as it no longer needs to survey the area.

State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: What if the vehicle resolves obstacle_a in close proximity during its survey?
Explanation: If the vehicle resolves obstacle_a in close proximity during its survey, then it would continue moving towards point 3 without avoiding the obstacle.
State permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'True'

Query 2: What if the vehicle resolves obstacle_a in nearby proximity during its survey?
Explanation: If the vehicle resolves obstacle_a in nearby proximity during its survey, then it would continue moving towards point 3 without avoiding the obstacle.
State permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'True'

Query 3: What if the vehicle resolves obstacle_a in very close proximity during its survey?
Explanation: If the vehicle resolves obstacle_a in very close proximity during its survey, then it would continue moving towards point 3 without avoiding the obstacle.
State permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_c,nearby,False,in-transit,point1,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_c,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the vehicle is in the process of returning but obstacle_d suddenly appears in very close proximity and has not been avoided?
Explanation: If obstacle_d suddenly appears in very close proximity while the vehicle is returning, the vehicle would change its behavior and start avoiding the obstacle while continuing to return to its starting point.
State permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, active_behaviour = 'return_avoid_obstacle_avoid_obstacle_d'.

2. What if the vehicle is in the process of surveying and obstacle_b appears in nearby proximity which has already been resolved?
Explanation: If obstacle_b appears in nearby proximity during the vehicle's survey and it has already been resolved, the vehicle would continue its survey without taking any action to avoid the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’, active_behaviour = 'waypt_survey'.

3. What if the vehicle is idle and obstacle_e suddenly appears in close proximity which has not been resolved?
Explanation: If the vehicle is idle and obstacle_e appears in close proximity without being resolved, the vehicle would remain idle and not perform any behaviors until the obstacle is resolved.
State permutation: obstacle_name = 'obstacle_e', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’, active_behaviour = 'none'.",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if there’s obstacle_b in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying any area.
State permutation: deploy = 'False', return = 'True'

3. What if obstacle_resolved is true?
Explanation: If obstacle_resolved is true, then it indicates that the obstacle has been successfully avoided or resolved by the vehicle.
State permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southeast,southeast,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: 
What if the vehicle is in the idle state with no activated behavior?
Explanation: If the vehicle is in the idle state with no activated behavior, it means that both deploy and return are false. The vehicle is not surveying an area or returning to its starting point.
State permutation: deploy = False, return = False

Query 2:
What if the vehicle is returning to its starting point while avoiding an obstacle that has been resolved?
Explanation: If the vehicle is returning to its starting point while avoiding an obstacle that has been resolved, it means that deploy and return are true, obstacle name is not equal to none, obstacle resolved is true, and obstacle proximity should have a value other than nearby, close, or very close.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_a', obstacle_resolved = True, obstacle_proximity = 'far'

Query 3:
What if the vehicle is surveying the area while avoiding an obstacle that has not been resolved and is very close?
Explanation: If the vehicle is surveying the area while avoiding an obstacle that has not been resolved and is very close, it means that deploy is true, return is false, obstacle name is not equal to none, obstacle resolved is false, and obstacle proximity is 'very close'.
State permutation: deploy = True, return = False, obstacle_name = 'obstacle_a', obstacle_resolved = False, obstacle_proximity = 'very close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"What if the vehicle encounters obstacle_b in very close proximity which hasn't been avoided? 

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle. 

State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

What if the vehicle encounters obstacle_c in nearby proximity which hasn't been avoided? 

Explanation: If there was obstacle_c in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle. 

State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

What if the vehicle encounters obstacle_d in close proximity which hasn't been avoided? 

Explanation: If there was obstacle_d in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle. 

State permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the deploy is false and return is false?
Explanation: If the deploy is false and return is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = False, return = False

2. What if the deploy is true, return is true, and the obstacle proximity is very close?
Explanation: If the deploy is true, return is true, and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State permutation: deploy = True, return = True, obstacle_proximity = 'very close'

3. What if the deploy is true, return is false, the obstacle name is obstacle_b, and the obstacle resolved is true?
Explanation: If the deploy is true, return is false, the obstacle name is obstacle_b, and the obstacle resolved is true, then the vehicle would be surveying the area while considering the obstacle as already resolved.
State permutation: deploy = True, return = False, obstacle_name = 'obstacle_b', obstacle_resolved = True",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the obstacle_e in very close proximity has been resolved?
Explanation: If the obstacle_e in very close proximity has been resolved, then the vehicle would continue moving towards point 1 during its survey while having successfully avoided the obstacle.
State permutation: obstacle_resolved = 'True'

2. What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be idle with no activated behavior, regardless of any other state values.
State permutation: deploy = 'False', return = 'False'

3. What if the vehicle is returning to its starting point and there is no obstacle nearby?
Explanation: If the vehicle is returning to its starting point and there is no obstacle nearby, then it would continue returning to the starting point without any obstacle avoidance behavior.
State permutation: deploy = 'True', return = 'True', obstacle_name = 'none', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southeast,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"What if the obstacle_e in medium distance proximity has been resolved?
Explanation: If the obstacle_e in medium distance proximity has been resolved, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle_e.
State_permutation: obstacle_resolved = ‘True’

What if the objective is changed to 'Go to points 0, 1, 2, 3, 4, 5, 6, and then return to starting position.'?
Explanation: If the objective is changed to 'Go to points 0, 1, 2, 3, 4, 5, 6, and then return to starting position.', then the vehicle would follow the new sequence of points and return to its starting position after reaching point 6.
State_permutation: objective = 'Go to points 0, 1, 2, 3, 4, 5, 6, and then return to starting position.'

What if the vehicle's speed is changed to 'slow'?
Explanation: If the vehicle's speed is changed to 'slow', then the vehicle would move at a slower speed during its survey and while avoiding obstacles.
State_permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southwest,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if the obstacle_a is in close proximity and has been resolved? 

Explanation: If the obstacle_a is in close proximity and has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle. 

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

2. What if the obstacle name is obstacle_b and its proximity is very close, but it has been resolved?

Explanation: If the obstacle name is obstacle_b and its proximity is very close but it has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle. 

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘True’

3. What if the deploy is false and the return is false?

Explanation: If the deploy is false and the return is false, then the vehicle would be idle with no activated behavior. 

State_permutation: deploy = 'False', return = 'False'

For the second representation:

1. What if the obstacle name is none and the proximity is nearby, but it hasn't been resolved? 

Explanation: If the obstacle name is none and the proximity is nearby but it hasn't been resolved, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle. 

State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if the deploy is true and the return is true?

Explanation: If the deploy is true and the return is true, then the vehicle would be returning to its starting position. 

State_permutation: deploy = 'True', return = 'True'

3. What if the active behavior is waypt_survey, but there is no obstacle?

Explanation: If the active behavior is waypt_survey but there is no obstacle, then the vehicle would continue moving towards point 1 during its survey without avoiding any obstacle. 

State_permutation: active_behaviour = 'waypt_survey', obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southwest,southwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"What if the obstacle_e is resolved while the vehicle is surveying point 1? 

Explanation: If the obstacle_e is resolved while the vehicle is surveying point 1, then the vehicle would continue its survey and avoid obstacle_e.

State_permutation: obstacle_resolved = 'True'

What if the vehicle is supposed to return but the obstacle_e is still unresolved?

Explanation: If the vehicle is supposed to return but the obstacle_e is still unresolved, then the vehicle would change its behavior and start avoiding obstacle_e instead of returning.

State_permutation: return = 'False', active_behaviour = 'avoid_obstacle_avoid_obstacle_e'

What if the vehicle is not deployed and there's an obstacle_b in close proximity?

Explanation: If the vehicle is not deployed and there's an obstacle_b in close proximity, then the vehicle would remain idle with no activated behavior.

State_permutation: deploy = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,very close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False.

User query 2: What if obstacle_b is very close and obstacle_c is nearby, both of which haven't been avoided?
Explanation 2: If obstacle_b is very close and obstacle_c is nearby, both of which haven't been avoided, then the vehicle would return to its starting position while avoiding the obstacles.
State permutation 2: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = False.
State permutation 3: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = False.

User query 3: What if obstacle_a is nearby and obstacle_d is close, both of which haven't been resolved?
Explanation 3: If obstacle_a is nearby and obstacle_d is close, both of which haven't been resolved, then the vehicle would survey the area while avoiding the obstacles.
State permutation 4: obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = False.
State permutation 5: obstacle_name = 'obstacle_d', obstacle_proximity = 'close', obstacle_resolved = False.",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,far,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"Query 1: What if the vehicle resolves the obstacle_e in close proximity while surveying?

Explanation: If the vehicle resolves the obstacle_e in close proximity while surveying, then the vehicle would continue surveying the area while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_e', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

Query 2: What if the vehicle is not deployed and there is no obstacle present?

Explanation: If the vehicle is not deployed and there is no obstacle present, then the vehicle would remain idle with no activated behavior.

State_permutation: deploy = 'False', obstacle_name = 'none', 'obstacle_proximity': 'none'

Query 3: What if the vehicle returns to its starting point while avoiding an obstacle in very close proximity?

Explanation: If the vehicle returns to its starting point while avoiding an obstacle in very close proximity, then the vehicle would navigate back to its starting point while actively avoiding the obstacle.

State_permutation: return = 'True', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_e","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_e'}",,"1. What if obstacle_a is in very close proximity and hasn't been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop its surveying behavior and start avoiding the obstacle, ensuring its safety.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if obstacle_a is in nearby proximity and has been resolved?
Explanation: If obstacle_a is in nearby proximity and has been resolved, then the vehicle would continue its surveying behavior without any interruption and without taking any action to avoid the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'

3. What if the vehicle has already completed its surveying and is currently returning to its starting point, but encounters obstacle_a in close proximity?
Explanation: If the vehicle has already completed its surveying and is returning, but encounters obstacle_a in close proximity, then the vehicle would change its behavior and start avoiding the obstacle while continuing to return to its starting point.
State_permutation: behavior_stage = 'returning', obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is in close proximity to obstacle_a and it hasn't been resolved yet?
Explanation: If the vehicle is in close proximity to obstacle_a and it hasn't been resolved yet, then the vehicle would stop surveying the area and start avoiding the obstacle while continuing its mission to reach point 3.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is in very close proximity to obstacle_b and it hasn't been resolved yet?
Explanation: If the vehicle is in very close proximity to obstacle_b and it hasn't been resolved yet, then the vehicle would stop surveying the area, start avoiding obstacle_b, and immediately return to its starting point.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is in nearby proximity to obstacle_c and it hasn't been resolved yet?
Explanation: If the vehicle is in nearby proximity to obstacle_c and it hasn't been resolved yet, then the vehicle would continue surveying the area while avoiding obstacle_c until it completes its mission to reach point 3.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

For the second representation:

1. What if there's no obstacle present?
Explanation: If there's no obstacle present, the vehicle would continue surveying the area without any interruptions until it reaches point 5 and then returns to its starting position.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

2. What if the vehicle is in very close proximity to obstacle_e and it hasn't been resolved yet?
Explanation: If the vehicle is in very close proximity to obstacle_e and it hasn't been resolved yet, the vehicle would stop surveying the area and start avoiding obstacle_e while continuing its mission to reach point 5.
State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is in nearby proximity to obstacle_f and it hasn't been resolved yet?
Explanation: If the vehicle is in nearby proximity to obstacle_f and it hasn't been resolved yet, the vehicle would continue surveying the area while avoiding obstacle_f until it completes its mission to reach point 5.
State permutation: obstacle_name = 'obstacle_f', obstacle_proximity = 'nearby', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,far,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle_e is resolved and the vehicle is in close proximity to obstacle_a? 
Explanation: If the obstacle_e is resolved and the vehicle is in close proximity to obstacle_a, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle_a.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = 'False', obstacle_resolved = 'True'

2. What if the obstacle_e is resolved and the vehicle is in close proximity to obstacle_b? 
Explanation: If the obstacle_e is resolved and the vehicle is in close proximity to obstacle_b, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle_b.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'close', obstacle_resolved = 'False', obstacle_resolved = 'True'

3. What if the obstacle_e is resolved and the vehicle is in close proximity to obstacle_c? 
Explanation: If the obstacle_e is resolved and the vehicle is in close proximity to obstacle_c, then the vehicle would continue moving towards point 1 during its survey while avoiding the obstacle_c.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = 'False', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,none,False,in-transit,point1,very fast,southwest,southwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State_permutation: 
obstacle_name = 'obstacle_a'  
obstacle_proximity = 'close'  
obstacle_resolved = 'False'  

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting position without surveying the area.

State_permutation: 
deploy = 'False'
return = 'True'

User query: What if deploy is true, return is true, obstacle name is not equal to none and obstacle resolved is true?

Explanation: If deploy is true, return is true, obstacle name is not equal to none and obstacle resolved is true, then the vehicle would be returning to its starting position while the obstacle has been successfully resolved.

State_permutation: 
deploy = 'True'
return = 'True'
obstacle_name = 'obstacle_a'
obstacle_resolved = 'True'

User query: What if deploy is true, return is false, obstacle proximity has value far and obstacle resolved is false?

Explanation: If deploy is true, return is false, obstacle proximity has value far and obstacle resolved is false, then the vehicle would be surveying the area while avoiding the obstacle that is far away and has not been resolved yet.

State_permutation: 
deploy = 'True'
return = 'False'
obstacle_proximity = 'far'
obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,close,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the deploy is false and return is true?
Explanation: If the deploy is false and return is true, then the vehicle would be returning to its starting position instead of surveying an area.
State_permutation: deploy = False, return = True

2. What if the obstacle proximity is ""far"" instead of ""close""?
Explanation: If the obstacle proximity is ""far"" instead of ""close"", then the vehicle would continue surveying the area without avoiding the obstacle.
State_permutation: obstacle_proximity = ""far""

3. What if the active behaviour is ""obstacle_avoidance"" instead of ""waypt_survey""?
Explanation: If the active behaviour is ""obstacle_avoidance"" instead of ""waypt_survey"", then the vehicle would be avoiding the obstacle and not surveying the area.
State_permutation: active_behaviour = ""obstacle_avoidance""",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,none,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle reaches point 5 and there is an obstacle in close proximity which hasn't been avoided?
Explanation: If there was an obstacle in close proximity at point 5, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.
State permutation: 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'next_point': 'point5'

2. What if the vehicle is returning to its starting point and encounters an obstacle_e in nearby proximity which hasn't been avoided?
Explanation: If there was an obstacle_e in nearby proximity while returning to the starting point, then the vehicle would alter its route and avoid the obstacle while continuing its return journey.
State permutation: 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'next_point': 'start'

3. What if the vehicle is surveying an area and there is an obstacle_f in very close proximity which hasn't been avoided?
Explanation: If there was an obstacle_f in very close proximity while surveying the area, then the vehicle would modify its path and steer away from the obstacle while continuing its survey.
State permutation: 'obstacle_name': 'obstacle_f', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'active_behaviour': 'survey_obstacle_avoidance'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,nearby,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop its surveying behavior and prioritize avoiding the obstacle. The vehicle would then resume its surveying behavior once the obstacle is avoided.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if the vehicle has already returned to its starting position?
Explanation: If the vehicle has already returned to its starting position, it means that it has completed its survey and there is no behavior active. The obstacle proximity and resolution are no longer relevant in this state.
State_permutation: return = 'True', obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’, active_behaviour = 'none'

3. What if the vehicle is currently at point 2?
Explanation: If the vehicle is currently at point 2, it means that it has completed its survey of the area and is now ready to move on to the next point. The obstacle proximity and resolution are no longer relevant in this state.
State_permutation: next_point = 'point2', obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southwest,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southwest', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.

State permutation: 
deploy = 'False'
return = 'True'

User query: What if deploy is true, return is false, obstacle name is not equal to none, obstacle resolved is true and obstacle proximity has value very close?

Explanation: If deploy is true, return is false, obstacle name is not equal to none, obstacle resolved is true, and obstacle proximity has the value very close, then the vehicle would be surveying the area while considering the obstacle as resolved due to its close proximity.

State permutation: 
deploy = 'True'
return = 'False'
obstacle_name = 'obstacle_a'
obstacle_proximity = 'very close'
obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,medium distance,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'obstacle_a',
 'obstacle_proximity': 'close',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}


User query: What if the vehicle is already on its way back to the starting position?

Explanation: If the vehicle is already on its way back to the starting position, then the vehicle would continue returning to its starting point, regardless of the obstacle_a in close proximity.

State permutation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'True',
 'obstacle_name': 'obstacle_a',  (obstacle_a is still in close proximity)
 'obstacle_proximity': 'close',
 'obstacle_resolved': 'False',
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}


User query: What if the obstacle_a has already been resolved?

Explanation: If the obstacle_a has already been resolved, then the vehicle would continue moving towards point 3 during its survey, even if the obstacle_a is still in close proximity.

State permutation: 
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': 'True',
 'return': 'False',
 'obstacle_name': 'obstacle_a',  
 'obstacle_proximity': 'close',
 'obstacle_resolved': 'True',  (obstacle_a has been resolved)
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_e,very far,False,in-transit,point1,very fast,southeast,southeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_e', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the obstacle_e in close proximity and hasn't been avoided?
Explanation: If there was obstacle_e in close proximity, then the vehicle would change its behavior to avoid the obstacle while surveying the area.
State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if deploy is false and return is false?
Explanation: If the deploy is false and return is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = 'False', return = 'False'

3. What if the vehicle has already resolved the obstacle_e in close proximity?
Explanation: If the vehicle has already resolved the obstacle_e in close proximity, then it would continue surveying the area without avoiding any obstacle.
State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,True,in-transit,point1,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point1', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation 1: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

User query 2: What if the vehicle is in the obstacle_resolution stage?
Explanation 2: If the vehicle is in the obstacle_resolution stage, then it is actively trying to resolve any obstacles that may be in its path.
State permutation 2: behaviour_stage = 'obstacle_resolution'

User query 3: What if the vehicle is returning and there's an obstacle_b in nearby proximity?
Explanation 3: If the vehicle is returning and there's obstacle_b in nearby proximity, then the vehicle would alter its return path to avoid the obstacle.
State permutation 3: return = 'True', obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point2,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop surveying and start avoiding the obstacle while ensuring its safe return to the starting position.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if deploy is false and return is true?

Explanation: If the deploy is false and return is true, then the vehicle would be returning to its starting position without surveying the area.

State_permutation: deploy = 'False', return = 'True'

3. What if the behavior_stage is 'waiting' instead of 'in-transit'?

Explanation: If the behavior_stage is 'waiting' instead of 'in-transit', then the vehicle would not be in motion and would be waiting at the current position, possibly due to a delay or external factors.

State_permutation: behavior_stage = 'waiting'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in nearby proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if there’s obstacle_b in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if there’s obstacle_c in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_c in close proximity, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which has been resolved?
Explanation: If there was obstacle_b in nearby proximity that has been resolved, then the vehicle would continue moving towards point 2 during its survey without needing to avoid the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘True’

2. What if the deploy value is false?
Explanation: If the deploy value is false, then the vehicle would be idle with no activated behavior regardless of the other conditions.
State_permutation: deploy = 'False'

3. What if the return value is true and obstacle_c is in very close proximity which hasn't been avoided?
Explanation: If the return value is true and there is obstacle_c in very close proximity which hasn't been avoided, then the vehicle would be returning to its starting point while avoiding the obstacle.
State_permutation: return = 'True', obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,southeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle encounters obstacle_a in very close proximity during its survey and it hasn't been resolved? 

Explanation: If obstacle_a is very close to the vehicle and it hasn't been resolved, the vehicle would come to a stop and take necessary evasive actions to avoid the obstacle. It would then resume its survey once the obstacle has been successfully resolved.

State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if the vehicle is currently returning to its starting point and encounters obstacle_b in nearby proximity which hasn't been resolved?

Explanation: If obstacle_b is nearby the vehicle during its return and it hasn't been resolved, the vehicle would modify its trajectory to avoid the obstacle while continuing to move towards its starting point.

State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is idle and encounters obstacle_c in close proximity which hasn't been resolved?

Explanation: If obstacle_c is close to the idle vehicle and it hasn't been resolved, the vehicle would remain stationary and wait for the obstacle to be resolved before initiating any behavior.

State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = ‘False’

2. What if the vehicle is already at its starting point and deploy is true?
Explanation: If the vehicle is already at its starting point and deploy is true, then the vehicle would start surveying the area.
State_permutation: deploy = 'True', return = 'False', next_point = 'starting point'

3. What if the obstacle resolved is true and the vehicle is in the surveying stage?
Explanation: If the obstacle resolved is true and the vehicle is in the surveying stage, then the vehicle would continue its survey without any obstacle avoidance.
State_permutation: obstacle_resolved = 'True', behaviour_stage = 'surveying'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,northeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if the 'deploy' value is False?

Explanation: If the 'deploy' value is False, then the vehicle would not be surveying the area and will not be in any activated behavior.

State permutation: 'deploy': 'False'

User query: What if the 'return' value is True and the 'obstacle_resolved' value is True?

Explanation: If the 'return' value is True and the 'obstacle_resolved' value is True, then the vehicle would be returning to its starting point while not avoiding any obstacle.

State permutation: 'return': 'True', 'obstacle_resolved': 'True'

User query: What if the 'obstacle_proximity' value is 'very close'?

Explanation: If the 'obstacle_proximity' value is 'very close', then the vehicle would be surveying the area while avoiding an obstacle very closely.

State permutation: 'obstacle_proximity': 'very close'

Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}

User query: What if the 'obstacle_name' value is 'obstacle_a' and the 'obstacle_resolved' value is True?

Explanation: If the 'obstacle_name' value is 'obstacle_a' and the 'obstacle_resolved' value is True, then the vehicle would continue moving towards point 3 during its survey, as the obstacle has been successfully avoided.

State permutation: 'obstacle_name': 'obstacle_a', 'obstacle_resolved': 'True'

User query: What if the 'obstacle_direction' value is 'southeast'?

Explanation: If the 'obstacle_direction' value is 'southeast', then the vehicle would be surveying the area while avoiding an obstacle coming from the southeast direction.

State permutation: 'obstacle_direction': 'southeast'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,True,in-transit,point2,very fast,northeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
   Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
   State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. User query: What if the vehicle is returning to its starting point and there is no obstacle?
   Explanation: If the vehicle is returning to its starting point and there is no obstacle, then the vehicle would continue returning without deviating from its path.
   State permutation: deploy = 'True', return = 'True', obstacle_name = 'none', obstacle_resolved = 'True'

3. User query: What if the vehicle is idle with no activated behavior?
   Explanation: If the vehicle is idle with no activated behavior, then the vehicle would not be deployed and would remain stationary.
   State permutation: deploy = 'False', return = 'False', obstacle_name = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point2,very fast,east,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point2', 'speed': 'very fast', 'heading': 'east', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle encounters obstacle_a in close proximity which hasn't been avoided?

Explanation: If the vehicle encounters obstacle_a in close proximity without avoiding it, the vehicle would continue moving towards point 2 during its survey while attempting to avoid the obstacle.

State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’

Query 2: What if the vehicle has completed its survey and encounters obstacle_b in nearby proximity which hasn't been resolved?

Explanation: If the vehicle has completed its survey and encounters obstacle_b in nearby proximity without resolving it, the vehicle would be in the process of returning to its starting point while attempting to avoid the obstacle.

State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

Query 3: What if the vehicle is in a surveying behavior, encounters obstacle_c in very close proximity, and the obstacle has been resolved?

Explanation: If the vehicle is in a surveying behavior, encounters obstacle_c in very close proximity, and the obstacle has been resolved, the vehicle would continue its survey while avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point3,max speed,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if there’s obstacle_c in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_c in very close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if there’s obstacle_d in close proximity which has already been resolved?
Explanation: If there was obstacle_d in close proximity that has already been resolved, then the vehicle would continue moving towards point 3 during its survey without any obstacle avoidance.
State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point3,very fast,southeast,southeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the vehicle reaches point 5 and there is an obstacle_b in close proximity which hasn't been avoided?

Explanation: If there was obstacle_b in close proximity at point 5, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State Permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

Query 2: What if the vehicle reaches point 2 and there is an obstacle_c in nearby proximity which hasn't been avoided?

Explanation: If there was obstacle_c in nearby proximity at point 2, then the vehicle would continue moving towards point 2 during its survey while avoiding the obstacle.

State Permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

Query 3: What if the vehicle reaches point 3 and there is an obstacle_d in very close proximity which hasn't been avoided?

Explanation: If there was obstacle_d in very close proximity at point 3, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State Permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,none,False,advanced,point3,very fast,southeast,southeast,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is returning to its starting point and there is an obstacle_c in nearby proximity which hasn't been avoided?
Explanation: If there was obstacle_c in nearby proximity, then the vehicle would change its behavior from returning to its starting point to surveying the area while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is idle with no activated behavior and there is an obstacle_d in very close proximity which hasn't been avoided?
Explanation: If there was obstacle_d in very close proximity, then the vehicle would change its behavior from being idle to surveying the area while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is surveying an area and there is an obstacle_e in close proximity which has been resolved?
Explanation: If there was obstacle_e in close proximity that has been resolved, then the vehicle would continue surveying the area without changing its behavior.
State_permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,none,False,in-transit,point3,very fast,southeast,southeast,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_a in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. User query: What if the vehicle is currently at point 2 and the obstacle has been resolved?
Explanation: If the vehicle is currently at point 2 and the obstacle has been resolved, then the vehicle would continue moving towards point 3 during its survey without needing to avoid the obstacle anymore.
State_permutation: next_point = 'point2'

3. User query: What if the vehicle’s active behavior is 'return_home' and there is no obstacle?
Explanation: If the vehicle’s active behavior is 'return_home' and there is no obstacle, then the vehicle would continue returning to its starting point without the need to avoid any obstacles.
State_permutation: active_behaviour = 'return_home', obstacle_name = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point3,very fast,southeast,southeast,northeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the deploy value is False and the return value is False?
Explanation: If the deploy value is False and the return value is False, then the vehicle would be idle with no activated behavior.
State Permutation: deploy = False, return = False, behavior_stage = 'idle'

Query 2: What if the deploy value is True, return value is True and the obstacle proximity is very close?
Explanation: If the deploy value is True, the return value is True, and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State Permutation: deploy = True, return = True, obstacle_proximity = 'very close', active_behavior = 'return_waypt_avoid_obstacle'

Query 3: What if the obstacle resolved value is True?
Explanation: If the obstacle resolved value is True, then it means that the obstacle has been successfully avoided or resolved.
State Permutation: obstacle_resolved = True",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point3,very fast,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"Query 1:
What if the vehicle is in the idle state?
Explanation: If the vehicle is in the idle state, it means that both deploy and return are false, and there are no obstacles present. The vehicle will remain stationary and not engage in any behavior.
State permutation: 'deploy': False, 'return': False, 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': False, 'behaviour_stage': 'idle'

Query 2:
What if the vehicle is returning to its starting point while avoiding an obstacle?
Explanation: If the vehicle is returning to its starting point while avoiding an obstacle, it means that both deploy and return are true, and there is an obstacle in close proximity that has not been resolved. The vehicle will navigate towards its starting point while actively avoiding the obstacle.
State permutation: 'deploy': True, 'return': True, 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': False, 'behaviour_stage': 'returning'

Query 3:
What if the vehicle is surveying an area while avoiding an obstacle?
Explanation: If the vehicle is surveying an area while avoiding an obstacle, it means that deploy is true, return is false, and there is an obstacle in nearby proximity that has not been resolved. The vehicle will continue its survey while actively avoiding the obstacle.
State permutation: 'deploy': True, 'return': False, 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': False, 'behaviour_stage': 'surveying, avoid_obstacle_avoid_obstacle_b'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point3,max speed,southeast,southeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'max speed', 'heading': 'southeast', 'next_point_direction': 'southeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the obstacle_b is resolved and obstacle proximity is still 'nearby'?
Explanation: If obstacle_b is resolved and the obstacle proximity is still 'nearby', then the vehicle would continue surveying the area while avoiding the obstacle_b and moving towards point 3.
State_permutation: obstacle_resolved = 'True', obstacle_proximity = 'nearby'

2. What if the vehicle is at point 2 and deploy is set to False?
Explanation: If the vehicle is at point 2 and deploy is set to False, then the vehicle would be idle with no activated behavior.
State_permutation: next_point = 'point2', deploy = 'False'

3. What if the vehicle is at point 0 and return is set to True?
Explanation: If the vehicle is at point 0 and return is set to True, then the vehicle would be returning to its starting point.
State_permutation: next_point = 'point0', return = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point3,very fast,southeast,east,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'east', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"Query 1:
What if the deploy flag is set to false?
Explanation: If the deploy flag is set to false, then the vehicle would not be able to carry out any survey or return activities. It would remain idle with no activated behavior.
State permutation: deploy = False

Query 2:
What if the obstacle proximity is very close?
Explanation: If the obstacle proximity is very close, then the vehicle would prioritize avoiding the obstacle over surveying or returning to its starting point. It would adjust its behavior to avoid the obstacle while continuing its survey or return activity.
State permutation: obstacle_proximity = 'very close'

Query 3:
What if the active behavior is changed to ""return_to_start""?
Explanation: If the active behavior is changed to ""return_to_start"", then the vehicle would prioritize returning to its starting point over surveying or avoiding obstacles. It would modify its behavior accordingly and directly head towards its starting position.
State permutation: active_behaviour = 'return_to_start'

Representation: 
{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'east', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}

State permutation 1:
Query 1 explanation: If the deploy flag is set to false, then the vehicle would not be able to carry out any survey or return activities. It would remain idle with no activated behavior.
State permutation: deploy = False

State permutation 2:
Query 2 explanation: If the obstacle proximity is very close, then the vehicle would prioritize avoiding the obstacle over surveying or returning to its starting point. It would adjust its behavior to avoid the obstacle while continuing its survey or return activity.
State permutation: obstacle_proximity = 'very close'

State permutation 3:
Query 3 explanation: If the active behavior is changed to ""return_to_start"", then the vehicle would prioritize returning to its starting point over surveying or avoiding obstacles. It would modify its behavior accordingly and directly head towards its starting position.
State permutation: active_behaviour = 'return_to_start'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point3,very fast,southeast,northeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
Representation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,in-transit,point3,very fast,southeast,northeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the vehicle is in close proximity to obstacle_b and the obstacle has been resolved?
Explanation: If the vehicle is in close proximity to obstacle_b and the obstacle has been resolved, then the vehicle would continue moving towards point 3 during its survey while no longer avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'close', obstacle_resolved = ‘True’

2. What if the vehicle is not deploying and is returning to its starting point?
Explanation: If the vehicle is not deploying and is returning to its starting point, then the vehicle would be idle with no activated behavior.
State_permutation: deploy = 'False', return = 'True'

3. What if the vehicle is deploying, not returning, and there is no obstacle present?
Explanation: If the vehicle is deploying, not returning, and there is no obstacle present, then the vehicle would be surveying the area without avoiding any obstacles.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'none', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,very close,False,in-transit,point3,very fast,southeast,northeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'southeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the vehicle deploys but doesn't return, and there is an obstacle_c in nearby proximity that hasn't been resolved?
Explanation: If there was an obstacle_c in nearby proximity that hasn't been resolved, the vehicle would continue surveying the area while avoiding the obstacle. 
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle deploys but doesn't return, and there is no obstacle present?
Explanation: If there is no obstacle present, the vehicle would continue surveying the area without any obstacles to avoid.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

3. What if the vehicle deploys and returns, and there is an obstacle_d in very close proximity that hasn't been resolved?
Explanation: If there was an obstacle_d in very close proximity that hasn't been resolved, the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,very close,False,in-transit,point3,very fast,northeast,northeast,northeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the deploy value is false and the return value is false?
Explanation: If the deploy value is false and the return value is false, then the vehicle would be idle with no activated behaviour.
State permutation: deploy = false, return = false

2. What if the deploy value is true and the return value is true?
Explanation: If the deploy value is true and the return value is true, then the vehicle would be returning to its starting point.
State permutation: deploy = true, return = true

3. What if the active_behaviour is 'waypt_survey,avoid_obstacle_avoid_obstacle_b'?
Explanation: If the active_behaviour is 'waypt_survey,avoid_obstacle_avoid_obstacle_b', then the vehicle would be surveying the area while avoiding obstacle_b.
State permutation: active_behaviour = 'waypt_survey,avoid_obstacle_avoid_obstacle_b'

Representation:
{
  'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': 'obstacle_b',
  'obstacle_proximity': 'very close',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point3',
  'speed': 'very fast',
  'heading': 'northeast',
  'next_point_direction': 'northeast',
  'obstacle_direction': 'northeast',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'
}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,very close,False,in-transit,point3,very fast,northeast,northeast,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the obstacle proximity is ""close"" instead of ""very close"" and the obstacle has not been resolved?
Explanation: If the obstacle proximity is ""close"" instead of ""very close"" and the obstacle has not been resolved, then the vehicle would still continue moving towards point 3 during its survey while avoiding the obstacle, but with a slightly larger distance from the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is in the return stage instead of the survey stage?
Explanation: If the vehicle is in the return stage instead of the survey stage, then the vehicle would be moving towards its starting point instead of continuing to survey the area.
State_permutation: behaviour_stage = 'return'

3. What if the obstacle has been resolved?
Explanation: If the obstacle has been resolved, then the vehicle would no longer need to avoid the obstacle and can continue its survey or return without any obstacle avoidance behavior.
State_permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,in-transit,point3,very fast,northeast,northeast,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_b","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",,"1. What if the obstacle_b is resolved and the vehicle is no longer avoiding it?
Explanation: If obstacle_b is resolved, then the vehicle would continue its survey towards point 3 without avoiding the obstacle.
State_permutation: obstacle_resolved = 'True'

2. What if the vehicle is now returning to its starting point?
Explanation: If return is true, then the vehicle would change its behavior to returning to its starting point instead of continuing the survey.
State_permutation: return = 'True'

3. What if the vehicle is no longer deploying?
Explanation: If deploy is false, then the vehicle would not be surveying the area and would be idle with no activated behavior.
State_permutation: deploy = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,in-transit,point3,very fast,northeast,northeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is surveying an area and encounters obstacle_c in very close proximity which hasn't been resolved?
Explanation: If the vehicle encounters obstacle_c in very close proximity, while surveying, it would change its course to avoid the obstacle and continue with the survey.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = False

2. What if the vehicle is returning to its starting point and encounters obstacle_d in nearby proximity which hasn't been resolved?
Explanation: If the vehicle encounters obstacle_d in nearby proximity while returning to its starting point, it would alter its path to avoid the obstacle and continue returning to the starting point.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'nearby', obstacle_resolved = False

3. What if the vehicle is surveying an area, encounters obstacle_e in close proximity which hasn't been resolved, and has its speed set to slow?
Explanation: If the vehicle is surveying an area, encounters obstacle_e in close proximity, and has its speed set to slow, it would reduce its speed further to safely navigate around the obstacle while continuing the survey.
State permutation: obstacle_name = 'obstacle_e', obstacle_proximity = 'close', obstacle_resolved = False, speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,advanced,point3,very fast,northeast,northeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle has already resolved obstacle_b before reaching point 3?
Explanation: If the vehicle has already resolved obstacle_b before reaching point 3, then it would continue surveying the area without avoiding the obstacle.
State permutation: obstacle_resolved = 'True'

2. What if the vehicle is in the initial stage and the obstacle_proximity is set to 'nearby' instead of 'close'?
Explanation: If the vehicle is in the initial stage and the obstacle_proximity is set to 'nearby', then the vehicle would survey the area while avoiding the obstacle instead of returning to its starting point.
State permutation: obstacle_proximity = 'nearby', behaviour_stage = 'initial', active_behaviour = 'waypt_survey'

3. What if the vehicle is not deploying and the obstacle_direction is set to 'east' instead of 'northwest'?
Explanation: If the vehicle is not deploying and the obstacle_direction is set to 'east', then the vehicle would remain idle with no activated behavior instead of surveying the area or returning to its starting point.
State permutation: deploy = 'False', obstacle_direction = 'east'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,advanced,point4,very fast,northeast,northeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle has already resolved obstacle_b and there is a new obstacle_c in close proximity? 
Explanation: If there was a new obstacle_c in close proximity, the vehicle would continue surveying the area while avoiding the new obstacle_c, as it has already resolved obstacle_b.
State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is currently in the process of returning to its starting point and there is an obstacle_a in nearby proximity which hasn't been resolved? 
Explanation: If there was an obstacle_a in nearby proximity, the vehicle would deviate from its return path and start surveying again while avoiding the obstacle_a.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

3. What if the vehicle is currently idle and there is an obstacle_b in very close proximity which hasn't been resolved? 
Explanation: If there was an obstacle_b in very close proximity, the vehicle would start surveying the area while avoiding the obstacle_b.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,close,False,in-transit,point4,very fast,northeast,northeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the deploy value is changed to false?
Explanation: If the deploy value is set to false, then the vehicle will not be surveying any area and will remain idle with no activated behavior.
State_permutation: deploy = False

2. What if the obstacle proximity is changed to ""very close""?
Explanation: If the obstacle proximity is ""very close"", then the vehicle will be surveying the area while avoiding the obstacle and maintaining a very cautious distance.
State_permutation: obstacle_proximity = 'very close'

3. What if the active behavior is changed to ""returning""?
Explanation: If the active behavior is set to ""returning"", then the vehicle will be returning to its starting point rather than surveying the area.
State_permutation: active_behaviour = 'returning'

Representation:
{
  'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': none,
  'obstacle_proximity': 'none',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point3',
  'speed': 'very fast',
  'heading': 'northwest',
  'next_point_direction': 'northwest',
  'obstacle_direction': 'northwest',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}

User query: What if there's obstacle_a in close proximity which hasn't been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

Representation:
{
  'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.',
  'deploy': 'True',
  'return': 'False',
  'obstacle_name': 'obstacle_b',
  'obstacle_proximity': 'close',
  'obstacle_resolved': 'False',
  'behaviour_stage': 'in-transit',
  'next_point': 'point4',
  'speed': 'very fast',
  'heading': 'northeast',
  'next_point_direction': 'northeast',
  'obstacle_direction': 'northwest',
  'name': 'alpha',
  'active_behaviour': 'waypt_survey'
}

User query: What if the speed is changed to ""medium""?
Explanation: If the speed is set to ""medium"", the vehicle's speed during the survey will be slower compared to ""very fast"".
State_permutation: speed = 'medium'

User query: What if the next point direction is changed to ""north""?
Explanation: If the next point direction is set to ""north"", the vehicle will change its heading to move towards the north during the survey.
State_permutation: next_point_direction = 'north'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point4,very fast,northeast,northeast,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if the vehicle has already resolved obstacle_b before reaching point 4?
   Explanation: If the vehicle had already resolved obstacle_b before reaching point 4, then it would continue moving towards point 4 during its survey without having to avoid the obstacle.
   State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'True'

2. User query: What if the vehicle is currently in the return stage but obstacle_b is still unresolved and in close proximity?
   Explanation: If the vehicle is currently in the return stage but obstacle_b is still unresolved and in close proximity, then the vehicle would change its behavior to continue avoiding the obstacle while returning to its starting point.
   State permutation: return = 'True', obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = 'False', active_behaviour = 'obstacle_avoidance_return'

3. User query: What if the vehicle's objective is to go to points 0, 1, 2, 3, 4, 5, and then return to starting position, but deploy and return are both false?
   Explanation: If the vehicle's objective is to go to points 0, 1, 2, 3, 4, 5, and then return to starting position, but deploy and return are both false, then the vehicle would be in an idle state with no activated behavior.
   State permutation: deploy = 'False', return = 'False', active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,nearby,False,in-transit,point4,very fast,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"Query 1: What if the deploy and return values are both true?

Explanation: If the deploy and return values are both true, then the vehicle would be returning to its starting point while avoiding an obstacle.

State permutation: deploy = True, return = True

Query 2: What if the obstacle proximity has a value of ""none""?

Explanation: If the obstacle proximity has a value of ""none"", then there would be no obstacle in close proximity and the vehicle would continue surveying the area.

State permutation: obstacle_proximity = 'none'

Query 3: What if the vehicle is not in transit?

Explanation: If the vehicle is not in transit, then it is not currently moving towards any point and might be in a different behaviour stage or idle.

State permutation: behaviour_stage = 'not in transit'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,medium distance,False,in-transit,point4,very fast,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop its surveying behavior and start avoiding the obstacle while ensuring the obstacle is resolved. 
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. What if there’s no obstacle but the vehicle is already avoiding an obstacle?
Explanation: If there is no obstacle present but the vehicle is already avoiding an obstacle, then the vehicle would continue to survey the area while keeping the avoided obstacle in mind and maintaining a safe distance from it.
State_permutation: obstacle_name = 'none', 'obstacle_proximity': 'none', obstacle_resolved = ‘True’

3. What if the vehicle has already reached its starting point but there’s an obstacle_b in medium distance proximity?
Explanation: If the vehicle has already reached its starting point but there's an obstacle_b in medium distance proximity, then the vehicle would change its behavior from returning to surveying and start avoiding the obstacle while ensuring the obstacle is resolved.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'medium distance', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,far,False,in-transit,point4,very fast,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point3', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'} 

Another example:
User query: What if the vehicle has completed the survey and the obstacle has been resolved?
Explanation: If the vehicle has completed the survey and the obstacle has been resolved, then the vehicle would begin returning to its starting point without avoiding the obstacle.
State permutation: {'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'returning', 'next_point': 'starting_position', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'return_to_start'}

One more example:
User query: What if the vehicle is not deployed and there is an obstacle in nearby proximity?
Explanation: If the vehicle is not deployed and there is an obstacle in nearby proximity, then the vehicle would remain idle with no activated behaviour.
State permutation: {'objective': 'None', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'obstacle_c', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'idle', 'next_point': 'none', 'speed': 'none', 'heading': 'none', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,far,False,in-transit,point4,max speed,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_a in very close proximity which hasn’t been avoided?
   Explanation: If there was obstacle_a in very close proximity, then the vehicle would immediately stop surveying and start avoiding the obstacle in order to ensure its safety.
   State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

2. User query: What if deploy is false and return is true?
   Explanation: If deploy is false and return is true, then the vehicle would stop surveying the area and start returning to its starting point.
   State permutation: deploy = 'False', return = 'True'

3. User query: What if the objective changes to 'Go to points 0, 1, 2, 3 and then perform a specific task'?
   Explanation: If the objective changes to 'Go to points 0, 1, 2, 3 and then perform a specific task', then the vehicle would perform the specific task after reaching point 3 instead of returning to its starting point.
   State permutation: objective = 'Go to points 0, 1, 2, 3 and then perform a specific task'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,none,False,in-transit,point4,max speed,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if obstacle_b is in very close proximity and has not been resolved?
Explanation: If obstacle_b was in very close proximity and had not been resolved, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State Permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

2. What if deploy is false and return is true?
Explanation: If deploy was false and return was true, then the vehicle would be returning to its starting point without surveying the area.
State Permutation: deploy = 'False', return = 'True'

3. What if obstacle_name is equal to none and obstacle_resolved is true?
Explanation: If obstacle_name was equal to none and obstacle_resolved was true, then there would be no obstacle in the vehicle's proximity and it would continue surveying the area.
State Permutation: obstacle_name = 'none', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,none,False,in-transit,point4,very fast,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the vehicle is not returning to its starting position and there is an obstacle_b in nearby proximity that hasn't been avoided? 
Explanation: If there was an obstacle_b in nearby proximity and the vehicle is not returning to its starting position, then the vehicle would continue moving towards point4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False', 'return': 'False'

2. What if the vehicle is returning to its starting position and there is an obstacle_b in nearby proximity that hasn't been avoided? 
Explanation: If there was an obstacle_b in nearby proximity and the vehicle is returning to its starting position, then the vehicle would alter its trajectory to avoid the obstacle while returning to its starting point.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False', 'return': 'True'

3. What if the vehicle is surveying the area, there is an obstacle_b in very close proximity that hasn't been avoided, and the obstacle has already been resolved? 
Explanation: If there was an obstacle_b in very close proximity and the obstacle has already been resolved, then the vehicle would continue surveying the area without altering its trajectory.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'True', 'active_behaviour': 'waypt_survey'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_b,very far,False,in-transit,point4,max speed,northeast,northeast,southwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is in the process of returning to its starting point and there is an obstacle_c in nearby proximity that hasn't been avoided?
Explanation: If there was obstacle_c in nearby proximity, then the vehicle would change its behavior from returning to its starting point to surveying the area while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2) What if the vehicle is surveying an area and there is an obstacle_d in very close proximity that hasn't been avoided?
Explanation: If there was obstacle_d in very close proximity, then the vehicle would continue surveying the area while avoiding the obstacle_d.
State permutation: obstacle_name = 'obstacle_d', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3) What if the vehicle is idle with no activated behavior and there is an obstacle_e in close proximity that hasn't been avoided?
Explanation: If there was obstacle_e in close proximity, then the vehicle would become active and start surveying the area while avoiding the obstacle_e.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_e', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,True,in-transit,point4,max speed,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

Another example:
User query: What if the vehicle is not in-transit?

Explanation: If the vehicle is not in-transit, then it means it has either completed its survey or it is returning to its starting point.

State permutation:
behaviour_stage = 'completed_survey' or behaviour_stage = 'returning'

Another example:
User query: What if the vehicle is not deploying but is returning?

Explanation: If the vehicle is not deploying but is returning, then it means the vehicle has already completed its survey and is now returning to its starting point.

State permutation:
deploy = 'False'
return = 'True'

Another example:
Representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'north'}

User query: What if obstacle_a is resolved?

Explanation: If obstacle_a is resolved, then the vehicle would continue moving towards point 4 during its survey without avoiding the obstacle.

State permutation:
obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point4,max speed,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'max speed', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation: 

obstacle_name = 'obstacle_a'

obstacle_proximity = 'close'

obstacle_resolved = False

User query: What if there’s obstacle_b in nearby proximity which has been resolved?

Explanation: If there was obstacle_b in nearby proximity, which has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.

State permutation: 

obstacle_name = 'obstacle_b'

obstacle_proximity = 'nearby'

obstacle_resolved = True

User query: What if the vehicle is in transit and reaches the last point?

Explanation: If the vehicle is in transit and reaches the last point, the active behavior would change to 'returning to starting point' and the vehicle would start its return journey.

State permutation: 

behaviour_stage = 'returning to starting point'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point4,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. User query: What if there’s obstacle_b in very close proximity which hasn’t been avoided?
   Explanation: If there was obstacle_b in very close proximity, then the vehicle would stop surveying and start returning to its starting position while avoiding the obstacle.
   State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. User query: What if deploy is false and return is true?
   Explanation: If deploy is false and return is true, then the vehicle would be in the process of returning to its starting position.
   State_permutation: deploy = 'False', return = 'True'

3. User query: What if there’s obstacle_c in nearby proximity which has been resolved?
   Explanation: If there was obstacle_c in nearby proximity that has been resolved, then the vehicle would continue its survey while no longer avoiding the obstacle.
   State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'nearby', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point4,very fast,northeast,northeast,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point4', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northeast', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if there’s obstacle_a in nearby proximity which hasn’t been avoided? 
Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 4 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

What if the vehicle is currently in its return stage and encounter obstacle_b in very close proximity which hasn’t been resolved? 
Explanation: If the vehicle is currently in its return stage and encounters obstacle_b in very close proximity which hasn’t been resolved, then the vehicle would change its behavior to return to the starting point while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

What if the vehicle is currently idle with no activated behavior and an obstacle_c suddenly appears in close proximity? 
Explanation: If the vehicle is currently idle with no activated behavior and obstacle_c suddenly appears in close proximity, then the vehicle would change its behavior to survey the area while avoiding the obstacle.
State_permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_c', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,advanced,point5,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'advanced', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = 'False'

What if the deploy value is false?
Explanation: If the deploy value is false, then the vehicle would be idle with no activated behavior regardless of other conditions.
State_permutation: deploy = 'False'

What if the return value is true?
Explanation: If the return value is true, then the vehicle would be returning to its starting point, regardless of other conditions.
State_permutation: return = 'True'

What if there’s obstacle_b in very close proximity which has been resolved?
Explanation: If there was obstacle_b in very close proximity and it has been resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = 'True'

What if the vehicle is in the advanced behavior stage?
Explanation: If the vehicle is in the advanced behavior stage, then the current behavior would be different regardless of other conditions.
State_permutation: behaviour_stage = 'advanced'

What if the next_point is 'point5' and the heading is 'southeast'?
Explanation: If the next_point is 'point5' and the heading is 'southeast', then the vehicle would be moving towards a different point in a different direction.
State_permutation: next_point = 'point5', heading = 'southeast'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point5,very fast,northeast,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if the vehicle needs to return to its starting position while avoiding an obstacle in very close proximity?

Explanation: If there was an obstacle in very close proximity and the vehicle needed to return to its starting position, then the vehicle would change its behavior and prioritize obstacle avoidance over returning to the starting position.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = 'False'

What if the vehicle is currently idle but needs to survey an area while avoiding an obstacle in nearby proximity?

Explanation: If there was an obstacle in nearby proximity and the vehicle needs to survey an area, then the vehicle would change its behavior and start surveying the area while also avoiding the obstacle.

State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

What if the vehicle is currently surveying an area and an obstacle in close proximity is resolved?

Explanation: If an obstacle in close proximity is resolved while the vehicle is surveying an area, then the vehicle would continue surveying the area without any change in behavior.

State permutation: obstacle_name = 'none', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,none,none,False,in-transit,point5,very fast,northwest,northwest,none,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"What if there’s obstacle_a in nearby proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in nearby proximity, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

What if there’s obstacle_b in very close proximity which hasn’t been avoided?

Explanation: If there was obstacle_b in very close proximity, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

What if the obstacle_c has been resolved but there’s obstacle_d in close proximity which hasn’t been avoided?

Explanation: If the obstacle_c has been resolved but there’s obstacle_d in close proximity, then the vehicle would continue moving towards point 5 during its survey while avoiding obstacle_d.

State_permutation: obstacle_name = 'obstacle_d', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,none,False,in-transit,point5,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1) What if the vehicle is currently returning to its starting point and there is an obstacle nearby that has not been resolved?
Explanation: If there is an obstacle nearby that has not been resolved while the vehicle is returning to its starting point, then the vehicle would change its behavior to avoid the obstacle and continue returning to its starting point.
State permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2) What if the vehicle is currently surveying the area and there is an obstacle nearby that has not been resolved?
Explanation: If there is an obstacle nearby that has not been resolved while the vehicle is surveying the area, then the vehicle would change its behavior to avoid the obstacle and continue surveying the area.
State permutation: deploy = 'True', return = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

3) What if the vehicle is currently idle with no activated behavior and there is an obstacle nearby that has not been resolved?
Explanation: If there is an obstacle nearby that has not been resolved while the vehicle is idle with no activated behavior, then the vehicle would change its behavior to avoid the obstacle and remain idle.
State permutation: deploy = 'False', return = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point5,very fast,northwest,northwest,northwest,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"User query: What if obstacle_a in close proximity hasn't been avoided?

Explanation: If there was obstacle_a in close proximity that hasn't been avoided, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'close'
obstacle_resolved = 'False'

User query: What if obstacle_a in very close proximity hasn't been avoided?

Explanation: If there was obstacle_a in very close proximity that hasn't been avoided, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a'
obstacle_proximity = 'very close'
obstacle_resolved = 'False'

User query: What if obstacle_b in nearby proximity hasn't been avoided?

Explanation: If there was obstacle_b in nearby proximity that hasn't been avoided, then the vehicle would continue moving towards point 5 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_b'
obstacle_proximity = 'nearby'
obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point5,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle reaches point 5 and there is still an obstacle_a in close proximity that hasn't been avoided?
Explanation: If there was still an obstacle_a in close proximity at point 5, then the vehicle would continue avoiding the obstacle and would not start returning to its starting position.
State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'close', obstacle_resolved = ‘False’, next_point = 'point5'

2. What if the vehicle resolves the obstacle_a and there is no other obstacle in close proximity?
Explanation: If the vehicle resolves obstacle_a and there are no other obstacles in close proximity, then the vehicle would continue surveying the area without avoiding any obstacles.
State permutation: obstacle_name = none, 'obstacle_proximity': 'none', obstacle_resolved = ‘True'

3. What if the vehicle reaches point 3 and there is an obstacle_b in very close proximity that hasn't been avoided?
Explanation: If there was an obstacle_b in very close proximity at point 3, then the vehicle would continue avoiding obstacle_b and would not start returning to its starting position.
State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’, next_point = 'point3'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point5,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the deploy is set to false?
Explanation: If the deploy is false, then the vehicle would not be surveying the area and would remain idle with no activated behavior.
State_permutation: deploy = False

2. What if the return is set to true?
Explanation: If the return is true, then the vehicle would be returning to its starting point instead of continuing the survey.
State_permutation: return = True

3. What if the obstacle proximity is set to far?
Explanation: If the obstacle proximity is far, then the vehicle would not consider the obstacle as a threat and would continue the survey without avoiding it.
State_permutation: obstacle_proximity = ""far""",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point5,very fast,northeast,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the obstacle proximity is very close instead of close, and the obstacle is not resolved? 
Explanation: If the obstacle proximity is very close and the obstacle is not resolved, then the vehicle would be in a more critical situation and would take even more caution while surveying the area and avoiding the obstacle. 
State_permutation: obstacle_proximity = 'very close'

2. What if the vehicle is not in the survey behavior stage, but instead in the return behavior stage?
Explanation: If the vehicle is in the return behavior stage, then it would be heading back to its starting position regardless of the obstacle. 
State_permutation: active_behaviour = 'return'

3. What if the vehicle is not in the ""alpha"" name, but instead in the ""beta"" name?
Explanation: If the vehicle has the name ""beta"" instead of ""alpha"", then the representation and behavior would apply to a different autonomous vehicle. 
State_permutation: name = 'beta'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point5,very fast,northeast,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northeast', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the obstacle_a is resolved? 
Explanation: If the obstacle_a is resolved, then the vehicle would continue moving towards point 3 during its survey without avoiding the obstacle.
State_permutation: obstacle_resolved = 'True'

2. What if the objective changes to 'Go to points 0, 1, 2, 4, 5 and then return to starting position'?
Explanation: If the objective changes, then the vehicle would modify its route and skip point 3, continue to point 4, and then return to the starting position.
State_permutation: objective = 'Go to points 0, 1, 2, 4, 5 and then return to starting position', next_point = 'point2'

3. What if the vehicle's behavior stage changes to 'idle'?
Explanation: If the vehicle's behavior stage changes to 'idle', then the vehicle would stop its survey or return and remain idle at its current location.
State_permutation: behavior_stage = 'idle', active_behaviour = 'None'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point5,very fast,northwest,northwest,northwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'northwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the obstacle_resolution is set to true?
Explanation: If the obstacle_resolution is true, it means that the obstacle has been successfully avoided. In this case, the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle and the obstacle_name would become None.
State_permutation: obstacle_resolved = True, obstacle_name = None

2. What if the next_point_direction is changed to southeast?
Explanation: If the next_point_direction is changed to southeast, it means that the vehicle would change its heading and move towards the southeast direction while continuing its survey.
State_permutation: next_point_direction = southeast

3. What if the active_behaviour is changed to 'return_to_start'?
Explanation: If the active_behaviour is changed to 'return_to_start', it means that the vehicle would stop its survey and start returning to its starting position.
State_permutation: active_behaviour = return_to_start",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point5,very fast,northwest,northwest,southwest,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southwest', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"Query 1: What if the vehicle resolves obstacle_a in close proximity during its survey?
Explanation: If the vehicle resolves obstacle_a in close proximity during its survey, it will continue moving towards point 3 while avoiding the obstacle. The obstacle_resolved variable will be set to 'True'.
State permutation: obstacle_resolved = 'True'

Query 2: What if the vehicle changes its active behavior to 'return_home'?
Explanation: If the vehicle changes its active behavior to 'return_home', it means that it has completed its survey and is now returning to its starting position. The active_behaviour variable will change to 'return_home'.
State permutation: active_behaviour = 'return_home'

Query 3: What if the vehicle changes its speed to 'slow' while surveying an area?
Explanation: If the vehicle changes its speed to 'slow' while surveying an area, it will continue surveying the area at a slower speed. The speed variable will change to 'slow'.
State permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,very close,False,in-transit,point5,very fast,northwest,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle is in the process of returning to its starting point and there is obstacle_b in nearby proximity that hasn't been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

2. What if the vehicle is in the process of surveying an area, obstacle_c is in very close proximity, and the obstacle has been resolved?
Explanation: If there was obstacle_c in very close proximity that has been resolved, then the vehicle would continue surveying the area without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = 'True'

3. What if the vehicle is in the process of surveying the area while avoiding an obstacle, but the obstacle's proximity changes to none?
Explanation: If the obstacle's proximity changes to none while the vehicle is surveying and avoiding the obstacle, then the vehicle would still continue surveying the area but no longer avoid the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point5,very fast,northwest,northwest,southeast,alpha,"waypt_survey,avoid_obstacle_avoid_obstacle_a","{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_a'}",,"1. What if the vehicle resolves obstacle_a in close proximity?
Explanation: If the vehicle resolves obstacle_a in close proximity, then it would continue moving towards point 3 during its survey without avoiding the obstacle.
State_permutation: obstacle_resolved = 'True'

2. What if the vehicle resolves obstacle_a in very close proximity?
Explanation: If the vehicle resolves obstacle_a in very close proximity, then it would continue moving towards point 3 during its survey without avoiding the obstacle.
State_permutation: obstacle_proximity = 'very close', obstacle_resolved = 'True'

3. What if the vehicle encounters obstacle_b in nearby proximity?
Explanation: If the vehicle encounters obstacle_b in nearby proximity, then it would continue moving towards point 3 during its survey while avoiding obstacle_b.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = 'False'

Representation: {'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_b', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey,avoid_obstacle_avoid_obstacle_b'}",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,close,False,in-transit,point5,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'close', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if obstacle_a is in very close proximity and it hasn't been avoided?
Explanation: If obstacle_a is in very close proximity and hasn't been avoided, then the vehicle would immediately stop its survey and start returning to its starting position while avoiding the obstacle.
State permutation: obstacle_proximity = 'very close'

2. What if obstacle_a is resolved and there is no other obstacle present?
Explanation: If obstacle_a is resolved and there is no other obstacle present, then the vehicle would continue its survey without any obstacle avoidance behavior.
State permutation: obstacle_resolved = 'True', obstacle_name = 'none'

3. What if the vehicle has completed its survey and it is time to return, but obstacle_a is still in close proximity and hasn't been resolved?
Explanation: If the vehicle has completed its survey and it is time to return, but obstacle_a is still in close proximity and hasn't been resolved, then the vehicle would change its behavior and continue surveying the area while avoiding the obstacle until it is resolved or the obstacle proximity changes.
State permutation: active_behaviour = 'waypt_survey', obstacle_resolved = 'False', obstacle_name = 'obstacle_a', obstacle_proximity = 'close'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,False,obstacle_a,nearby,False,in-transit,point5,very fast,northwest,northwest,southeast,alpha,waypt_survey,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'False', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'point5', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_survey'}",,"1. What if the deploy variable is set to false?
Explanation: If the deploy variable is set to false, then the vehicle will be idle with no activated behavior.
State permutation: deploy = False

2. What if the return variable is set to true and the obstacle proximity is very close?
Explanation: If the return variable is set to true and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State permutation: return = True, obstacle_proximity = 'very close'

3. What if the active_behavior is changed to 'returning'?
Explanation: If the active_behavior is changed to 'returning', then the vehicle would be returning to its starting point.
State permutation: active_behavior = 'returning'

Representation:
{'objective': 'Go to points 0, 1, 2, 3 and then return to starting position.',
 'deploy': True,
 'return': False,
 'obstacle_name': None,
 'obstacle_proximity': 'none',
 'obstacle_resolved': False,
 'behaviour_stage': 'in-transit',
 'next_point': 'point3',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'northwest',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}

Explanation:
If there's obstacle_a in close proximity which hasn't been avoided, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.

State permutation:
obstacle_name = 'obstacle_a',
obstacle_proximity = 'close',
obstacle_resolved = False

Representation:
{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.',
 'deploy': True,
 'return': False,
 'obstacle_name': 'obstacle_a',
 'obstacle_proximity': 'nearby',
 'obstacle_resolved': False,
 'behaviour_stage': 'in-transit',
 'next_point': 'point5',
 'speed': 'very fast',
 'heading': 'northwest',
 'next_point_direction': 'northwest',
 'obstacle_direction': 'southeast',
 'name': 'alpha',
 'active_behaviour': 'waypt_survey'}

Explanation:
If the deploy variable is set to false.
State permutation: deploy = False

2. What if the return variable is set to true and the obstacle proximity is very close?
Explanation: If the return variable is set to true and the obstacle proximity is very close, then the vehicle would be returning to its starting point while avoiding the obstacle.
State permutation: return = True, obstacle_proximity = 'very close'

3. What if the next_point_direction is changed to 'southeast'?
Explanation: If the next_point_direction is changed to 'southeast', then the vehicle's heading would be southeast towards the next point.
State permutation: next_point_direction = 'southeast'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,nearby,False,completed,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"What if obstacle_a is resolved and obstacle proximity is not close or very close?
Explanation: If obstacle_a is resolved and the obstacle proximity is not close or very close, then the vehicle would continue surveying the area or returning to its starting point without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'far', obstacle_resolved = 'True'

What if there is no obstacle present?
Explanation: If there is no obstacle present, then the vehicle would continue its current behavior of surveying the area or returning to its starting point without avoiding any obstacle.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'

What if the vehicle is already at its starting point and return is false?
Explanation: If the vehicle is already at its starting point and return is false, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = 'True', return = 'False', objective = 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', next_point = 'none', active_behaviour = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,none,very fast,northwest,none,southeast,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. User query: What if the vehicle is in the behavior stage of ""surveying""?
   Explanation: If the vehicle is in the behavior stage of ""surveying"", then it implies that the vehicle is currently surveying an area. 
   State permutation: behaviour_stage = 'surveying'

2. User query: What if the vehicle has resolved obstacle_a and there are no obstacles nearby?
   Explanation: If the vehicle has resolved obstacle_a and there are no obstacles nearby, then the vehicle would continue its survey or return to its starting position without avoiding any obstacles.
   State permutation: obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'True'

3. User query: What if the vehicle's speed is slow instead of very fast?
   Explanation: If the vehicle's speed is slow instead of very fast, then it would affect the vehicle's movement and potentially the time it takes to complete its objectives.
   State permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,nearby,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'nearby', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1) What if the vehicle is already returning to its starting position and there's an obstacle in close proximity that hasn't been avoided?
Explanation: If there was an obstacle in close proximity while the vehicle is returning to its starting position, then the vehicle would continue avoiding the obstacle and adjusting its return trajectory accordingly.
State_permutation: deploy = True, return = True, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

2) What if the obstacle proximity changes to ""very close""?
Explanation: If the obstacle proximity changes to ""very close"", then the vehicle's behavior would remain the same, surveying the area while avoiding the obstacle.
State_permutation: deploy = True, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'very close', obstacle_resolved = False

3) What if the obstacle name changes to ""obstacle_b"" and its resolved status changes to True?
Explanation: If the obstacle name changes to ""obstacle_b"" and its resolved status changes to True, then the vehicle would no longer consider it as an obstacle and would continue its survey or return to its starting position without avoidance behavior.
State_permutation: deploy = True, return = False, obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = True",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,medium distance,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'medium distance', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s obstacle_a in very close proximity which hasn’t been resolved? 

Explanation: If there was obstacle_a in very close proximity and it hasn't been resolved, then the vehicle would continue moving towards point 3 during its survey while actively avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_a', 'obstacle_proximity': 'very close', obstacle_resolved = 'False'

2. What if there’s obstacle_b in nearby proximity which hasn’t been resolved? 

Explanation: If there was obstacle_b in nearby proximity and it hasn't been resolved, then the vehicle would continue moving towards its starting point during its return while actively avoiding the obstacle.

State permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = 'False'

3. What if there’s no obstacle but the vehicle is in transit?

Explanation: If there's no obstacle but the vehicle is still in transit, it means that the vehicle has not reached either the survey or return stage yet. It could be on its way to the survey area or returning from it.

State permutation: obstacle_name = none, 'obstacle_proximity': 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,very fast,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if obstacle_a is in close proximity and has not been resolved yet?
Explanation: If there was obstacle_a in close proximity and it has not been resolved yet, then the vehicle would continue moving towards point 3 during its survey while actively avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

2. What if the vehicle is not deployed but there is obstacle_b in very close proximity that has not been resolved yet?
Explanation: If the vehicle is not deployed and there is obstacle_b in very close proximity that has not been resolved yet, then the vehicle would remain idle with no activated behavior.
State_permutation: deploy = 'False', obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = 'False'

3. What if the vehicle is deployed, returning to its starting point, and there is obstacle_c in close proximity that has been resolved?
Explanation: If the vehicle is deployed, returning to its starting point, and there is obstacle_c in close proximity that has been resolved, then the vehicle would continue returning to its starting point without actively avoiding the obstacle.
State_permutation: deploy = 'True', return = 'True', obstacle_name = 'obstacle_c', obstacle_proximity = 'close', obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. User query: What if the vehicle is not deployed?
Explanation: If the vehicle is not deployed, then the vehicle will be idle with no activated behavior.
State permutation: deploy = 'False'

2. User query: What if the vehicle has resolved the obstacle?
Explanation: If the vehicle has resolved the obstacle, then the vehicle can continue its survey or return to its starting point without avoiding the obstacle.
State permutation: obstacle_resolved = 'True'

3. User query: What if the vehicle is at a slower speed?
Explanation: If the vehicle is at a slower speed, then its behavior and decision-making may be affected, potentially causing changes in the surveying or returning process.
State permutation: speed = 'slow'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,none,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the vehicle encounters obstacle_b in very close proximity while returning?
Explanation: If there was obstacle_b in very close proximity, then the vehicle would modify its behavior and avoid the obstacle while continuing to return to its starting position.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close'

2. What if the vehicle is in idle mode with no activated behavior?
Explanation: If the vehicle is in idle mode with no activated behavior, then it means the deploy variable is false, so the vehicle would not be surveying or returning. It would remain stationary until the deploy variable is set to true.
State permutation: deploy = False

3. What if there are no obstacles present and the vehicle is in survey mode?
Explanation: If there are no obstacles present and the vehicle is in survey mode, then it would continue surveying the area without any considerations for obstacle avoidance.
State permutation: obstacle_name = 'none', obstacle_proximity = 'none'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,obstacle_a,very far,False,in-transit,pointstart,max speed,northwest,northwest,southeast,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'obstacle_a', 'obstacle_proximity': 'very far', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'southeast', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if the deploy value is false instead of true?
Explanation: If the deploy value is false, then the vehicle would not be surveying an area or returning to its starting point. Instead, it would remain idle with no activated behavior.
State permutation: deploy = 'False'

2. What if the obstacle resolved value is true instead of false?
Explanation: If the obstacle resolved value is true, then it means that the obstacle has been successfully avoided or resolved. In this case, the vehicle would continue its survey or return to its starting point without considering the obstacle.
State permutation: obstacle_resolved = 'True'

3. What if the obstacle proximity has the value ""far"" instead of ""very far""?
Explanation: If the obstacle proximity has the value ""far"" instead of ""very far"", then the vehicle would still be aware of the obstacle but it might not take avoiding actions unless the obstacle proximity becomes ""nearby"", ""close"" or ""very close"".
State permutation: obstacle_proximity = 'far'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,none,none,True,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'True', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s an obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was obstacle_b in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'nearby', obstacle_resolved = ‘False’

2. What if the obstacle_c in very close proximity has been resolved?
Explanation: If the obstacle_c in very close proximity has been resolved, then the vehicle would continue surveying the area while avoiding the previously resolved obstacle.
State_permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'very close', obstacle_resolved = ‘True’

3. What if the deploy flag is false and the return flag is true?
Explanation: If the deploy flag is false and the return flag is true, then the vehicle would be in the idle state with no activated behavior.
State_permutation: deploy = False, return = True",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,max speed,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s an obstacle named obstacle_b in close proximity which hasn’t been avoided?
Explanation: If there was an obstacle named obstacle_b in close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'close', obstacle_resolved = ‘False’

2. What if there’s an obstacle named obstacle_c in nearby proximity which has been resolved?
Explanation: If there was an obstacle named obstacle_c in nearby proximity that has been resolved, then the vehicle would continue returning to its starting point without avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = 'True'

3. What if deploy is false and return is false, with no obstacle present?
Explanation: If deploy is false and return is false, with no obstacle present, then the vehicle would remain idle with no activated behavior.
State permutation: deploy = 'False', return = 'False', obstacle_name = 'none', obstacle_proximity = 'none', obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",True,True,none,none,False,in-transit,pointstart,very fast,northwest,northwest,none,alpha,waypt_return,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'True', 'return': 'True', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'in-transit', 'next_point': 'pointstart', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'northwest', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'waypt_return'}",,"1. What if there’s an obstacle_b in nearby proximity which hasn’t been avoided?
Explanation: If there was an obstacle_b in nearby proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_b', 'obstacle_proximity': 'nearby', obstacle_resolved = ‘False’

2. What if there’s an obstacle_c in very close proximity which hasn’t been avoided?
Explanation: If there was an obstacle_c in very close proximity, then the vehicle would continue returning to its starting point while avoiding the obstacle.
State_permutation: obstacle_name = 'obstacle_c', 'obstacle_proximity': 'very close', obstacle_resolved = ‘False’

3. What if the obstacle_d is resolved while the vehicle is surveying the area?
Explanation: If the obstacle_d is resolved while the vehicle is surveying the area, then the vehicle would continue surveying the area without avoiding the obstacle.
State_permutation: obstacle_resolved = ‘True’",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,max speed,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'max speed', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is true, return is false, obstacle name is obstacle_a, obstacle resolved is false, and obstacle proximity is nearby?
Explanation: If there is an obstacle named obstacle_a nearby that has not been resolved, then the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: deploy = true, return = false, obstacle_name = 'obstacle_a', obstacle_proximity = 'nearby', obstacle_resolved = false

2. What if deploy is true, return is true, obstacle name is obstacle_b, obstacle resolved is true, and obstacle proximity is very close?
Explanation: If there is an obstacle named obstacle_b very close that has been resolved, then the vehicle would return to its starting point without avoiding the obstacle.
State permutation: deploy = true, return = true, obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = true

3. What if deploy is false and return is true?
Explanation: If deploy is false and return is true, then the vehicle would be idle with no activated behavior and it would not be returning to its starting point.
State permutation: deploy = false, return = true",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,very fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'very fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity and it hasn't been avoided, then the vehicle would remain idle with no activated behavior. 

State permutation: 
- obstacle_name = 'obstacle_a'
- obstacle_proximity = 'close'
- obstacle_resolved = 'False'

---

User query: What if deploy is false and return is true?

Explanation: If deploy is false and return is true, then the vehicle would be returning to its starting point.

State permutation:
- deploy = 'False'
- return = 'True'

---

User query: What if the vehicle is surveying an area and obstacle_name is not equal to none?

Explanation: If the vehicle is surveying an area and there is an obstacle present, then the vehicle would continue the survey while avoiding the obstacle.

State permutation:
- deploy = 'True'
- return = 'False'
- obstacle_name = 'obstacle_b' (assuming obstacle_b is present)
- obstacle_proximity = 'close' (assuming the obstacle is in close proximity)
- obstacle_resolved = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,fast,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'fast', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"1. What if deploy is true, return is false, obstacle name is obstacle_a, obstacle resolved is false, and obstacle proximity has the value close?
Explanation: If there is an obstacle named obstacle_a in close proximity that has not been resolved, the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: deploy = True, return = False, obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = False

2. What if deploy is true, return is true, obstacle name is obstacle_b, obstacle resolved is false, and obstacle proximity has the value very close?
Explanation: If there is an obstacle named obstacle_b in very close proximity that has not been resolved, the vehicle would start returning to its starting point while avoiding the obstacle.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = False

3. What if deploy is false and return is false?
Explanation: If deploy is false and return is false, then the vehicle would be idle with no activated behavior.
State permutation: deploy = False, return = False",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,moderate,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'moderate', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query: What if there’s obstacle_a in close proximity which hasn’t been avoided?

Explanation: If there was obstacle_a in close proximity, then the vehicle would be idle with no activated behavior.

State permutation: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False', deploy = 'False', return = 'False', active_behaviour = 'none'

User query: What if deploy is true and return is true?

Explanation: If deploy is true and return is true, then the vehicle would be returning to its starting point.

State permutation: deploy = 'True', return = 'True', active_behaviour = 'none'

User query: What if obstacle_resolved is true?

Explanation: If obstacle_resolved is true, it means that the obstacle has been successfully avoided.

State permutation: obstacle_resolved = 'True'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,low,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'low', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"User query 1: What if there’s obstacle_a in close proximity which hasn’t been avoided?
Explanation: If there was obstacle_a in close proximity, then the vehicle would continue moving towards point 3 during its survey while avoiding the obstacle.
State permutation 1: obstacle_name = 'obstacle_a', obstacle_proximity = 'close', obstacle_resolved = 'False'

User query 2: What if the vehicle is currently returning to its starting point?
Explanation: If the vehicle is currently returning to its starting point, it means that the surveying of the area has been completed and the vehicle is on its way back to the starting point.
State permutation 2: deploy = 'True', return = 'True'

User query 3: What if the vehicle is currently idle with no activated behavior?
Explanation: If the vehicle is currently idle with no activated behavior, it means that the deployment and return flags are both set to false, indicating that the vehicle is not engaged in any surveying or returning activities.
State permutation 3: deploy = 'False', return = 'False'",
"Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.",False,False,none,none,False,completed,none,idle,northwest,none,none,alpha,none,"{'objective': 'Go to points 0, 1, 2, 3, 4, 5 and then return to starting position.', 'deploy': 'False', 'return': 'False', 'obstacle_name': 'none', 'obstacle_proximity': 'none', 'obstacle_resolved': 'False', 'behaviour_stage': 'completed', 'next_point': 'none', 'speed': 'idle', 'heading': 'northwest', 'next_point_direction': 'none', 'obstacle_direction': 'none', 'name': 'alpha', 'active_behaviour': 'none'}",,"Query 1:
What if the vehicle is deployed and there's an obstacle_b in very close proximity that has not been resolved?
Explanation: If there was obstacle_b in very close proximity, the vehicle would continue surveying the area while avoiding the obstacle.
State permutation: obstacle_name = 'obstacle_b', obstacle_proximity = 'very close', obstacle_resolved = False

Query 2:
What if the vehicle is not deployed and there's an obstacle_c in nearby proximity that has not been resolved?
Explanation: If there was obstacle_c in nearby proximity, the vehicle would remain idle with no activated behavior.
State permutation: deploy = False, obstacle_name = 'obstacle_c', obstacle_proximity = 'nearby', obstacle_resolved = False

Query 3:
What if the vehicle is deployed, returning to its starting point, and there's an obstacle_d in nearby proximity that has been resolved?
Explanation: If there was obstacle_d in nearby proximity that has been resolved, the vehicle would continue returning to its starting point without avoiding the obstacle.
State permutation: deploy = True, return = True, obstacle_name = 'obstacle_d', obstacle_proximity = 'nearby', obstacle_resolved = True",
